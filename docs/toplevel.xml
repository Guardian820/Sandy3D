<asdoc>

<classRec name='PrimitiveMode' fullname='sandy.primitive:PrimitiveMode' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\primitive\PrimitiveMode.as' namespace='sandy.primitive' access='public' baseclass='Object' isFinal='true' isDynamic='false' >
<description><![CDATA[
 The PrimitiveMode class defines modes of creation for some primitives.
  <p>Some of the Sandy primitives can be created in one of two modes,
 TRI mode and QUAD mode. TRI mode makes for a better perspective
 distortion for textures, while QUAD mode gives better performance.</p>
  ]]></description>
<author><![CDATA[ Thomas Pfeiffer - kiroukou
  ]]></author>
<version><![CDATA[ 3.1
 ]]></version>
<date><![CDATA[  26.07.2007
 ]]></date>
</classRec>
<field name='QUAD' fullname='sandy.primitive:PrimitiveMode/QUAD' type='String' isStatic='true' isConst='true' defaultValue='quad' >
<description><![CDATA[
  Specifies the surfaces of the primitive is built up by rectangular polygons.
  ]]></description>
</field>
<field name='TRI' fullname='sandy.primitive:PrimitiveMode/TRI' type='String' isStatic='true' isConst='true' defaultValue='tri' >
<description><![CDATA[
  Specifies the surfaces of the primitive is built up by triangles.
  ]]></description>
</field>
<interfaceRec name='Primitive3D' fullname='sandy.primitive:Primitive3D' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\primitive\Primitive3D.as' namespace='sandy.primitive' access='public' baseClasses='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
 An interface implemented by all 3D primitive classes.
  <p>This is to ensure that all primitives classes implements the necessary method(s)</p>
  ]]></description>
<author><![CDATA[ Thomas Pfeiffer - kiroukou
  ]]></author>
<version><![CDATA[ 3.1
 ]]></version>
<date><![CDATA[  10/05/2007
 ]]></date>
</interfaceRec>
<method name='generate' fullname='sandy.primitive:Primitive3D/sandy.primitive:Primitive3D:generate' isStatic='false' isFinal='false' isOverride='false'  param_names='arguments' param_types='restParam' param_defaults='undefined' result_type='sandy.core.scenegraph:Geometry3D'>
<description><![CDATA[
  Generates the geometry for the primitive.
    ]]></description>
<return><![CDATA[The geometry object for the primitive.
    ]]></return>
<see><![CDATA[sandy.core.scenegraph.Geometry3D
  ]]></see>
</method>
<classRec name='SkyBox' fullname='sandy.primitive:SkyBox' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\primitive\SkyBox.as' namespace='sandy.primitive' access='public' baseclass='sandy.core.scenegraph:TransformGroup' isFinal='false' isDynamic='false' >
<description><![CDATA[
 A SkyBox is a TransformGroup of six Plane3D objects that form a box.
  ]]></description>
<author><![CDATA[ Thomas Pfeiffer
  ]]></author>
<example><![CDATA[The following code creates a SkyBox with appearances for the front, back, left, and right sides.
 <listing version="3.1">
 var mySkyBox:SkyBox = new SkyBox( "game_sky", 3000, 6, 6 );
  // Set the appearance for the front, back, left, and right sides
 mySkyBox.front.appearance = new Appearance( new BitmapMaterial( myPic.bitmapData ) );
 mySkyBox.back.appearance = new Appearance( new BitmapMaterial( myPic.bitmapData ) );
 mySkyBox.left.appearance = new Appearance( new BitmapMaterial( myPic.bitmapData ) );
 mySkyBox.right.appearance = new Appearance( new BitmapMaterial( myPic.bitmapData ) );
  // Remove unneeded sides
 mySkyBox.top.remove();
 mySkyBox.bottom.remove();
  // Link the skybox to a group to display it
 aGroup.addChild( mySkyBox );
 </listing>
  ]]></example>
<see><![CDATA[Plane3D
 ]]></see>
<version><![CDATA[ 3.1
 ]]></version>
<date><![CDATA[  26.09.2007
  ]]></date>
</classRec>
<method name='SkyBox' fullname='sandy.primitive:SkyBox/SkyBox' isStatic='false' isFinal='false' isOverride='false'  param_names='p_sName;p_nDim;p_nQualityH;p_nQualityV' param_types='String;Number;uint;uint' param_defaults='null;100;1;1' result_type='*'>
<description><![CDATA[
  Creates a SkyBox object.
    <p>The skybox is created as a TransformGroup. This is a special behaviour comparing the other primitives which directly extend Shape3D.
  A skyBox isn't a graphical object itself, but it is composed of 6 planes (Plane3D objects) that represents the 6 sides of the skybox.</p>
    <p>The planes are automatically created, and placed for you. You can access them individually thanks to the getter methods.
  The planes are created with a default name, which is simply the concatenation of the skybox name and "_left" for the left side, "_top" for the top side, etc.</p>
    ]]></description>
<param><![CDATA[p_sName  The name of the skybox. It is recommended to give a explicit name.
  ]]></param>
<param><![CDATA[p_nDim   The dimension of the skybox. This number is used for the width, height, and depth.
  ]]></param>
<param><![CDATA[p_nQualityH Number of horizontal segments of the planes of the skybox. (WARNING: Some faces are rotated, and so, the quality isn't representative. To fix!)
  ]]></param>
<param><![CDATA[p_nQualityV Number of vertical segments of the planes of the skybox. (WARNING: Some faces are rotated, and so, the quality isn't representative. To fix!)
    ]]></param>
</method>
<method name='back' fullname='sandy.primitive:SkyBox/back/get' isStatic='false' isFinal='false' isOverride='false'  result_type='sandy.primitive:Plane3D'>
<description><![CDATA[
  The back plane of the SkyBox.
  ]]></description>
</method>
<method name='bottom' fullname='sandy.primitive:SkyBox/bottom/get' isStatic='false' isFinal='false' isOverride='false'  result_type='sandy.primitive:Plane3D'>
<description><![CDATA[
  The bottom plane of the SkyBox.
  ]]></description>
</method>
<method name='front' fullname='sandy.primitive:SkyBox/front/get' isStatic='false' isFinal='false' isOverride='false'  result_type='sandy.primitive:Plane3D'>
<description><![CDATA[
  The front plane of the SkyBox.
  ]]></description>
</method>
<method name='left' fullname='sandy.primitive:SkyBox/left/get' isStatic='false' isFinal='false' isOverride='false'  result_type='sandy.primitive:Plane3D'>
<description><![CDATA[
  The left plane of the SkyBox.
  ]]></description>
</method>
<method name='right' fullname='sandy.primitive:SkyBox/right/get' isStatic='false' isFinal='false' isOverride='false'  result_type='sandy.primitive:Plane3D'>
<description><![CDATA[
  The right plane of the SkyBox.
  ]]></description>
</method>
<method name='top' fullname='sandy.primitive:SkyBox/top/get' isStatic='false' isFinal='false' isOverride='false'  result_type='sandy.primitive:Plane3D'>
<description><![CDATA[
  The top plane of the SkyBox.
  ]]></description>
</method>
<field name='m_aPlanes' fullname='sandy.primitive:SkyBox/private:m_aPlanes' type='Array' isStatic='false' isConst='false' defaultValue='' >
</field>
<classRec name='Sphere' fullname='sandy.primitive:Sphere' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\primitive\Sphere.as' namespace='sandy.primitive' access='public' baseclass='sandy.core.scenegraph:Shape3D' interfaces='sandy.primitive:Primitive3D' isFinal='false' isDynamic='false' >
<description><![CDATA[
 The Sphere class is used for creating a sphere primitive
  ]]></description>
<author><![CDATA[ Thomas Pfeiffer - kiroukou
  ]]></author>
<example><![CDATA[To create a sphere with radius 150 and with default settings
 for the number of horizontal and vertical segments, use the following statement:
  <listing version="3.1">
     var mySphere:Sphere = new Sphere( "theSphere", 150);
  </listing>
 ]]></example>
<version><![CDATA[ 3.1
 ]]></version>
<date><![CDATA[  26.07.2007
  ]]></date>
</classRec>
<method name='Sphere' fullname='sandy.primitive:Sphere/sandy.primitive:Sphere' isStatic='false' isFinal='false' isOverride='false'  param_names='p_sName;p_nRadius;p_nSegmentsW;p_nSegmentsH' param_types='String;Number;Number;Number' param_defaults='null;100;8;6' result_type='*'>
<description><![CDATA[
  Creates a Sphere primitive.
    <p>The sphere is created centered at the origin of the world coordinate system,
  with its poles on the y axis</p>
    ]]></description>
<param><![CDATA[p_sName   A string identifier for this object.
  ]]></param>
<param><![CDATA[p_nRadius  Radius of the sphere.
  ]]></param>
<param><![CDATA[p_nSegmentsW Number of horizontal segments.
  ]]></param>
<param><![CDATA[p_nSegmentsH Number of vertical segments.
  ]]></param>
</method>
<method name='generate' fullname='sandy.primitive:Sphere/generate' isStatic='false' isFinal='false' isOverride='false'  param_names='arguments' param_types='restParam' param_defaults='undefined' result_type='sandy.core.scenegraph:Geometry3D'>
<description><![CDATA[
  Generates the geometry for the sphere.
    ]]></description>
<return><![CDATA[The geometry object for the sphere.
    ]]></return>
<see><![CDATA[sandy.core.scenegraph.Geometry3D
  ]]></see>
</method>
<method name='toString' fullname='sandy.primitive:Sphere/toString' isStatic='false' isFinal='false' isOverride='true'  result_type='String'>
<description><![CDATA[
  ]]></description>
<private><![CDATA[]]></private>
</method>
<field name='DEFAULT_RADIUS' fullname='sandy.primitive:Sphere/DEFAULT_RADIUS' type='Number' isStatic='true' isConst='true' defaultValue='100' >
<description><![CDATA[
  The default radius for a sphere.
  ]]></description>
</field>
<field name='DEFAULT_SCALE' fullname='sandy.primitive:Sphere/DEFAULT_SCALE' type='Number' isStatic='true' isConst='true' defaultValue='1' >
<description><![CDATA[
  The default scale for a sphere texture.
  ]]></description>
</field>
<field name='DEFAULT_SEGMENTSH' fullname='sandy.primitive:Sphere/DEFAULT_SEGMENTSH' type='Number' isStatic='true' isConst='true' defaultValue='6' >
<description><![CDATA[
  The default number of vertical segments for a sphere.
  ]]></description>
</field>
<field name='DEFAULT_SEGMENTSW' fullname='sandy.primitive:Sphere/DEFAULT_SEGMENTSW' type='Number' isStatic='true' isConst='true' defaultValue='8' >
<description><![CDATA[
  The default number of horizontal segments for a sphere.
  ]]></description>
</field>
<field name='MIN_SEGMENTSH' fullname='sandy.primitive:Sphere/MIN_SEGMENTSH' type='Number' isStatic='true' isConst='true' defaultValue='2' >
<description><![CDATA[
  The minimum number of vertical segments for a sphere.
  ]]></description>
</field>
<field name='MIN_SEGMENTSW' fullname='sandy.primitive:Sphere/MIN_SEGMENTSW' type='Number' isStatic='true' isConst='true' defaultValue='3' >
<description><![CDATA[
  The minimum number of horizontal segments for a sphere.
  ]]></description>
</field>
<field name='radius' fullname='sandy.primitive:Sphere/private:radius' type='Number' isStatic='false' isConst='false' >
</field>
<field name='segmentsH' fullname='sandy.primitive:Sphere/segmentsH' type='Number' isStatic='false' isConst='false' >
<description><![CDATA[
  The number of vertical segments.
  ]]></description>
</field>
<field name='segmentsW' fullname='sandy.primitive:Sphere/segmentsW' type='Number' isStatic='false' isConst='false' >
<description><![CDATA[
  The number of horizontal segments.
  ]]></description>
</field>
<classRec name='Plane3D' fullname='sandy.primitive:Plane3D' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\primitive\Plane3D.as' namespace='sandy.primitive' access='public' baseclass='sandy.core.scenegraph:Shape3D' interfaces='sandy.primitive:Primitive3D' isFinal='false' isDynamic='false' >
<description><![CDATA[
 The Plane3D is used for creating a plane primitive.
  ]]></description>
<author><![CDATA[ Thomas Pfeiffer - kiroukou
  ]]></author>
<example><![CDATA[To create a 100x100 plane with default values quality and alignment, use the following statement:
  <listing version="3.1">
     var plane:Plane3D = new Plane3D( "thePlane", 100, 100 );
  </listing>
 To create the same plane aligned parallel to the xy-plane use:
 <listing version="3.1">
     var plane:Plane3D = new Plane3D( "thePlane", 100, 100, 1, 1, Plane3D.XY_ALIGNED );
  </listing>
 ]]></example>
<version><![CDATA[ 3.1
 ]]></version>
<date><![CDATA[  12.01.2006
  ]]></date>
</classRec>
<method name='Plane3D' fullname='sandy.primitive:Plane3D/Plane3D' isStatic='false' isFinal='false' isOverride='false'  param_names='p_sName;p_nHeight;p_nWidth;p_nQualityH;p_nQualityV;p_sType;p_sMode' param_types='String;Number;Number;uint;uint;String;String' param_defaults='null;100;100;1;1;unknown;null' result_type='*'>
<description><![CDATA[
  Creates a Plane primitive.
    <p>The plane is created with its center in the origin of the global coordinate system.
  It will be parallel to one of the global coordinate planes in accordance with the alignment parameter.</p>
    ]]></description>
<param><![CDATA[p_sName  A string identifier for this object.
  ]]></param>
<param><![CDATA[p_nHeight  The height of the plane.
  ]]></param>
<param><![CDATA[p_nWidth  The width of the plane.
  ]]></param>
<param><![CDATA[p_nQualityH  Number of horizontal segments.
  ]]></param>
<param><![CDATA[p_nQualityV Number of vertical segments.
  ]]></param>
<param><![CDATA[p_sType  Alignment of the plane, one of XY_ALIGNED ( default ), YZ_ALIGNED or ZX_ALIGNED.
  ]]></param>
<param><![CDATA[p_sMode  The generation mode. "tri" generates faces with 3 vertices, and "quad" generates faces with 4 vertices.
    ]]></param>
<see><![CDATA[PrimitiveMode
  ]]></see>
</method>
<method name='generate' fullname='sandy.primitive:Plane3D/generate' isStatic='false' isFinal='false' isOverride='false'  param_names='arguments' param_types='restParam' param_defaults='undefined' result_type='sandy.core.scenegraph:Geometry3D'>
<description><![CDATA[
  Generates the geometry for the plane.
    ]]></description>
<see><![CDATA[sandy.core.scenegraph.Geometry3D
  ]]></see>
</method>
<method name='toString' fullname='sandy.primitive:Plane3D/toString' isStatic='false' isFinal='false' isOverride='true'  result_type='String'>
<description><![CDATA[
  ]]></description>
<private><![CDATA[]]></private>
</method>
<field name='XY_ALIGNED' fullname='sandy.primitive:Plane3D/XY_ALIGNED' type='String' isStatic='true' isConst='true' defaultValue='xy_aligned' >
<description><![CDATA[
  Specifies plane will be parallel to the xy-plane.
  ]]></description>
</field>
<field name='YZ_ALIGNED' fullname='sandy.primitive:Plane3D/YZ_ALIGNED' type='String' isStatic='true' isConst='true' defaultValue='yz_aligned' >
<description><![CDATA[
  Specifies plane will be parallel to the yz-plane.
  ]]></description>
</field>
<field name='ZX_ALIGNED' fullname='sandy.primitive:Plane3D/ZX_ALIGNED' type='String' isStatic='true' isConst='true' defaultValue='zx_aligned' >
<description><![CDATA[
  Specifies plane will be parallel to the zx-plane.
  ]]></description>
</field>
<field name='_h' fullname='sandy.primitive:Plane3D/private:_h' type='Number' isStatic='false' isConst='false' >
</field>
<field name='_lg' fullname='sandy.primitive:Plane3D/private:_lg' type='Number' isStatic='false' isConst='false' >
</field>
<field name='_mode' fullname='sandy.primitive:Plane3D/private:_mode' type='String' isStatic='false' isConst='false' >
</field>
<field name='_qH' fullname='sandy.primitive:Plane3D/private:_qH' type='uint' isStatic='false' isConst='false' >
</field>
<field name='_qV' fullname='sandy.primitive:Plane3D/private:_qV' type='uint' isStatic='false' isConst='false' >
</field>
<field name='m_sType' fullname='sandy.primitive:Plane3D/private:m_sType' type='String' isStatic='false' isConst='false' >
</field>
<classRec name='MD2' fullname='sandy.primitive:MD2' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\primitive\MD2.as' namespace='sandy.primitive' access='public' baseclass='sandy.core.scenegraph:Shape3D' interfaces='sandy.primitive:Primitive3D' isFinal='false' isDynamic='false' >
<description><![CDATA[
 MD2 primitive.
 
 ]]></description>
<author><![CDATA[Philippe Ajoux (philippe.ajoux]]></author>
<gmail.com)><![CDATA[ ]]></gmail.com)>
</classRec>
<method name='MD2' fullname='sandy.primitive:MD2/MD2' isStatic='false' isFinal='false' isOverride='false'  param_names='p_sName;data;scale' param_types='String;flash.utils:ByteArray;Number' param_defaults='undefined;undefined;1' result_type='*'>
<description><![CDATA[
  Creates MD2 primitive.
    ]]></description>
<param><![CDATA[p_sName Shape instance name.
  ]]></param>
<param><![CDATA[data MD2 binary data.
  ]]></param>
<param><![CDATA[scale Adjusts model scale.
  ]]></param>
</method>
<method name='appendFrameCopy' fullname='sandy.primitive:MD2/appendFrameCopy' isStatic='false' isFinal='false' isOverride='false'  param_names='sourceFrame' param_types='int' param_defaults='undefined' result_type='int'>
<description><![CDATA[
  Appends frame copy to animation.
  You can use this to rearrange an animation at runtime, create transitions, etc.
    ]]></description>
<return><![CDATA[number of created frame.
  ]]></return>
</method>
<method name='clone' fullname='sandy.primitive:MD2/clone' isStatic='false' isFinal='false' isOverride='true'  param_names='p_sName;p_bKeepTransform' param_types='String;Boolean' param_defaults=';false' result_type='sandy.core.scenegraph:Shape3D'>
</method>
<method name='cull' fullname='sandy.primitive:MD2/cull' isStatic='false' isFinal='false' isOverride='true'  param_names='p_oFrustum;p_oViewMatrix;p_bChanged' param_types='sandy.view:Frustum;sandy.core.data:Matrix4;Boolean' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
   
   Tests this node against the camera frustum to get its visibility.
      <p>If this node and its children are not within the frustum, 
   the node is set to cull and it would not be displayed.<p/>
   <p>The method also updates the bounding volumes to make the more accurate culling system possible.<br/>
   First the bounding sphere is updated, and if intersecting, 
   the bounding box is updated to perform the more precise culling.</p>
   <p><b>[MANDATORY] The update method must be called first!</b></p>
      ]]></description>
<param><![CDATA[p_oScene The current scene
   ]]></param>
<param><![CDATA[p_oFrustum The frustum of the current camera
   ]]></param>
<param><![CDATA[p_oViewMatrix The view martix of the curren camera
   ]]></param>
<param><![CDATA[p_bChanged
   ]]></param>
</method>
<method name='generate' fullname='sandy.primitive:MD2/generate' isStatic='false' isFinal='false' isOverride='false'  param_names='arguments' param_types='restParam' param_defaults='undefined' result_type='sandy.core.scenegraph:Geometry3D'>
<description><![CDATA[
  Generates the geometry for MD2. Sandy never actually calls this method,
  but we still implement it according to Primitive3D, just in case :)
    ]]></description>
<return><![CDATA[The geometry object.
  ]]></return>
</method>
<method name='replaceFrame' fullname='sandy.primitive:MD2/replaceFrame' isStatic='false' isFinal='false' isOverride='false'  param_names='destFrame;sourceFrame' param_types='int;Number' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
  Replaces specified frame with other key or interpolated frame.
  ]]></description>
</method>
<method name='frame' fullname='sandy.primitive:MD2/frame/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
<description><![CDATA[
  Frame number. You can tween this value to play MD2 animation.
  ]]></description>
</method>
<method name='nFrames' fullname='sandy.primitive:MD2/nFrames/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
<description><![CDATA[
   Number of frames in MD2.
   ]]></description>
</method>
<method name='textureFileName' fullname='sandy.primitive:MD2/textureFileName/get' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[
  Texture file name.
  ]]></description>
</method>
<method name='frame' fullname='sandy.primitive:MD2/frame/set' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='Number' param_defaults='undefined' result_type='void'>
<description><![CDATA[
  ]]></description>
<private><![CDATA[]]></private>
</method>
<field name='frames' fullname='sandy.primitive:MD2/frames' type='Array' isStatic='false' isConst='false' defaultValue='unknown' >
<description><![CDATA[
  Frames map. This maps frame names to frame numbers.
  ]]></description>
</field>
<field name='framesize' fullname='sandy.primitive:MD2/private:framesize' type='int' isStatic='false' isConst='false' >
</field>
<field name='ident' fullname='sandy.primitive:MD2/private:ident' type='int' isStatic='false' isConst='false' >
</field>
<field name='m_oBinaryData' fullname='sandy.primitive:MD2/private:m_oBinaryData' type='flash.utils:ByteArray' isStatic='false' isConst='false' >
</field>
<field name='num_frames' fullname='sandy.primitive:MD2/private:num_frames' type='int' isStatic='false' isConst='false' >
</field>
<field name='num_glcmds' fullname='sandy.primitive:MD2/private:num_glcmds' type='int' isStatic='false' isConst='false' >
</field>
<field name='num_skins' fullname='sandy.primitive:MD2/private:num_skins' type='int' isStatic='false' isConst='false' >
</field>
<field name='num_st' fullname='sandy.primitive:MD2/private:num_st' type='int' isStatic='false' isConst='false' >
</field>
<field name='num_tris' fullname='sandy.primitive:MD2/private:num_tris' type='int' isStatic='false' isConst='false' >
</field>
<field name='num_vertices' fullname='sandy.primitive:MD2/private:num_vertices' type='int' isStatic='false' isConst='false' >
</field>
<field name='offset_end' fullname='sandy.primitive:MD2/private:offset_end' type='int' isStatic='false' isConst='false' >
</field>
<field name='offset_frames' fullname='sandy.primitive:MD2/private:offset_frames' type='int' isStatic='false' isConst='false' >
</field>
<field name='offset_glcmds' fullname='sandy.primitive:MD2/private:offset_glcmds' type='int' isStatic='false' isConst='false' >
</field>
<field name='offset_skins' fullname='sandy.primitive:MD2/private:offset_skins' type='int' isStatic='false' isConst='false' >
</field>
<field name='offset_st' fullname='sandy.primitive:MD2/private:offset_st' type='int' isStatic='false' isConst='false' >
</field>
<field name='offset_tris' fullname='sandy.primitive:MD2/private:offset_tris' type='int' isStatic='false' isConst='false' >
</field>
<field name='scaling' fullname='sandy.primitive:MD2/private:scaling' type='Number' isStatic='false' isConst='false' >
</field>
<field name='skinheight' fullname='sandy.primitive:MD2/private:skinheight' type='int' isStatic='false' isConst='false' >
</field>
<field name='skinwidth' fullname='sandy.primitive:MD2/private:skinwidth' type='int' isStatic='false' isConst='false' >
</field>
<field name='t' fullname='sandy.primitive:MD2/private:t' type='Number' isStatic='false' isConst='false' >
</field>
<field name='texture' fullname='sandy.primitive:MD2/private:texture' type='String' isStatic='false' isConst='false' >
</field>
<field name='version' fullname='sandy.primitive:MD2/private:version' type='int' isStatic='false' isConst='false' >
</field>
<field name='vertices' fullname='sandy.primitive:MD2/private:vertices' type='Array' isStatic='false' isConst='false' defaultValue='unknown' >
</field>
<classRec name='Hedra' fullname='sandy.primitive:Hedra' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\primitive\Hedra.as' namespace='sandy.primitive' access='public' baseclass='sandy.core.scenegraph:Shape3D' interfaces='sandy.primitive:Primitive3D' isFinal='false' isDynamic='false' >
<description><![CDATA[
 The Hedra class is used for creating a hedra. A hedra can be seen as two pyramids joined at their bases.
  ]]></description>
<author><![CDATA[ Thomas Pfeiffer - kiroukou
  ]]></author>
<example><![CDATA[To create a hedra with ( y, x, z ) dimensions ( 100, 60, 80 ),
 use the following statement:
  <listing version="3.1">
     var myHedra:Hedra = new Hedra( "theObj", 100, 60, 80 );
  </listing>
 ]]></example>
<version><![CDATA[ 3.1
 ]]></version>
<date><![CDATA[  26.07.2007
  ]]></date>
</classRec>
<method name='Hedra' fullname='sandy.primitive:Hedra/Hedra' isStatic='false' isFinal='false' isOverride='false'  param_names='p_sName;p_nHeight;p_nWidth;p_nDepth' param_types='String;Number;Number;Number' param_defaults='null;100;100;100' result_type='*'>
<description><![CDATA[
  Creates a Hedra primitive.
    <p>The Hedra is created centered at the origin of the world coordinate system
  with its edges parallel to world coordinate axes.</p>
    ]]></description>
<param><![CDATA[p_sName A string identifier for this object.
  ]]></param>
<param><![CDATA[p_nHeight Height of the hedra (along the y-axis).
  ]]></param>
<param><![CDATA[p_nWidth Width of the hedra (along the x-axis).
  ]]></param>
<param><![CDATA[p_nDepth Depth of the hedra (along the z-axis).
  ]]></param>
</method>
<method name='generate' fullname='sandy.primitive:Hedra/generate' isStatic='false' isFinal='false' isOverride='false'  param_names='arguments' param_types='restParam' param_defaults='undefined' result_type='sandy.core.scenegraph:Geometry3D'>
<description><![CDATA[
  Generates the geometry for the hedra.
    ]]></description>
<return><![CDATA[The geometry object for the hedra.
    ]]></return>
<see><![CDATA[sandy.core.scenegraph.Geometry3D
  ]]></see>
</method>
<method name='toString' fullname='sandy.primitive:Hedra/toString' isStatic='false' isFinal='false' isOverride='true'  result_type='String'>
<description><![CDATA[
  ]]></description>
<private><![CDATA[]]></private>
</method>
<field name='_h' fullname='sandy.primitive:Hedra/private:_h' type='Number' isStatic='false' isConst='false' >
</field>
<field name='_lg' fullname='sandy.primitive:Hedra/private:_lg' type='Number' isStatic='false' isConst='false' >
</field>
<field name='_radius' fullname='sandy.primitive:Hedra/private:_radius' type='Number' isStatic='false' isConst='false' >
</field>
<classRec name='Box' fullname='sandy.primitive:Box' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\primitive\Box.as' namespace='sandy.primitive' access='public' baseclass='sandy.core.scenegraph:Shape3D' interfaces='sandy.primitive:Primitive3D' isFinal='false' isDynamic='false' >
<description><![CDATA[
 The Box class is used for creating a cube or box primitive ( cuboid ).
  ]]></description>
<author><![CDATA[ Thomas Pfeiffer - kiroukou
  ]]></author>
<example><![CDATA[To create a rectilinear box with ( x, y, z ) dimensions ( 50, 100, 150 )
 in 'tri' mode and a with a quality of 2, use the following statement:
  <listing version="3.1">
     var myBox:Box = new Box( "theBox", 50, 100, 150, PrimitiveMode.TRI, 2 );
  </listing>
 ]]></example>
<version><![CDATA[ 3.1
 ]]></version>
<date><![CDATA[  26.07.2007
  ]]></date>
</classRec>
<method name='Box' fullname='sandy.primitive:Box/Box' isStatic='false' isFinal='false' isOverride='false'  param_names='p_sName;p_nWidth;p_nHeight;p_nDepth;p_sMode;p_nQuality' param_types='String;Number;Number;Number;String;Number' param_defaults='null;6;6;6;tri;1' result_type='*'>
<description><![CDATA[
  Creates a Box primitive.
    <p>The Box is created centered at the origin of the world coordinate system,
  and with its edges parallel to world coordinate axes.</p>
    ]]></description>
<param><![CDATA[p_sName A string identifier for this object.
  ]]></param>
<param><![CDATA[p_nWidth  Width of the box (along the x-axis).
  ]]></param>
<param><![CDATA[p_nHeight Height of the box (along the y-axis).
  ]]></param>
<param><![CDATA[p_nDepth Depth of the box (along the z-axis).
  ]]></param>
<param><![CDATA[p_sMode One of two available face generation modes:
                       "tri" generates faces with 3 vertices,
     "quad" generates faces with 4 vertices.
    ]]></param>
<see><![CDATA[PrimitiveMode
  ]]></see>
</method>
<method name='__tesselate' fullname='sandy.primitive:Box/private:__tesselate' isStatic='false' isFinal='false' isOverride='false'  param_names='p_geometry;p0;p1;p2;p3;uv0;uv1;uv2;uv3;level' param_types='sandy.core.scenegraph:Geometry3D;Number;Number;Number;Number;Number;Number;Number;Number;Number' param_defaults='undefined;undefined;undefined;undefined;undefined;undefined;undefined;undefined;undefined;undefined' result_type='void'>
</method>
<method name='_generateFaces' fullname='sandy.primitive:Box/private:_generateFaces' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='generate' fullname='sandy.primitive:Box/generate' isStatic='false' isFinal='false' isOverride='false'  param_names='arguments' param_types='restParam' param_defaults='undefined' result_type='sandy.core.scenegraph:Geometry3D'>
<description><![CDATA[
  Generates the geometry object for the box.
    ]]></description>
<see><![CDATA[sandy.core.scenegraph.Geometry3D
  ]]></see>
</method>
<method name='getFace' fullname='sandy.primitive:Box/getFace' isStatic='false' isFinal='false' isOverride='false'  param_names='p_nFace' param_types='uint' param_defaults='undefined' result_type='sandy.core.data:PrimitiveFace'>
<description><![CDATA[
  Returns a PrimitiveFace object ( an array of polygons ) defining the specified face.
    ]]></description>
<param><![CDATA[p_nFace The requested face
  ]]></param>
<return><![CDATA[The PrimitiveFace object of the specified face.
    ]]></return>
<see><![CDATA[PrimitiveFace
  ]]></see>
</method>
<method name='toString' fullname='sandy.primitive:Box/toString' isStatic='false' isFinal='false' isOverride='true'  result_type='String'>
<description><![CDATA[
  ]]></description>
<private><![CDATA[]]></private>
</method>
<field name='FACE_BACK' fullname='sandy.primitive:Box/FACE_BACK' type='uint' isStatic='true' isConst='true' defaultValue='0' >
<description><![CDATA[
  The index of the back face of the box.
  ]]></description>
</field>
<field name='FACE_BOTTOM' fullname='sandy.primitive:Box/FACE_BOTTOM' type='uint' isStatic='true' isConst='true' defaultValue='2' >
<description><![CDATA[
  The index of the bottom face of the box.
  ]]></description>
</field>
<field name='FACE_FRONT' fullname='sandy.primitive:Box/FACE_FRONT' type='uint' isStatic='true' isConst='true' defaultValue='1' >
<description><![CDATA[
  The index of the front face of the box.
  ]]></description>
</field>
<field name='FACE_LEFT' fullname='sandy.primitive:Box/FACE_LEFT' type='uint' isStatic='true' isConst='true' defaultValue='4' >
<description><![CDATA[
  The index of the left face of the box.
  ]]></description>
</field>
<field name='FACE_RIGHT' fullname='sandy.primitive:Box/FACE_RIGHT' type='uint' isStatic='true' isConst='true' defaultValue='5' >
<description><![CDATA[
  The index of the right face of the box.
  ]]></description>
</field>
<field name='FACE_TOP' fullname='sandy.primitive:Box/FACE_TOP' type='uint' isStatic='true' isConst='true' defaultValue='3' >
<description><![CDATA[
  The index of the top face of the box.
  ]]></description>
</field>
<field name='_h' fullname='sandy.primitive:Box/private:_h' type='Number' isStatic='false' isConst='false' >
<description><![CDATA[
  height of the Box
  ]]></description>
</field>
<field name='_lg' fullname='sandy.primitive:Box/private:_lg' type='Number' isStatic='false' isConst='false' >
<description><![CDATA[
  depth of the Box
  ]]></description>
</field>
<field name='_mode' fullname='sandy.primitive:Box/private:_mode' type='String' isStatic='false' isConst='false' >
<description><![CDATA[
  creation mode - number of vertices per face
  ]]></description>
</field>
<field name='_q' fullname='sandy.primitive:Box/private:_q' type='Number' isStatic='false' isConst='false' >
<description><![CDATA[
  creation quality
  ]]></description>
</field>
<field name='_radius' fullname='sandy.primitive:Box/private:_radius' type='Number' isStatic='false' isConst='false' >
<description><![CDATA[
  width of the Box
  ]]></description>
</field>
<field name='m_aFaces' fullname='sandy.primitive:Box/private:m_aFaces' type='Array' isStatic='false' isConst='false' >
<description><![CDATA[
  faces of the cube
  ]]></description>
</field>
<classRec name='Torus' fullname='sandy.primitive:Torus' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\primitive\Torus.as' namespace='sandy.primitive' access='public' baseclass='sandy.core.scenegraph:Shape3D' interfaces='sandy.primitive:Primitive3D' isFinal='false' isDynamic='false' >
<description><![CDATA[
 The Torus class is used for creating a torus primitive. A torus can be seen as a doughnut.
  <p>All credits go to Tim Knipt from suite75.net who created the AS2 implementation.
 Original sources available at : http://www.suite75.net/svn/papervision3d/tim/as2/org/papervision3d/objects/Torus.as</p>
  ]]></description>
<author><![CDATA[ Thomas Pfeiffer ( adaption for Sandy )
 ]]></author>
<author><![CDATA[ Tim Knipt
  ]]></author>
<example><![CDATA[To create a torus with a large radius of 250, a small radius of 80,
 and with default settings for the number of horizontal and vertical segments,
 use the following statement:
  <listing version="3.1">
     var torus:Torus = new Torus( "theTorus", 250, 80 );
  </listing>
 ]]></example>
<version><![CDATA[ 3.1
 ]]></version>
<date><![CDATA[  26.07.2007
  ]]></date>
</classRec>
<method name='Torus' fullname='sandy.primitive:Torus/Torus' isStatic='false' isFinal='false' isOverride='false'  param_names='p_sName;p_nLargeRadius;p_nSmallRadius;p_nSegmentsW;p_nSegmentsH' param_types='String;Number;Number;Number;Number' param_defaults='null;100;50;12;8' result_type='*'>
<description><![CDATA[
  Creates a Torus primitive.
    <p>A torus is created at the origin of the world coordinate system, centered, with its axis along the y axis.</p>
    ]]></description>
<param><![CDATA[p_sName   A string identifier for this object.
  ]]></param>
<param><![CDATA[p_nLargeRadius Large radius of the torus.
  ]]></param>
<param><![CDATA[p_nSmallRadius Small radius of the torus.
  ]]></param>
<param><![CDATA[p_nSegmentsW Number of horizontal segments.
  ]]></param>
<param><![CDATA[p_nSegmentsH Number of vertical segments.
  ]]></param>
</method>
<method name='generate' fullname='sandy.primitive:Torus/generate' isStatic='false' isFinal='false' isOverride='false'  param_names='arguments' param_types='restParam' param_defaults='undefined' result_type='sandy.core.scenegraph:Geometry3D'>
<description><![CDATA[
  Generates the geometry for the torus.
    ]]></description>
<return><![CDATA[The geometry object for the torus.
    ]]></return>
<see><![CDATA[sandy.core.scenegraph.Geometry3D
  ]]></see>
</method>
<method name='toString' fullname='sandy.primitive:Torus/toString' isStatic='false' isFinal='false' isOverride='true'  result_type='String'>
<description><![CDATA[
  ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='torusVertex' fullname='sandy.primitive:Torus/private:torusVertex' isStatic='false' isFinal='false' isOverride='false'  param_names='a1;r1;a2;r2' param_types='Number;Number;Number;Number' param_defaults='undefined;undefined;undefined;undefined' result_type='Array'>
<description><![CDATA[
  Compute the x,y,z coordinates and surface normal for a torus vertex.
    ]]></description>
<param><![CDATA[a1 The angle relative to the center of the torus
  ]]></param>
<param><![CDATA[r1 Radius of the entire torus
  ]]></param>
<param><![CDATA[a2 The angle relative to the center of the torus slice
  ]]></param>
<param><![CDATA[r2 Radius of the torus ring cross-section
    ]]></param>
<return><![CDATA[Array [0]: vertex, [1]: normal
  ]]></return>
</method>
<field name='DEFAULT_LARGE_RADIUS' fullname='sandy.primitive:Torus/DEFAULT_LARGE_RADIUS' type='Number' isStatic='true' isConst='true' defaultValue='100' >
<description><![CDATA[ 
   The default large radius for a sphere.
   ]]></description>
</field>
<field name='DEFAULT_SCALE' fullname='sandy.primitive:Torus/DEFAULT_SCALE' type='Number' isStatic='true' isConst='true' defaultValue='1' >
<description><![CDATA[
  The default scale for a torus texture.
  ]]></description>
</field>
<field name='DEFAULT_SEGMENTSH' fullname='sandy.primitive:Torus/DEFAULT_SEGMENTSH' type='Number' isStatic='true' isConst='true' defaultValue='8' >
<description><![CDATA[
  The default number of vertical segments for a torus.
  ]]></description>
</field>
<field name='DEFAULT_SEGMENTSW' fullname='sandy.primitive:Torus/DEFAULT_SEGMENTSW' type='Number' isStatic='true' isConst='true' defaultValue='12' >
<description><![CDATA[
  The default number of horizontal segments for a torus.
  ]]></description>
</field>
<field name='DEFAULT_SMALL_RADIUS' fullname='sandy.primitive:Torus/DEFAULT_SMALL_RADIUS' type='Number' isStatic='true' isConst='true' defaultValue='50' >
<description><![CDATA[
   The default small radius for a sphere.
   ]]></description>
</field>
<field name='MIN_SEGMENTSH' fullname='sandy.primitive:Torus/MIN_SEGMENTSH' type='Number' isStatic='true' isConst='true' defaultValue='2' >
<description><![CDATA[
  The minimum number of vertical segments for a torus.
  ]]></description>
</field>
<field name='MIN_SEGMENTSW' fullname='sandy.primitive:Torus/MIN_SEGMENTSW' type='Number' isStatic='true' isConst='true' defaultValue='3' >
<description><![CDATA[
  The minimum number of horizontal segments for a torus.
  ]]></description>
</field>
<field name='largeRadius' fullname='sandy.primitive:Torus/largeRadius' type='Number' isStatic='false' isConst='false' >
<description><![CDATA[
   Large radius.
   ]]></description>
</field>
<field name='normals' fullname='sandy.primitive:Torus/normals' type='Array' isStatic='false' isConst='false' >
<description><![CDATA[
   Array of vertex normals.
   ]]></description>
</field>
<field name='segmentsH' fullname='sandy.primitive:Torus/segmentsH' type='Number' isStatic='false' isConst='false' >
<description><![CDATA[
  The number of vertical segments.
  ]]></description>
</field>
<field name='segmentsW' fullname='sandy.primitive:Torus/segmentsW' type='Number' isStatic='false' isConst='false' >
<description><![CDATA[
  The number of horizontal segments.
  ]]></description>
</field>
<field name='smallRadius' fullname='sandy.primitive:Torus/smallRadius' type='Number' isStatic='false' isConst='false' >
<description><![CDATA[
   Small radius.
   ]]></description>
</field>
<classRec name='Line3D' fullname='sandy.primitive:Line3D' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\primitive\Line3D.as' namespace='sandy.primitive' access='public' baseclass='sandy.core.scenegraph:Shape3D' interfaces='sandy.primitive:Primitive3D' isFinal='false' isDynamic='false' >
<description><![CDATA[
 The Line3D class is used for creating a line in 3D space.
  <p>The line is created by passing a comma delimited argument list containing Point3Ds.<br/>
 A Line3D object can only use the WireFrameMaterial[?]</p>
  ]]></description>
<author><![CDATA[ Thomas Pfeiffer - kiroukou
  ]]></author>
<example><![CDATA[To create a line between ( x0, y0, z0 ), ( x1, y1, z1 ), ( x2, y2, z3 ),
 use the following statement:
  <listing version="3.1">
     var myLine:Line3D = new Line3D( "aLine", new Point3D(x0, y0, z0), new Point3D( x1, y1, z1 ), new Point3D( x2, y2, z3 ));
  </listing>
 ]]></example>
<version><![CDATA[ 3.1
 ]]></version>
<date><![CDATA[  26.07.2007
  ]]></date>
</classRec>
<method name='Line3D' fullname='sandy.primitive:Line3D/Line3D' isStatic='false' isFinal='false' isOverride='false'  param_names='p_sName;rest' param_types='String;restParam' param_defaults='null;undefined' result_type='*'>
<description><![CDATA[
  Creates a Line3D primitive.
    <p>A line is drawn between Point3Ds in the order they are passed. A minimum of two Point3Ds must be passed.</p>
    ]]></description>
<param><![CDATA[p_sName A string identifier for this object.
  ]]></param>
<param><![CDATA[...rest  A comma delimited list of Point3Ds.
    ]]></param>
<see><![CDATA[sandy.core.data.Point3D
  ]]></see>
</method>
<method name='generate' fullname='sandy.primitive:Line3D/generate' isStatic='false' isFinal='false' isOverride='false'  param_names='arguments' param_types='restParam' param_defaults='undefined' result_type='sandy.core.scenegraph:Geometry3D'>
<description><![CDATA[
  Generates the geometry for the line.
    ]]></description>
<return><![CDATA[The geometry object for the line.
    ]]></return>
<see><![CDATA[sandy.core.scenegraph.Geometry3D
  ]]></see>
</method>
<method name='toString' fullname='sandy.primitive:Line3D/toString' isStatic='false' isFinal='false' isOverride='true'  result_type='String'>
<description><![CDATA[
  ]]></description>
<private><![CDATA[]]></private>
</method>
<classRec name='Cylinder' fullname='sandy.primitive:Cylinder' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\primitive\Cylinder.as' namespace='sandy.primitive' access='public' baseclass='sandy.core.scenegraph:Shape3D' interfaces='sandy.primitive:Primitive3D' isFinal='false' isDynamic='false' >
<description><![CDATA[
 The Cylinder class is used for creating a cylinder primitive, a cone or a truncated cone.
  <p>All credits go to Tim Knipt from suite75.net who created the AS2 implementation.
 Original sources available at : http://www.suite75.net/svn/papervision3d/tim/as2/org/papervision3d/objects/Cylinder.as</p>
  ]]></description>
<author><![CDATA[ Xavier Martin ( ajout fonction getTop, getBottom, getTop )
 ]]></author>
<author><![CDATA[ Thomas Pfeiffer ( adaption for Sandy )
 ]]></author>
<author><![CDATA[ Tim Knipt
  ]]></author>
<example><![CDATA[To create a cylinder with a base radius of 150 and a height of 300,
 with default number of faces, use the following statement:
  <listing version="3.1">
     var cyl:Cylinder = new Cylinder( "theCylinder", 150, 300 );
  </listing>
 To create a truncated cone, you pass a top radius value to the constructor
 <listing version="3.1">
     var tCone:Cylinder = new Cylinder( "trunkCone", 150, 300, 0, 0, 40 );
  </listing>
 ]]></example>
<version><![CDATA[ 3.1
 ]]></version>
<date><![CDATA[  26.07.2007
  ]]></date>
</classRec>
<method name='CALCUL_RADIUS_FROM_SIDE' fullname='sandy.primitive:Cylinder/CALCUL_RADIUS_FROM_SIDE' isStatic='true' isFinal='false' isOverride='false'  param_names='p_nSideNumber;p_nSideWidth' param_types='uint;uint' param_defaults='undefined;undefined' result_type='Number'>
<description><![CDATA[
  Calculates the radius depending on the number of sides you want and their width.
  <p>[<strong>ToDo</strong>: Elaborate on this a bit, please :) ]</p>
    ]]></description>
<param><![CDATA[p_nSideNumber The number of sides the cylinder has
  ]]></param>
<param><![CDATA[p_nSideWidth  Width of a side
  ]]></param>
<return><![CDATA[The radius
  ]]></return>
</method>
<method name='Cylinder' fullname='sandy.primitive:Cylinder/sandy.primitive:Cylinder' isStatic='false' isFinal='false' isOverride='false'  param_names='p_sName;p_nRadius;p_nHeight;p_nSegmentsW;p_nSegmentsH;p_nTopRadius;p_bExcludeBottom;p_bExludeTop;p_bWholeMapping' param_types='String;Number;Number;Number;Number;Number;Boolean;Boolean;Boolean' param_defaults='null;100;100;8;6;unknown;false;false;true' result_type='*'>
<description><![CDATA[
  Creates a Cylinder primitive or truncated cone.
    <p>The cylinder is created at the origin of the world coordinate system, with its axis
  along the y axis, and with the bottom and top surfaces paralell to the zx plane</p>
    <p>All arguments to the constructor have default values, and are optional.
  If you pass in a top radius, that is different from the bottom radius,
  a truncated cone is created.</p>
  <p>By passing true values to one or both of p_bExcludeBottom and p_bExludeTop,
  you exclude the bottom and/or top surfaces from being created.</p>
    ]]></description>
<param><![CDATA[p_sName    A string identifier for this object.
  ]]></param>
<param><![CDATA[p_nRadius   Radius of the cylinder.
  ]]></param>
<param><![CDATA[p_nHeight   Height of the cylinder.
  ]]></param>
<param><![CDATA[p_nSegmentsW  Number of horizontal segments.
  ]]></param>
<param><![CDATA[p_nSegmentsH  Number of vertical segments.
  ]]></param>
<param><![CDATA[p_nTopRadius  An optional parameter for cone - or diverging cylinders.
  ]]></param>
<param><![CDATA[p_bExcludeBottom If set to true, the bottom face is not created.
  ]]></param>
<param><![CDATA[p_bExludeTop  If set to true, the top face is not created.
  ]]></param>
<param><![CDATA[p_bWholeMapping  Specifies how the material applied to the cylinder will
  be mapped. If set to <code>false</code>, the material will be mapped to each individual
  face, rather than to the whole cylinder.
  ]]></param>
</method>
<method name='_generateFaces' fullname='sandy.primitive:Cylinder/private:_generateFaces' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='generate' fullname='sandy.primitive:Cylinder/generate' isStatic='false' isFinal='false' isOverride='false'  param_names='arguments' param_types='restParam' param_defaults='undefined' result_type='sandy.core.scenegraph:Geometry3D'>
<description><![CDATA[
  Generates the geometry for the cylinder.
    ]]></description>
<return><![CDATA[The geometry object for the cylinder.
    ]]></return>
<see><![CDATA[sandy.core.scenegraph.Geometry3D
  ]]></see>
</method>
<method name='getBottom' fullname='sandy.primitive:Cylinder/getBottom' isStatic='false' isFinal='false' isOverride='false'  result_type='sandy.core.data:PrimitiveFace'>
<description><![CDATA[
  Returns a PrimitiveFace object ( an array of polygons ) defining the bottom face.
    ]]></description>
<return><![CDATA[The PrimitiveFace object of the bottom face.
    ]]></return>
<see><![CDATA[PrimitiveFace
  ]]></see>
</method>
<method name='getFace' fullname='sandy.primitive:Cylinder/getFace' isStatic='false' isFinal='false' isOverride='false'  param_names='p_nFace' param_types='uint' param_defaults='undefined' result_type='sandy.core.data:PrimitiveFace'>
<description><![CDATA[
  Returns a PrimitiveFace object ( an array of polygons ) defining the specified face.
    ]]></description>
<param><![CDATA[p_nFace The requested face
  ]]></param>
<return><![CDATA[The PrimitiveFace object of the specified face.
    ]]></return>
<see><![CDATA[PrimitiveFace
  ]]></see>
</method>
<method name='getTop' fullname='sandy.primitive:Cylinder/getTop' isStatic='false' isFinal='false' isOverride='false'  result_type='sandy.core.data:PrimitiveFace'>
<description><![CDATA[
  Returns a PrimitiveFace object ( an array of polygons ) defining the top face.
    ]]></description>
<return><![CDATA[The PrimitiveFace object of the top face.
    ]]></return>
<see><![CDATA[PrimitiveFace
  ]]></see>
</method>
<method name='toString' fullname='sandy.primitive:Cylinder/toString' isStatic='false' isFinal='false' isOverride='true'  result_type='String'>
<description><![CDATA[
  ]]></description>
<private><![CDATA[]]></private>
</method>
<field name='DEFAULT_HEIGHT' fullname='sandy.primitive:Cylinder/DEFAULT_HEIGHT' type='Number' isStatic='true' isConst='true' defaultValue='100' >
<description><![CDATA[
  The default height for a cylinder.
  ]]></description>
</field>
<field name='DEFAULT_RADIUS' fullname='sandy.primitive:Cylinder/DEFAULT_RADIUS' type='Number' isStatic='true' isConst='true' defaultValue='100' >
<description><![CDATA[
  The default radius for a cylinder.
  ]]></description>
</field>
<field name='DEFAULT_SCALE' fullname='sandy.primitive:Cylinder/DEFAULT_SCALE' type='Number' isStatic='true' isConst='true' defaultValue='1' >
<description><![CDATA[
  The default scale for a cylinder texture.
  ]]></description>
</field>
<field name='DEFAULT_SEGMENTSH' fullname='sandy.primitive:Cylinder/DEFAULT_SEGMENTSH' type='Number' isStatic='true' isConst='true' defaultValue='6' >
<description><![CDATA[
  The default number of vertical segments for a cylinder.
  ]]></description>
</field>
<field name='DEFAULT_SEGMENTSW' fullname='sandy.primitive:Cylinder/DEFAULT_SEGMENTSW' type='Number' isStatic='true' isConst='true' defaultValue='8' >
<description><![CDATA[
  The default number of horizontal segments for a cylinder.
  ]]></description>
</field>
<field name='MIN_SEGMENTSH' fullname='sandy.primitive:Cylinder/MIN_SEGMENTSH' type='Number' isStatic='true' isConst='true' defaultValue='2' >
<description><![CDATA[
  The minimum number of vertical segments for a cylinder.
  ]]></description>
</field>
<field name='MIN_SEGMENTSW' fullname='sandy.primitive:Cylinder/MIN_SEGMENTSW' type='Number' isStatic='true' isConst='true' defaultValue='3' >
<description><![CDATA[
  The minimum number of horizontal segments for a cylinder.
  ]]></description>
</field>
<field name='height' fullname='sandy.primitive:Cylinder/private:height' type='Number' isStatic='false' isConst='false' >
</field>
<field name='m_aFaces' fullname='sandy.primitive:Cylinder/private:m_aFaces' type='Array' isStatic='false' isConst='false' >
</field>
<field name='m_bIsBottomExcluded' fullname='sandy.primitive:Cylinder/private:m_bIsBottomExcluded' type='Boolean' isStatic='false' isConst='false' >
</field>
<field name='m_bIsTopExcluded' fullname='sandy.primitive:Cylinder/private:m_bIsTopExcluded' type='Boolean' isStatic='false' isConst='false' >
</field>
<field name='m_bIsWholeMappingEnabled' fullname='sandy.primitive:Cylinder/private:m_bIsWholeMappingEnabled' type='Boolean' isStatic='false' isConst='false' >
</field>
<field name='m_nNextPolFace' fullname='sandy.primitive:Cylinder/private:m_nNextPolFace' type='uint' isStatic='false' isConst='false' >
<description><![CDATA[
  Number of polygon to jump to come back on the same face ( side ) you were on
  as the cylinder is rendered in rows
  ]]></description>
</field>
<field name='m_nPolBase' fullname='sandy.primitive:Cylinder/private:m_nPolBase' type='uint' isStatic='false' isConst='false' >
<description><![CDATA[
  Number of polygon for the base ( so bottom and top )
  ]]></description>
</field>
<field name='radius' fullname='sandy.primitive:Cylinder/private:radius' type='Number' isStatic='false' isConst='false' >
</field>
<field name='segmentsH' fullname='sandy.primitive:Cylinder/segmentsH' type='Number' isStatic='false' isConst='false' >
<description><![CDATA[
  The number of vertical segments.
  ]]></description>
</field>
<field name='segmentsW' fullname='sandy.primitive:Cylinder/segmentsW' type='Number' isStatic='false' isConst='false' >
<description><![CDATA[
  The number of horizontal segments.
  ]]></description>
</field>
<field name='topRadius' fullname='sandy.primitive:Cylinder/private:topRadius' type='Number' isStatic='false' isConst='false' >
</field>
<classRec name='GeodesicSphere' fullname='sandy.primitive:GeodesicSphere' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\primitive\GeodesicSphere.as' namespace='sandy.primitive' access='public' baseclass='sandy.core.scenegraph:Shape3D' interfaces='sandy.primitive:Primitive3D' isFinal='false' isDynamic='false' >
<description><![CDATA[
 GeodesicSphere implements octahedron-based geodesic sphere.
  <p>Compared to regular sphere, this primitive produces geometry with more
 evenly distributed triangles (code ported from Away3D mostly as is, with
 the exception of U/V mapping).</p>
  ]]></description>
<author><![CDATA[ makc
  ]]></author>
<see><![CDATA[http://en.wikipedia.org/wiki/Geodesic_dome
 ]]></see>
<see><![CDATA[http://en.wikipedia.org/wiki/Octahedron
 ]]></see>
<version><![CDATA[ 3.1
 ]]></version>
<date><![CDATA[  10.04.2008
  ]]></date>
</classRec>
<method name='GeodesicSphere' fullname='sandy.primitive:GeodesicSphere/GeodesicSphere' isStatic='false' isFinal='false' isOverride='false'  param_names='p_sName;p_nRadius;p_nFractures' param_types='String;Number;Number' param_defaults='null;100;2' result_type='*'>
<description><![CDATA[
  Creates a GeodesicSphere primitive.
    ]]></description>
<param><![CDATA[p_sName A string identifier for this object.
  ]]></param>
<param><![CDATA[p_nRadius Sphere radius.
  ]]></param>
<param><![CDATA[p_nFractures Tesselation quality.
  ]]></param>
</method>
<method name='generate' fullname='sandy.primitive:GeodesicSphere/generate' isStatic='false' isFinal='false' isOverride='false'  param_names='arguments' param_types='restParam' param_defaults='undefined' result_type='sandy.core.scenegraph:Geometry3D'>
<description><![CDATA[
  ]]></description>
<private><![CDATA[]]></private>
</method>
<field name='fractures_in' fullname='sandy.primitive:GeodesicSphere/private:fractures_in' type='int' isStatic='false' isConst='false' >
</field>
<field name='radius_in' fullname='sandy.primitive:GeodesicSphere/private:radius_in' type='Number' isStatic='false' isConst='false' >
</field>
<classRec name='Cone' fullname='sandy.primitive:Cone' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\primitive\Cone.as' namespace='sandy.primitive' access='public' baseclass='sandy.primitive:Cylinder' interfaces='sandy.primitive:Primitive3D' isFinal='false' isDynamic='false' >
<description><![CDATA[
 The Cone class is used for creating a cone primitive.
  <p>This class is a special case of the Cylinder class, with an top radius of 0.</p>
  <p>All credits go to Tim Knipt from suite75.net who created the AS2 implementation.
 Original sources available at : http://www.suite75.net/svn/papervision3d/tim/as2/org/papervision3d/objects/Cone.as</p>
  ]]></description>
<author><![CDATA[ Thomas Pfeiffer ( adaption for Sandy )
 ]]></author>
<author><![CDATA[ Tim Knipt
  ]]></author>
<example><![CDATA[To create a cone with a base radius of 150 and a height of 300,
 with default number of segments, use the following statement:
  <listing version="3.1">
     var myCone:Cone = new Cone( "theCone", 150, 300 );
  </listing>
 ]]></example>
<version><![CDATA[ 3.1
 ]]></version>
<date><![CDATA[  26.07.2007
  ]]></date>
</classRec>
<method name='Cone' fullname='sandy.primitive:Cone/Cone' isStatic='false' isFinal='false' isOverride='false'  param_names='p_sName;p_nRadius;p_nHeight;p_nSegmentsW;p_nSegmentsH' param_types='String;Number;Number;Number;Number' param_defaults='null;100;100;8;6' result_type='*'>
<description><![CDATA[
  Creates a Cone primitive.
    <p>The cone is created at the origin of the world coordinate system with its vertical axis
  along the y axis (pointing upwards).</p>
    ]]></description>
<param><![CDATA[p_sName   A string identifier for this object.
  ]]></param>
<param><![CDATA[p_nRadius  Radius of the cone.
  ]]></param>
<param><![CDATA[p_nHeight  Height of the cone.
  ]]></param>
<param><![CDATA[p_nSegmentsW Number of horizontal segments.
  ]]></param>
<param><![CDATA[p_nSegmentsH Number of vertical segments.
  ]]></param>
</method>
<method name='toString' fullname='sandy.primitive:Cone/toString' isStatic='false' isFinal='false' isOverride='true'  result_type='String'>
<description><![CDATA[
  ]]></description>
<private><![CDATA[]]></private>
</method>
<classRec name='NumberUtil' fullname='sandy.util:NumberUtil' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\util\NumberUtil.as' namespace='sandy.util' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
  Utility class for useful numeric constants and number manipulation.
   
  ]]></description>
<author><![CDATA[ Thomas Pfeiffer - kiroukou
  ]]></author>
<version><![CDATA[ 3.1
  ]]></version>
<date><![CDATA[  26.07.2007
  ]]></date>
</classRec>
<method name='areEqual' fullname='sandy.util:NumberUtil/areEqual' isStatic='true' isFinal='false' isOverride='false'  param_names='p_nN;p_nM' param_types='Number;Number' param_defaults='undefined;undefined' result_type='Boolean'>
<description><![CDATA[
   Compares two numbers and determines if they are equal.
   
   <p>Adjust the TOL property depending on the precision of your application.</p>
      ]]></description>
<param><![CDATA[p_nN  The first number.
   ]]></param>
<param><![CDATA[p_nM  The second number.
      ]]></param>
<return><![CDATA[ Whether the numbers are regarded as equal.
   ]]></return>
</method>
<method name='constrain' fullname='sandy.util:NumberUtil/constrain' isStatic='true' isFinal='false' isOverride='false'  param_names='p_nN;p_nMin;p_nMax' param_types='Number;Number;Number' param_defaults='undefined;undefined;undefined' result_type='Number'>
<description><![CDATA[
   Constrains a number to a given interval.
   
   ]]></description>
<param><![CDATA[p_nN   The number to constrain.
   ]]></param>
<param><![CDATA[p_nMin  The minimal valid value.
   ]]></param>
<param><![CDATA[p_nMax  The maximal valid value.
      ]]></param>
<return><![CDATA[  The constrained number.
   ]]></return>
</method>
<method name='isZero' fullname='sandy.util:NumberUtil/isZero' isStatic='true' isFinal='false' isOverride='false'  param_names='p_nN' param_types='Number' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
   Determines if a number is regarded as zero.
      <p>Adjust the TOL property depending on the precision of your application.</p>
      ]]></description>
<param><![CDATA[p_nN  The number to compare to zero.
      ]]></param>
<return><![CDATA[ Whether the number is to be regarded as zero.
   ]]></return>
</method>
<method name='roundTo' fullname='sandy.util:NumberUtil/roundTo' isStatic='true' isFinal='false' isOverride='false'  param_names='p_nN;p_nRoundToInterval' param_types='Number;Number' param_defaults='undefined;0' result_type='Number'>
<description><![CDATA[
   Rounds a number to specified accuracy.
      <p>To round off the number to 2 decimals, set the the accuracy to 0.01</p>
      ]]></description>
<param><![CDATA[p_nN     The number to round.
   ]]></param>
<param><![CDATA[p_nRoundToInterval The accuracy to which to round.
      ]]></param>
<return><![CDATA[   The rounded number.
   ]]></return>
</method>
<method name='toDegree' fullname='sandy.util:NumberUtil/toDegree' isStatic='true' isFinal='false' isOverride='false'  param_names='p_nRad' param_types='Number' param_defaults='undefined' result_type='Number'>
<description><![CDATA[
   Converts an angle from radians to degrees
      ]]></description>
<param><![CDATA[p_nRad A number representing the angle in radians.
   ]]></param>
<return><![CDATA[  The angle in degrees.
   ]]></return>
</method>
<method name='toRadian' fullname='sandy.util:NumberUtil/toRadian' isStatic='true' isFinal='false' isOverride='false'  param_names='p_nDeg' param_types='Number' param_defaults='undefined' result_type='Number'>
<description><![CDATA[
   Converts an angle from degrees to radians.
   
   ]]></description>
<param><![CDATA[p_nDeg  A number representing the angle in dregrees.
   ]]></param>
<return><![CDATA[  The angle in radians.
   ]]></return>
</method>
<method name='HALF_PI' fullname='sandy.util:NumberUtil/HALF_PI/get' isStatic='true' isFinal='false' isOverride='false'  result_type='Number'>
<description><![CDATA[
   Math constant pi/2.
   ]]></description>
</method>
<method name='PI' fullname='sandy.util:NumberUtil/PI/get' isStatic='true' isFinal='false' isOverride='false'  result_type='Number'>
<description><![CDATA[
   Math constant pi.
   ]]></description>
</method>
<method name='TO_DEGREE' fullname='sandy.util:NumberUtil/TO_DEGREE/get' isStatic='true' isFinal='false' isOverride='false'  result_type='Number'>
<description><![CDATA[
   Constant used to convert angle from radians to degrees.
   ]]></description>
</method>
<method name='TO_RADIAN' fullname='sandy.util:NumberUtil/TO_RADIAN/get' isStatic='true' isFinal='false' isOverride='false'  result_type='Number'>
<description><![CDATA[
   Constant used to convert degrees to radians.
   ]]></description>
</method>
<method name='TWO_PI' fullname='sandy.util:NumberUtil/TWO_PI/get' isStatic='true' isFinal='false' isOverride='false'  result_type='Number'>
<description><![CDATA[
   Math constant pi&#42;2.
   ]]></description>
</method>
<field name='TOL' fullname='sandy.util:NumberUtil/TOL' type='Number' isStatic='true' isConst='false' defaultValue='0.00001' >
<description><![CDATA[
   Value used to compare numbers with. 
   
   <p>Basically used to say if a number is zero or not.<br />
   Adjust this number with regard to the precision of your application</p>
   ]]></description>
</field>
<field name='__HALF_PI' fullname='sandy.util:NumberUtil/private:__HALF_PI' type='Number' isStatic='true' isConst='false' defaultValue='unknown' >
</field>
<field name='__PI' fullname='sandy.util:NumberUtil/private:__PI' type='Number' isStatic='true' isConst='false' defaultValue='3.141592653589793' >
</field>
<field name='__TO_DREGREE' fullname='sandy.util:NumberUtil/private:__TO_DREGREE' type='Number' isStatic='true' isConst='false' defaultValue='unknown' >
</field>
<field name='__TO_RADIAN' fullname='sandy.util:NumberUtil/private:__TO_RADIAN' type='Number' isStatic='true' isConst='false' defaultValue='unknown' >
</field>
<field name='__TWO_PI' fullname='sandy.util:NumberUtil/private:__TWO_PI' type='Number' isStatic='true' isConst='false' defaultValue='unknown' >
</field>
<field name='_fABS' fullname='sandy.util:NumberUtil/private:_fABS' type='Function' isStatic='true' isConst='false' defaultValue='' >
</field>
<classRec name='BezierUtil' fullname='sandy.util:BezierUtil' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\util\BezierUtil.as' namespace='sandy.util' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
  Utility class for Bézier calculations.
  
  <p>All credits go to Alex Ulhmann and his Animation Package Library.</p>
    ]]></description>
<author><![CDATA[ Thomas Pfeiffer - kiroukou
  ]]></author>
<since><![CDATA[ 1.0
  ]]></since>
<version><![CDATA[ 3.1
  ]]></version>
<date><![CDATA[  26.07.2007
  ]]></date>
</classRec>
<method name='casteljau' fullname='sandy.util:BezierUtil/casteljau' isStatic='true' isFinal='false' isOverride='false'  param_names='p;plist' param_types='Number;Array' param_defaults='undefined;undefined' result_type='sandy.core.data:Point3D'>
<description><![CDATA[
   Applies the de Casteljau's algorithm.
      <p>[<strong>ToDo</strong>: Better explanations ]</p>
      ]]></description>
<param><![CDATA[p  A fraction between [0-1] of the whole curve.
   ]]></param>
<param><![CDATA[plist The list of control points of the Bézier curve.
      ]]></param>
<return><![CDATA[The position on the Bézier curve at the fraction p of the curve.
      ]]></return>
<see><![CDATA[http://en.wikipedia.org/wiki/De_Casteljau&#039;s_algorithm
   ]]></see>
</method>
<method name='casteljau_interval' fullname='sandy.util:BezierUtil/casteljau_interval' isStatic='true' isFinal='false' isOverride='false'  param_names='p;plist;pdeb;pfin' param_types='Number;Array;Number;Number' param_defaults='undefined;undefined;undefined;undefined' result_type='sandy.core.data:Point3D'>
<description><![CDATA[
   Applies a more robust de Casteljau's algorithm if the intervals are "weird".
   
   <p>UNTESTED METHOD. MAY BE REMOVED IN THE FUTURE VERSION. USE IT CAREFULLY.</p>
   <p>[<strong>ToDo</strong>: Better explanations ]</p>
      ]]></description>
<param><![CDATA[p  A fraction between [0-1] of the whole curve.
   ]]></param>
<param><![CDATA[plist The list of control points of the Bézier curve.
   ]]></param>
<param><![CDATA[pdeb
   ]]></param>
<param><![CDATA[pfin
      ]]></param>
<return><![CDATA[The position on the Bézier curve at the fraction p of the curve.
      ]]></return>
<see><![CDATA[http://en.wikipedia.org/wiki/De_Casteljau&#039;s_algorithm
   ]]></see>
</method>
<method name='getCubicControlPoints' fullname='sandy.util:BezierUtil/getCubicControlPoints' isStatic='true' isFinal='false' isOverride='false'  param_names='start;through1;through2;end' param_types='sandy.core.data:Point3D;sandy.core.data:Point3D;sandy.core.data:Point3D;sandy.core.data:Point3D' param_defaults='undefined;undefined;undefined;undefined' result_type='Array'>
<description><![CDATA[
   Returns the control points for a qubic Bézier curve.
   
   <p>If anybody finds a generic method to compute control points 
   for bezier curves with n control points, if only the points on the curve are given, 
   please let us know!</p>
   
   ]]></description>
<param><![CDATA[start  The start point of the curve.
   ]]></param>
<param><![CDATA[through1  The second point.
   ]]></param>
<param><![CDATA[through2  The third point.
   ]]></param>
<param><![CDATA[end   The end point.
      ]]></param>
<return><![CDATA[  A two dimensional array containing the two controls points.
   ]]></return>
</method>
<method name='getPointsOnCubicCurve' fullname='sandy.util:BezierUtil/getPointsOnCubicCurve' isStatic='true' isFinal='false' isOverride='false'  param_names='p;p1;p2;p3;p4' param_types='Number;sandy.core.data:Point3D;sandy.core.data:Point3D;sandy.core.data:Point3D;sandy.core.data:Point3D' param_defaults='undefined;undefined;undefined;undefined;undefined' result_type='sandy.core.data:Point3D'>
<description><![CDATA[
   Returns a point on a qubic Bézier curve.
   
   <p>Adapted from Paul Bourke.</p>
   
   ]]></description>
<param><![CDATA[p  A fraction between [0-1] of the whole curve.
   ]]></param>
<param><![CDATA[p1  First point.
   ]]></param>
<param><![CDATA[p2  Second point.
   ]]></param>
<param><![CDATA[p3  Third point.
   ]]></param>
<param><![CDATA[p4  Fourth point.
      ]]></param>
<return><![CDATA[ The resulting position Point3D.
   ]]></return>
</method>
<method name='getPointsOnQuadCurve' fullname='sandy.util:BezierUtil/getPointsOnQuadCurve' isStatic='true' isFinal='false' isOverride='false'  param_names='p;p1;p2;p3' param_types='Number;sandy.core.data:Point3D;sandy.core.data:Point3D;sandy.core.data:Point3D' param_defaults='undefined;undefined;undefined;undefined' result_type='sandy.core.data:Point3D'>
<description><![CDATA[
   Returns a point on a quadratic Bézier curve.
   
   <p>Adapted from Robert Penner with Robert Penner's optimization of the standard equation.</p>
   
   ]]></description>
<param><![CDATA[p  A fraction between [0-1] of the whole curve.
   ]]></param>
<param><![CDATA[p1  First point.
   ]]></param>
<param><![CDATA[p2  Second point.
   ]]></param>
<param><![CDATA[p3  Third point.
      ]]></param>
<return><![CDATA[ The resulting position Point3D.
   ]]></return>
</method>
<method name='getQuadControlPoints' fullname='sandy.util:BezierUtil/getQuadControlPoints' isStatic='true' isFinal='false' isOverride='false'  param_names='start;middle;end' param_types='sandy.core.data:Point3D;sandy.core.data:Point3D;sandy.core.data:Point3D' param_defaults='undefined;undefined;undefined' result_type='sandy.core.data:Point3D'>
<description><![CDATA[
   Returns the control point for a quadratic Bézier curve.
      <p>Adapted from Robert Penner's drawCurve3Pts() method.</p>
      ]]></description>
<param><![CDATA[start  The start point of the curve.
   ]]></param>
<param><![CDATA[middle The middle point.
   ]]></param>
<param><![CDATA[end   The end point.
      ]]></param>
<return><![CDATA[ The control point.
   ]]></return>
</method>
<classRec name='StringUtil' fullname='sandy.util:StringUtil' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\util\StringUtil.as' namespace='sandy.util' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
  Utility class for string manipulation.
   
  ]]></description>
<author><![CDATA[ Thomas Pfeiffer - kiroukou
  ]]></author>
<version><![CDATA[ 3.1
  ]]></version>
<date><![CDATA[  13.08.2008
  ]]></date>
</classRec>
<method name='clear' fullname='sandy.util:StringUtil/clear' isStatic='true' isFinal='false' isOverride='false'  param_names='p_sStr;p_aExpand' param_types='String;Array' param_defaults='undefined;undefined' result_type='String'>
<description><![CDATA[
   Strips &quot;\r&quot; and &quot;\n&quot; characters from a string and removes consecutive spaces.
      ]]></description>
<param><![CDATA[p_sStr The string to modify.
   ]]></param>
<param><![CDATA[p_aExpand Other strings you want to clear out.
      ]]></param>
<return><![CDATA[  The modified string.
   ]]></return>
</method>
<method name='clearRepeat' fullname='sandy.util:StringUtil/clearRepeat' isStatic='true' isFinal='false' isOverride='false'  param_names='p_sStr;p_sRepeat;p_sReplace' param_types='String;String;String' param_defaults='undefined;undefined;' result_type='String'>
<description><![CDATA[
   Clears the source string from multiple occurences of a pattern.
      <p>Ex: If you want to clear "ababab", you can use "ab" as a pattern.</p> 
      ]]></description>
<param><![CDATA[p_sRepeat  The pattern to clear out.
   ]]></param>
<param><![CDATA[p_sReplace Replace chars, default is a space.
      ]]></param>
<return><![CDATA[  The modified string.
   ]]></return>
</method>
<method name='findBlockIndex' fullname='sandy.util:StringUtil/findBlockIndex' isStatic='true' isFinal='false' isOverride='false'  param_names='p_sStr;p_sStart;p_sEnd' param_types='String;String;String' param_defaults='undefined;undefined;undefined' result_type='Array'>
<description><![CDATA[
   Returns pairs of start and end indices of a block in a source string.
      <p>The target string is searched for blocks of text between a start and and an end delimiter string.<br/>
   The start and end indices into the searched string, for each found block is stored in a two dimensional array.<br />
   All inices are returned as an array of index pairs.</p>
      <p>array struct:</p>
   <p>array[0] = [Block_Start_String_Length, Block_End_String_Length]</p>
   <p>array[1] = [Start_Index_1, End_Index_1]</p>
   <p>array[x] = [Start_Index_x, End_Index_x]</p>
      ]]></description>
<param><![CDATA[p_sStr  The string to search.
   ]]></param>
<param><![CDATA[p_sStart  Block start with.
   ]]></param>
<param><![CDATA[p_sEnd  Block end with.
      ]]></param>
<return><![CDATA[ An array containtng all the start and end indices.
   ]]></return>
</method>
<method name='getBlockByIndex' fullname='sandy.util:StringUtil/getBlockByIndex' isStatic='true' isFinal='false' isOverride='false'  param_names='p_sStr;p_aPairs;p_nIndex;p_bNoSymbol' param_types='String;Array;Number;Boolean' param_defaults='undefined;undefined;undefined;undefined' result_type='String'>
<description><![CDATA[
   Returns a specific sub string of the source string.
      ]]></description>
<param><![CDATA[p_sStr  The string to search.
   ]]></param>
<param><![CDATA[p_aPairs  Index pairs created by findBlockIndex.
   ]]></param>
<param><![CDATA[p_nIndex  Start index into the string of the block to search for.
   ]]></param>
<param><![CDATA[p_bNoSymbol Do not include start and end symbols.
      ]]></param>
<return><![CDATA[ The searched sub string or an empty string if not found.
   ]]></return>
</method>
<method name='getBlockRange' fullname='sandy.util:StringUtil/getBlockRange' isStatic='true' isFinal='false' isOverride='false'  param_names='p_aPairs;p_nIndex' param_types='Array;Number' param_defaults='undefined;undefined' result_type='Array'>
<description><![CDATA[
   Returns the start and end indices for a substring, analyzed by findBlockIndex.
   
   ]]></description>
<param><![CDATA[p_aPairs Index pairs created by findBlockIndex.
   ]]></param>
<param><![CDATA[p_nIndex Start index into the string of the block of interest.
      ]]></param>
<return><![CDATA[ The pair of start and end indices, [-1, -1] if not found.
   ]]></return>
</method>
<method name='getBlocks' fullname='sandy.util:StringUtil/getBlocks' isStatic='true' isFinal='false' isOverride='false'  param_names='p_sStr;p_aPairs;p_bWithSymbol' param_types='String;Array;Boolean' param_defaults='undefined;undefined;undefined' result_type='Array'>
<description><![CDATA[
   Returns all blocks between start and end indices from a source string.
      <p>Given an array of index pairs, normally created by a call to findBlockIndex,
   all blocks between index pairs are extracted and stored in an array</p>
      ]]></description>
<param><![CDATA[p_sStr  The string to search.
   ]]></param>
<param><![CDATA[p_aPairs  Index pairs created by findBlockIndex.
   ]]></param>
<param><![CDATA[p_bWithSymbol Include start and end symbols if set to true.
      ]]></param>
<return><![CDATA[  All blocks between the start and end indices.
   ]]></return>
</method>
<method name='getTextBetween' fullname='sandy.util:StringUtil/getTextBetween' isStatic='true' isFinal='false' isOverride='false'  param_names='p_sStr;p_sStart;p_sEnd' param_types='String;String;String' param_defaults='undefined;undefined;undefined' result_type='Array'>
<description><![CDATA[
   Returns all sub strings in a string between two given delimiter patterns.
   
   <p>The delimiters are not included in the results.</p>
      ]]></description>
<param><![CDATA[p_sStr The string to search.
   ]]></param>
<param><![CDATA[p_sStart The start delimiter.
   ]]></param>
<param><![CDATA[p_sEnd The end delimiter.
      ]]></param>
<return><![CDATA[  An array of found sub strings. Empty if no matching patterns were found.
   ]]></return>
</method>
<method name='indexTimes' fullname='sandy.util:StringUtil/indexTimes' isStatic='true' isFinal='false' isOverride='false'  param_names='p_sStr;p_sSubstr;p_nOccur;p_nStart' param_types='String;String;Number;Number' param_defaults='undefined;undefined;undefined;undefined' result_type='Number'>
<description><![CDATA[
   Returns the index of the Nth occurance of sub string.
      ]]></description>
<param><![CDATA[p_sStr The string to search.
   ]]></param>
<param><![CDATA[p_sSubstr Sub string you want find.
   ]]></param>
<param><![CDATA[p_nOccur The occurance of the sub string to find.
   ]]></param>
<param><![CDATA[p_nStart Start index for the search.
      ]]></param>
<return><![CDATA[ Start index of the search sub string.
   ]]></return>
</method>
<method name='replace' fullname='sandy.util:StringUtil/replace' isStatic='true' isFinal='false' isOverride='false'  param_names='p_sStr;p_sOld;p_sNew' param_types='String;String;String' param_defaults='undefined;undefined;undefined' result_type='String'>
<description><![CDATA[
   Replaces a sub string with another in the target string.
      ]]></description>
<param><![CDATA[p_sStr  The string to modify.
   ]]></param>
<param><![CDATA[p_sOld  The pattern to replace.
   ]]></param>
<param><![CDATA[p_sNew  What to replace the pattern with.
      ]]></param>
<return><![CDATA[  The modified string.
   ]]></return>
</method>
<classRec name='VertexWelder' fullname='sandy.util:VertexWelder' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\util\VertexWelder.as' namespace='sandy.util' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
  The VertexWelder class is a static class that is able to weld duplicate
  vertices in a geometry.
    <p>It can faithfully transfer all UV data in a non-destructive manner,
  and automatically smooth all vertex normal data by averaging
  all the normals of duplicate vertices in the geometry.</p>
    ]]></description>
<author><![CDATA[Gregorius Soedharmo
  ]]></author>
<see><![CDATA[sandy.core.scenegraph.Geometry3D
  ]]></see>
<see><![CDATA[sandy.core.data.UVCoord
  ]]></see>
<see><![CDATA[sandy.core.data.Vertex
    ]]></see>
<version><![CDATA[3.1.1
  ]]></version>
<date><![CDATA[11.15.2009
  ]]></date>
</classRec>
<method name='VertexWelder' fullname='sandy.util:VertexWelder/VertexWelder' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
      Throw an error if the user tried to instantiate the class.
      ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='weld' fullname='sandy.util:VertexWelder/weld' isStatic='true' isFinal='false' isOverride='false'  param_names='p_oGeom;p_iPrecision' param_types='sandy.core.scenegraph:Geometry3D;int' param_defaults='undefined;2' result_type='sandy.core.scenegraph:Geometry3D'>
<description><![CDATA[
   Create a clone of a geometry, deletes all redundant data, and welds
   all duplicate vertex found in the former geometry.
      ]]></description>
<example><![CDATA[<listing version="3.0">
   VertexWelder( myShape3D.geometry, 4); // This will weld myShape3D geometry with 0.0001 welding threshold.
   </listing>
   ]]></example>
<param><![CDATA[p_oGeom The geometry input to be processed
   ]]></param>
<param><![CDATA[p_iPrecision The precision threshold of vertex welding.
   ]]></param>
<return><![CDATA[The welded geometry clone of <code>p_oGeom</code>
      ]]></return>
</method>
<field name='geometry' fullname='sandy.util:VertexWelder/geometry' type='sandy.core.scenegraph:Geometry3D' isStatic='true' isConst='false' defaultValue='null' >
<description><![CDATA[
    Cached result of the previous call to <code>weld</code>.
    ]]></description>
<default><![CDATA[null
    ]]></default>
</field>
<classRec name='BitmapUtil' fullname='sandy.util:BitmapUtil' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\util\BitmapUtil.as' namespace='sandy.util' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
  Utility class for Bitmap calculations.
    ]]></description>
<author><![CDATA[ Thomas Pfeiffer - kiroukou
  ]]></author>
<version><![CDATA[ 3.1
  ]]></version>
<date><![CDATA[  26.07.2007
  ]]></date>
</classRec>
<method name='burnShapeTexture' fullname='sandy.util:BitmapUtil/burnShapeTexture' isStatic='true' isFinal='false' isOverride='false'  param_names='obj;scene;srcTexture;dstTexture;ambient;diffuse;specular;gloss' param_types='sandy.core.scenegraph:Shape3D;sandy.core:Scene3D;flash.display:BitmapData;flash.display:BitmapData;Number;Number;Number;Number' param_defaults='undefined;undefined;undefined;undefined;0.3;1.0;0.0;5.0' result_type='void'>
<description><![CDATA[
   Computes shape texture map pre-lit with Phong directional light source. Shape must be made of triangles.
      ]]></description>
<example><![CDATA[The following CS3 code does sphere per-pixel lighting: <listing version="3.1" >
import sandy.core.Scene3D;
import sandy.core.scenegraph.
import sandy.primitive.
import sandy.materials.
import sandy.util.

var tex:BitmapData = new Texture (0, 0); // tex.fillRect (tex.rect, 0xFFFFFF00);

// code from "simplest sandy tutorial"
var scene:Scene3D = new Scene3D( "myScene", this, new Camera3D( 550, 400 ), new Group("root") );
var sphere:Sphere = new Sphere("mySphere");
var mat:BitmapMaterial = new BitmapMaterial( tex.clone () ); mat.smooth = true;
sphere.appearance = new Appearance( mat );
scene.root.addChild( sphere );
scene.render();

// apply lighting
function click (e: {
 scene.light.setDirection(stage.stageWidth / 2 - stage.mouseX, stage.mouseY - stage.stageHeight / 2, 100);
 BitmapUtil.burnShapeTexture (sphere, scene, tex, mat.texture, 0.3, 1.0, 2, 15.0);
}

stage.addEventListener ("click", click);
</listing>
   ]]></example>
<param><![CDATA[obj Shape for texture to be applied to.
   ]]></param>
<param><![CDATA[light Scene you are going to render shape in.
   ]]></param>
<param><![CDATA[srcTexture Source texture.
   ]]></param>
<param><![CDATA[dstTexture Destination texture.
   ]]></param>
<param><![CDATA[ambient Ambient reflection factor.
   ]]></param>
<param><![CDATA[diffuse Diffuse reflection factor.
   ]]></param>
<param><![CDATA[specular Specular reflection factor.
   ]]></param>
<param><![CDATA[gloss Specular exponent.
      ]]></param>
<return><![CDATA[  Pre-lit texture map.
   ]]></return>
</method>
<method name='concatBitmapMatrix' fullname='sandy.util:BitmapUtil/concatBitmapMatrix' isStatic='true' isFinal='false' isOverride='false'  param_names='p_oM1;p_oM2' param_types='Object;Object' param_defaults='undefined;undefined' result_type='Object'>
<description><![CDATA[
   Returns a concatenation of two bitmap matrices.
      <p>[<strong>ToDo</strong>: Explain what matrices are handled here ]</p>
      ]]></description>
<param><![CDATA[p_oM1 The matrix of the first bitmap.
   ]]></param>
<param><![CDATA[p_oM2 The matrix of the second bitmap.
      ]]></param>
<return><![CDATA[ The resulting matrix.
   ]]></return>
</method>
<method name='getScaledBitmap' fullname='sandy.util:BitmapUtil/getScaledBitmap' isStatic='true' isFinal='false' isOverride='false'  param_names='p_oBitmap;p_nScalex;p_nScaley' param_types='flash.display:BitmapData;Number;Number' param_defaults='undefined;undefined;0' result_type='flash.display:BitmapData'>
<description><![CDATA[
   Returns a scaled version of a bitmap.
      <p>The method takes a bitmap as input, and returns a scaled copy.<br/>
   The original is not changed.</p>
      ]]></description>
<param><![CDATA[p_oBitmap The bitmap to scale.
   ]]></param>
<param><![CDATA[p_nScalex The x-scale.
   ]]></param>
<param><![CDATA[p_nScaley The y-scale.
      ]]></param>
<return><![CDATA[  The scaled bitmap data.
   ]]></return>
</method>
<method name='movieToBitmap' fullname='sandy.util:BitmapUtil/movieToBitmap' isStatic='true' isFinal='false' isOverride='false'  param_names='p_oSprite;p_bTransparent;p_nColor' param_types='flash.display:DisplayObject;Boolean;Number' param_defaults='undefined;true;0x00FF00CC' result_type='flash.display:BitmapData'>
<description><![CDATA[
   Converts a sprite to a bitmap respecting the sprite position.
      <p>The simple BitmapData.draw method doesn't take care of the negative part of the sprite during the draw.<br />
   This method does.</p>
      ]]></description>
<param><![CDATA[p_oSprite   The sprite or other DisplayObject to convert to BitmapData. (DisplayObject allows support for AVM1Movie)
   ]]></param>
<param><![CDATA[p_bTransparent Whether to allow transparency.
   ]]></param>
<param><![CDATA[p_nColor   Background color (32 bit).
      ]]></param>
<return><![CDATA[   The converted bitmap.
   ]]></return>
</method>
<method name='ripShapeTexture' fullname='sandy.util:BitmapUtil/ripShapeTexture' isStatic='true' isFinal='false' isOverride='false'  param_names='obj;size' param_types='sandy.core.scenegraph:Shape3D;Number' param_defaults='undefined;256' result_type='flash.display:Sprite'>
<description><![CDATA[
   Creates shape texture map template. This is useful for 3rd party models texturing :)
      ]]></description>
<param><![CDATA[obj Shape to rip texture template from.
   ]]></param>
<param><![CDATA[size Template size (will be size x size pixels).
      ]]></param>
<return><![CDATA[  Sprite with texture map template drawn in.
   ]]></return>
</method>
<classRec name='LoaderQueue' fullname='sandy.util:LoaderQueue' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\util\LoaderQueue.as' namespace='sandy.util' access='public' baseclass='flash.events:EventDispatcher' isFinal='false' isDynamic='false' >
<description><![CDATA[
  Utility class for loading resources.
    <p>A LoaderQueue allows you to queue up requests for loading external resources.</p>
  
  ]]></description>
<author><![CDATA[ Thomas Pfeiffer - kiroukou /Max Pellizzaro 
  ]]></author>
<version><![CDATA[ 3.1
  ]]></version>
<date><![CDATA[  07.16.2008
  ]]></date>
<metadata>
	<Event owner='sandy.util:LoaderQueue' name='queueLoaderError' type='sandy.events.QueueEvent' >
<description><![CDATA[
 Dispatched when an error is encountered while loading a resource.
  ]]></description>
<eventType><![CDATA[sandy.events.QueueEvent.QUEUE_LOADER_ERROR
 ]]></eventType>
	</Event>
</metadata>
<metadata>
	<Event owner='sandy.util:LoaderQueue' name='queueResourceLoaded' type='sandy.events.QueueEvent' >
<description><![CDATA[
 Dispatched when a resource has been loaded.
  ]]></description>
<eventType><![CDATA[sandy.events.QueueEvent.QUEUE_RESOURCE_LOADED
 ]]></eventType>
	</Event>
</metadata>
<metadata>
	<Event owner='sandy.util:LoaderQueue' name='queueComplete' type='sandy.events.QueueEvent' >
<description><![CDATA[
 Dispatched when all resources have been loaded.
  ]]></description>
<eventType><![CDATA[sandy.events.QueueEvent.QUEUE_COMPLETE
 ]]></eventType>
	</Event>
</metadata>
</classRec>
<method name='LoaderQueue' fullname='sandy.util:LoaderQueue/LoaderQueue' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
   Creates a new loader queue.
   ]]></description>
</method>
<method name='add' fullname='sandy.util:LoaderQueue/add' isStatic='false' isFinal='false' isOverride='false'  param_names='p_sID;p_oURLRequest;type' param_types='String;flash.net:URLRequest;String' param_defaults='undefined;undefined;IMG' result_type='void'>
<description><![CDATA[
   Adds a new request to this loader queue.
      <p>The request is given its own loader and is added to a loader queue<br/>
   The loading is postponed until the start method of the queue is called.</p>
   
   ]]></description>
<param><![CDATA[p_sID  A string identifier for this request
   ]]></param>
<param><![CDATA[p_oURLRequest The request
   ]]></param>
</method>
<method name='completeHandler' fullname='sandy.util:LoaderQueue/private:completeHandler' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oEvent' param_types='flash.events:Event' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   Fires a QUEUE_RESOURCE_LOADED, for each resources that is loaded.
   Fires a single QUEUE_COMPLETE, after the last resources is loaded.
   Type QUEUE_COMPLETE
   ]]></description>
</method>
<method name='getBytesLoaded' fullname='sandy.util:LoaderQueue/getBytesLoaded' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
</method>
<method name='getBytesTotal' fullname='sandy.util:LoaderQueue/getBytesTotal' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
</method>
<method name='getIDFromLoader' fullname='sandy.util:LoaderQueue/private:getIDFromLoader' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oLoader' param_types='flash.display:Loader' param_defaults='undefined' result_type='String'>
</method>
<method name='getIDFromURLLoader' fullname='sandy.util:LoaderQueue/private:getIDFromURLLoader' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oLoader' param_types='flash.net:URLLoader' param_defaults='undefined' result_type='String'>
</method>
<method name='ioErrorHandler' fullname='sandy.util:LoaderQueue/private:ioErrorHandler' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oEvent' param_types='flash.events:IOErrorEvent' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   Fires an error event if any of the loaders didn't succeed
      ]]></description>
</method>
<method name='start' fullname='sandy.util:LoaderQueue/start' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
   Starts the loading of all resources in the queue.
      <p>All loaders in the queue are started and IOErrorEvent and the COMPLETE event are subscribed too.</p>
   ]]></description>
</method>
<field name='BIN' fullname='sandy.util:LoaderQueue/BIN' type='String' isStatic='true' isConst='true' defaultValue='BIN' >
<description><![CDATA[
  Specifies the Binary type of object to load
  ]]></description>
</field>
<field name='IMG' fullname='sandy.util:LoaderQueue/IMG' type='String' isStatic='true' isConst='true' defaultValue='IMG' >
<description><![CDATA[
  Specifies the Image type of object to load
  ]]></description>
</field>
<field name='SWF' fullname='sandy.util:LoaderQueue/SWF' type='String' isStatic='true' isConst='true' defaultValue='SWF' >
<description><![CDATA[
  Specifies the SWF type of object to load
  ]]></description>
</field>
<field name='clips' fullname='sandy.util:LoaderQueue/clips' type='flash.utils:Dictionary' isStatic='false' isConst='false' defaultValue='' >
</field>
<field name='data' fullname='sandy.util:LoaderQueue/data' type='flash.utils:Dictionary' isStatic='false' isConst='false' defaultValue='' >
<description><![CDATA[
   A list of all resources indexed by their names.
   ]]></description>
</field>
<field name='m_nLoaders' fullname='sandy.util:LoaderQueue/private:m_nLoaders' type='int' isStatic='false' isConst='false' >
</field>
<field name='m_oLoaders' fullname='sandy.util:LoaderQueue/private:m_oLoaders' type='Object' isStatic='false' isConst='false' >
</field>
<field name='m_oQueueCompleteEvent' fullname='sandy.util:LoaderQueue/private:m_oQueueCompleteEvent' type='sandy.events:QueueEvent' isStatic='false' isConst='false' >
</field>
<field name='m_oQueueLoaderError' fullname='sandy.util:LoaderQueue/private:m_oQueueLoaderError' type='sandy.events:QueueEvent' isStatic='false' isConst='false' >
</field>
<field name='m_oQueueResourceLoadedEvent' fullname='sandy.util:LoaderQueue/private:m_oQueueResourceLoadedEvent' type='sandy.events:QueueEvent' isStatic='false' isConst='false' >
</field>
<classRec name='FastMath' fullname='sandy.math:FastMath' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\math\FastMath.as' namespace='sandy.math' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
  Fast trigonometry functions using cache table and precalculated data. 
  Based on Michael Kraus implementation.
 
  ]]></description>
<author><![CDATA[Mirek Mencel // miras]]></author>
<polychrome.pl><![CDATA[  ]]></polychrome.pl>
<date><![CDATA[01.02.2007
 ]]></date>
</classRec>
<method name='cos' fullname='sandy.math:FastMath/cos' isStatic='true' isFinal='false' isOverride='false'  param_names='radians' param_types='Number' param_defaults='undefined' result_type='Number'>
<description><![CDATA[
   Returns the cosine of a given value, by looking up it's approximation in a
   precomputed table.
      ]]></description>
<param><![CDATA[radians The value to cosine.
      ]]></param>
<return><![CDATA[The approximation of the value's cosine.
   ]]></return>
</method>
<method name='initialize' fullname='sandy.math:FastMath/private:initialize' isStatic='true' isFinal='false' isOverride='false'  result_type='Boolean'>
</method>
<method name='radToIndex' fullname='sandy.math:FastMath/private:radToIndex' isStatic='true' isFinal='false' isOverride='false'  param_names='radians' param_types='Number' param_defaults='undefined' result_type='int'>
</method>
<method name='sin' fullname='sandy.math:FastMath/sin' isStatic='true' isFinal='false' isOverride='false'  param_names='radians' param_types='Number' param_defaults='undefined' result_type='Number'>
<description><![CDATA[
   Returns the sine of a given value, by looking up it's approximation in a
   precomputed table.
      ]]></description>
<param><![CDATA[radians The value to sine.
      ]]></param>
<return><![CDATA[The approximation of the value's sine.
   ]]></return>
</method>
<method name='tan' fullname='sandy.math:FastMath/tan' isStatic='true' isFinal='false' isOverride='false'  param_names='radians' param_types='Number' param_defaults='undefined' result_type='Number'>
<description><![CDATA[
   Returns the tangent of a given value, by looking up it's approximation in a
   precomputed table.
      ]]></description>
<param><![CDATA[radians The value to tan.
      ]]></param>
<return><![CDATA[The approximation of the value's tangent.
   ]]></return>
</method>
<field name='HALF_PI' fullname='sandy.math:FastMath/HALF_PI' type='Number' isStatic='true' isConst='true' defaultValue='unknown' >
<description><![CDATA[
   Math constant pi/2.
   ]]></description>
</field>
<field name='PRECISION' fullname='sandy.math:FastMath/PRECISION' type='int' isStatic='true' isConst='true' defaultValue='0x020000' >
<description><![CDATA[
  The precision of the lookup table.
  <p>The bigger this number, the more entries there are in the lookup table, which gives more accurate results.</p>
  ]]></description>
</field>
<field name='PRECISION_DIV_2PI' fullname='sandy.math:FastMath/PRECISION_DIV_2PI' type='Number' isStatic='true' isConst='true' defaultValue='unknown' >
<description><![CDATA[
   <code>PRECISION</code> / <code>TWO_PI</code>.
   ]]></description>
</field>
<field name='PRECISION_S' fullname='sandy.math:FastMath/PRECISION_S' type='int' isStatic='true' isConst='true' defaultValue='131071' >
<description><![CDATA[
   <code>PRECISION</code> - 1.
   ]]></description>
</field>
<field name='RAD_SLICE' fullname='sandy.math:FastMath/private:RAD_SLICE' type='Number' isStatic='true' isConst='false' defaultValue='unknown' >
</field>
<field name='TWO_PI' fullname='sandy.math:FastMath/TWO_PI' type='Number' isStatic='true' isConst='true' defaultValue='unknown' >
<description><![CDATA[
   Math constant pi&#42;2.
   ]]></description>
</field>
<field name='initialized' fullname='sandy.math:FastMath/initialized' type='Boolean' isStatic='true' isConst='true' defaultValue='' >
<description><![CDATA[
   Whether this class has been initialized.
   ]]></description>
</field>
<field name='sinTable' fullname='sandy.math:FastMath/private:sinTable' type='Array' isStatic='true' isConst='false' defaultValue='' >
</field>
<field name='tanTable' fullname='sandy.math:FastMath/private:tanTable' type='Array' isStatic='true' isConst='false' defaultValue='' >
</field>
<classRec name='PlaneMath' fullname='sandy.math:PlaneMath' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\math\PlaneMath.as' namespace='sandy.math' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
  Math functions for planes.
   
  ]]></description>
<author><![CDATA[ Thomas Pfeiffer - kiroukou
  ]]></author>
<since><![CDATA[ 0.3
  ]]></since>
<version><![CDATA[ 3.1
  ]]></version>
<date><![CDATA[  26.07.2007
  ]]></date>
</classRec>
<method name='classifyPoint' fullname='sandy.math:PlaneMath/classifyPoint' isStatic='true' isFinal='false' isOverride='false'  param_names='p_oPlane;p_oPoint3D' param_types='sandy.core.data:Plane;sandy.core.data:Point3D' param_defaults='undefined;undefined' result_type='Number'>
<description><![CDATA[
   Returns a classification constant depending on a Point3D's position relative to a plane.
   
   <p>The classification is one of PlaneMath.NEGATIVE, PlaneMath.POSITIVE, and PlaneMath.ON_PLANE.</p>
      ]]></description>
<param><![CDATA[p_oPlane The reference plane.
   ]]></param>
<param><![CDATA[p_oPoint3D The Point3D we want to classify.
      ]]></param>
<return><![CDATA[The classification of the Point3D.
   ]]></return>
</method>
<method name='computePlaneFromPoints' fullname='sandy.math:PlaneMath/computePlaneFromPoints' isStatic='true' isFinal='false' isOverride='false'  param_names='p_oPoint3DA;p_oPoint3DB;p_oPoint3DC' param_types='sandy.core.data:Point3D;sandy.core.data:Point3D;sandy.core.data:Point3D' param_defaults='undefined;undefined;undefined' result_type='sandy.core.data:Plane'>
<description><![CDATA[
   Computes a plane from three Point3Ds.
      ]]></description>
<param><![CDATA[p_oPoint3DA The first Point3D.
   ]]></param>
<param><![CDATA[p_oPoint3DB The second Point3D.
   ]]></param>
<param><![CDATA[p_oPoint3DC The third Point3D.
      ]]></param>
<return><![CDATA[ The computed plane.
   ]]></return>
</method>
<method name='createFromNormalAndPoint' fullname='sandy.math:PlaneMath/createFromNormalAndPoint' isStatic='true' isFinal='false' isOverride='false'  param_names='p_oNormal;p_oPoint' param_types='sandy.core.data:Point3D;sandy.core.data:Point3D' param_defaults='undefined;undefined' result_type='sandy.core.data:Plane'>
<description><![CDATA[
   Computes a plane from a normal Point3D and a specified point.
      ]]></description>
<param><![CDATA[p_oNormal The normal Point3D.
   ]]></param>
<param><![CDATA[p_oPoint The point.
      ]]></param>
<return><![CDATA[ The computed plane.
   ]]></return>
</method>
<method name='distanceToPoint' fullname='sandy.math:PlaneMath/distanceToPoint' isStatic='true' isFinal='false' isOverride='false'  param_names='p_oPlane;p_oPoint3D' param_types='sandy.core.data:Plane;sandy.core.data:Point3D' param_defaults='undefined;undefined' result_type='Number'>
<description><![CDATA[
   Computes the distance between a plane and a Point3D.
      ]]></description>
<param><![CDATA[p_oPlane The plane.
   ]]></param>
<param><![CDATA[p_oPoint3D The Point3D.
      ]]></param>
<return><![CDATA[ The distance between the Point3D and the plane.
   ]]></return>
</method>
<method name='normalizePlane' fullname='sandy.math:PlaneMath/normalizePlane' isStatic='true' isFinal='false' isOverride='false'  param_names='p_oPlane' param_types='sandy.core.data:Plane' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   Normalizes the plane. 
   
   <p>Often before making some calculations with a plane you have to normalize it.</p>
      ]]></description>
<param><![CDATA[p_oPlane  The plane to normalize.
   ]]></param>
</method>
<field name='NEGATIVE' fullname='sandy.math:PlaneMath/NEGATIVE' type='int' isStatic='true' isConst='true' defaultValue='-1' >
<description><![CDATA[
   Specifies a negative distance from a Point3D to a plane.
   ]]></description>
</field>
<field name='ON_PLANE' fullname='sandy.math:PlaneMath/ON_PLANE' type='int' isStatic='true' isConst='true' defaultValue='0' >
<description><![CDATA[
   Specifies a Point3D is on a plane.
   ]]></description>
</field>
<field name='POSITIVE' fullname='sandy.math:PlaneMath/POSITIVE' type='int' isStatic='true' isConst='true' defaultValue='1' >
<description><![CDATA[
   Specifies a positive distance from a Point3D to a plane.
   ]]></description>
</field>
<classRec name='Point3DMath' fullname='sandy.math:Point3DMath' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\math\Point3DMath.as' namespace='sandy.math' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
  Math functions for Point3D manipulations.
   
  ]]></description>
<author><![CDATA[ Thomas Pfeiffer - kiroukou
  ]]></author>
<since><![CDATA[ 0.2
  ]]></since>
<version><![CDATA[ 3.1
  ]]></version>
<date><![CDATA[  26.07.2007
  ]]></date>
</classRec>
<method name='addPoint3D' fullname='sandy.math:Point3DMath/addPoint3D' isStatic='true' isFinal='false' isOverride='false'  param_names='p_oV;p_oW' param_types='sandy.core.data:Point3D;sandy.core.data:Point3D' param_defaults='undefined;undefined' result_type='sandy.core.data:Point3D'>
<description><![CDATA[
   Adds two 3D Point3Ds.
      ]]></description>
<param><![CDATA[p_oV  The first Point3D.
   ]]></param>
<param><![CDATA[p_oW  The second Point3D.
      ]]></param>
<return><![CDATA[The resulting Point3D.
   ]]></return>
</method>
<method name='clone' fullname='sandy.math:Point3DMath/clone' isStatic='true' isFinal='false' isOverride='false'  param_names='p_oV' param_types='sandy.core.data:Point3D' param_defaults='undefined' result_type='sandy.core.data:Point3D'>
<description><![CDATA[
   Clones a 3D Point3D.
      ]]></description>
<param><![CDATA[p_oV  The Point3D.
      ]]></param>
<return><![CDATA[The clone.
   ]]></return>
</method>
<method name='cross' fullname='sandy.math:Point3DMath/cross' isStatic='true' isFinal='false' isOverride='false'  param_names='p_oW;p_oV' param_types='sandy.core.data:Point3D;sandy.core.data:Point3D' param_defaults='undefined;undefined' result_type='sandy.core.data:Point3D'>
<description><![CDATA[
   Computes the cross product of two 3D Point3Ds.
      ]]></description>
<param><![CDATA[p_oW The first Point3D.
   ]]></param>
<param><![CDATA[p_oV The second Point3D.
      ]]></param>
<return><![CDATA[The resulting cross product.
   ]]></return>
</method>
<method name='dot' fullname='sandy.math:Point3DMath/dot' isStatic='true' isFinal='false' isOverride='false'  param_names='p_oV;p_oW' param_types='sandy.core.data:Point3D;sandy.core.data:Point3D' param_defaults='undefined;undefined' result_type='Number'>
<description><![CDATA[
   Computes the dot product the two 3D Point3Ds.
      ]]></description>
<param><![CDATA[p_oV  The first Point3D.
   ]]></param>
<param><![CDATA[p_oW  The second Point3D.
      ]]></param>
<return><![CDATA[The dot procuct.
   ]]></return>
</method>
<method name='getAngle' fullname='sandy.math:Point3DMath/getAngle' isStatic='true' isFinal='false' isOverride='false'  param_names='p_oV;p_oW' param_types='sandy.core.data:Point3D;sandy.core.data:Point3D' param_defaults='undefined;undefined' result_type='Number'>
<description><![CDATA[
   Calculates the angle between two 3D Point3Ds. 
   
   ]]></description>
<param><![CDATA[p_oV The first Point3D.
   ]]></param>
<param><![CDATA[p_oW The second Point3D.
      ]]></param>
<return><![CDATA[The angle in radians between the two Point3Ds.
   ]]></return>
</method>
<method name='getNorm' fullname='sandy.math:Point3DMath/getNorm' isStatic='true' isFinal='false' isOverride='false'  param_names='p_oV' param_types='sandy.core.data:Point3D' param_defaults='undefined' result_type='Number'>
<description><![CDATA[
   Computes the norm of a 3D Point3D.
      ]]></description>
<param><![CDATA[p_oV The Point3D.
      ]]></param>
<return><![CDATA[The norm of the Point3D.
   ]]></return>
</method>
<method name='negate' fullname='sandy.math:Point3DMath/negate' isStatic='true' isFinal='false' isOverride='false'  param_names='p_oV' param_types='sandy.core.data:Point3D' param_defaults='undefined' result_type='sandy.core.data:Point3D'>
<description><![CDATA[
   Computes the oposite Point3D of a specified 3D Point3D.
      ]]></description>
<param><![CDATA[p_oV  The Point3D.
      ]]></param>
<return><![CDATA[The opposed Point3D.
   ]]></return>
</method>
<method name='normalize' fullname='sandy.math:Point3DMath/normalize' isStatic='true' isFinal='false' isOverride='false'  param_names='p_oV' param_types='sandy.core.data:Point3D' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
   Normalizes a 3d Point3D.
      ]]></description>
<param><![CDATA[p_oV  The Point3D to normalize.
      ]]></param>
<return><![CDATA[Whether the normalization was successful.
   ]]></return>
</method>
<method name='pow' fullname='sandy.math:Point3DMath/pow' isStatic='true' isFinal='false' isOverride='false'  param_names='p_oV;p_nExp' param_types='sandy.core.data:Point3D;Number' param_defaults='undefined;undefined' result_type='sandy.core.data:Point3D'>
<description><![CDATA[
   Computes the power of a 3D Point3D.
      <p>Here the meaning of the power of a Point3D is a new Point3D
   where each element is the the n:th power of the corresponding element.</p>
   <p>Ex: A^n = ( A.x^n, A.y^n, A.z^n )</p>
   
   ]]></description>
<param><![CDATA[p_oV  The Point3D.
   ]]></param>
<param><![CDATA[p_nExp The exponent.
      ]]></param>
<return><![CDATA[The resulting Point3D.
   ]]></return>
</method>
<method name='scale' fullname='sandy.math:Point3DMath/scale' isStatic='true' isFinal='false' isOverride='false'  param_names='p_oV;n' param_types='sandy.core.data:Point3D;Number' param_defaults='undefined;undefined' result_type='sandy.core.data:Point3D'>
<description><![CDATA[
   Multiplies a 3D Point3D by specified scalar.
      ]]></description>
<param><![CDATA[p_oV  The Point3D to multiply.
   ]]></param>
<param><![CDATA[n  The scaler to multiply.
      ]]></param>
<return><![CDATA[The resulting Point3D.
   ]]></return>
</method>
<method name='sphrand' fullname='sandy.math:Point3DMath/sphrand' isStatic='true' isFinal='false' isOverride='false'  param_names='inner;outer' param_types='Number;Number' param_defaults='undefined;undefined' result_type='sandy.core.data:Point3D'>
<description><![CDATA[
   Returns a random Point3D contained betweeen the first and second values.
   ]]></description>
</method>
<method name='sub' fullname='sandy.math:Point3DMath/sub' isStatic='true' isFinal='false' isOverride='false'  param_names='p_oV;p_oW' param_types='sandy.core.data:Point3D;sandy.core.data:Point3D' param_defaults='undefined;undefined' result_type='sandy.core.data:Point3D'>
<description><![CDATA[
   Substracts one 3D Point3D from another.
      ]]></description>
<param><![CDATA[p_oV  The Point3D to subtract from.
   ]]></param>
<param><![CDATA[p_oW The Point3D to subtract.
      ]]></param>
<return><![CDATA[The resulting Point3D.
   ]]></return>
</method>
<classRec name='VertexMath' fullname='sandy.math:VertexMath' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\math\VertexMath.as' namespace='sandy.math' access='public' baseclass='sandy.math:Point3DMath' isFinal='false' isDynamic='false' >
<description><![CDATA[
  Math functions for vertex manipulation.
   
  ]]></description>
<author><![CDATA[ Thomas Pfeiffer - kiroukou
  ]]></author>
<since><![CDATA[ 0.2
  ]]></since>
<version><![CDATA[ 3.1
  ]]></version>
<date><![CDATA[  26.07.2007
  ]]></date>
</classRec>
<method name='VertexMath' fullname='sandy.math:VertexMath/VertexMath' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
   Creates a VertexMath object.
   
   <p>This is a singleton constructor, and should not be called directly.<br />
   If called from outside the ColorMath class, it throws a SingletonError.</p>
   <p>[<strong>ToDo</strong>: Why instantiate this at all? - all methods are class methods! ]</p>
   ]]></description>
</method>
<method name='addVertex' fullname='sandy.math:VertexMath/addVertex' isStatic='true' isFinal='false' isOverride='false'  param_names='p_oV;p_oW' param_types='sandy.core.data:Vertex;sandy.core.data:Vertex' param_defaults='undefined;undefined' result_type='sandy.core.data:Vertex'>
<description><![CDATA[
   Adds the two vertices.
      <p>[<strong>ToDo</strong>: Check here! We should add all the properties of the vertices! ]</p>
      ]]></description>
<param><![CDATA[p_oV The first vertex.
   ]]></param>
<param><![CDATA[p_oW The second vertex.
      ]]></param>
<return><![CDATA[The resulting vertex.
   ]]></return>
</method>
<method name='clone' fullname='sandy.math:VertexMath/clone' isStatic='true' isFinal='false' isOverride='false'  param_names='p_oV' param_types='sandy.core.data:Vertex' param_defaults='undefined' result_type='sandy.core.data:Vertex'>
<description><![CDATA[
   Clones a vertex.
      ]]></description>
<param><![CDATA[p_oV A vertex to clone.
      ]]></param>
<return><![CDATA[The clone.
   ]]></return>
</method>
<method name='cross' fullname='sandy.math:VertexMath/cross' isStatic='true' isFinal='false' isOverride='false'  param_names='p_oW;p_oV' param_types='sandy.core.data:Vertex;sandy.core.data:Vertex' param_defaults='undefined;undefined' result_type='sandy.core.data:Vertex'>
<description><![CDATA[
   Computes the cross product the two vertices.
      ]]></description>
<param><![CDATA[p_oV The first vertex.
   ]]></param>
<param><![CDATA[p_oW The second vertex.
      ]]></param>
<return><![CDATA[The resulting cross product.
   ]]></return>
</method>
<method name='dot' fullname='sandy.math:VertexMath/dot' isStatic='true' isFinal='false' isOverride='false'  param_names='p_oV;p_oW' param_types='sandy.core.data:Vertex;sandy.core.data:Vertex' param_defaults='undefined;undefined' result_type='Number'>
<description><![CDATA[
   Computes the dot product of the two vertices.
      ]]></description>
<param><![CDATA[p_oV The first vertex.
   ]]></param>
<param><![CDATA[p_oW The second vertex.
      ]]></param>
<return><![CDATA[The dot procuct.
   ]]></return>
</method>
<method name='getInstance' fullname='sandy.math:VertexMath/getInstance' isStatic='true' isFinal='false' isOverride='false'  result_type='sandy.math:VertexMath'>
<description><![CDATA[
   Returns an instance of this class.
      <p>Call this method to get an instance of VertexMath.</p>
   ]]></description>
</method>
<method name='linearGradientMatrix' fullname='sandy.math:VertexMath/linearGradientMatrix' isStatic='true' isFinal='false' isOverride='false'  param_names='p_oV0;p_oV1;p_oV2;p_nR0;p_nR1;p_nR2;p_oMatrix' param_types='sandy.core.data:Vertex;sandy.core.data:Vertex;sandy.core.data:Vertex;Number;Number;Number;flash.geom:Matrix' param_defaults='undefined;undefined;undefined;undefined;undefined;undefined;null' result_type='flash.geom:Matrix'>
<description><![CDATA[
   Calculates linear gradient matrix from three vertices and ratios.
      <p>This function expects vertices to be ordered in such a way that p_nR0 &lt; p_nR1 &lt; p_n2.
   Ratios can be scaled by any positive factor.</p>
   <p>See flash.display.Graphics.beginGradientFill() documentation for ratios meaning.</p>
      ]]></description>
<param><![CDATA[p_oV0  The leftmost vertex in a gradient.
   ]]></param>
<param><![CDATA[p_oV1  The inner vertex in a gradient.
   ]]></param>
<param><![CDATA[p_oV2  The rightmost vertex in a gradient.
   ]]></param>
<param><![CDATA[p_nR0  The ratio for the leftmost vertext.
   ]]></param>
<param><![CDATA[p_nR1  The ratio for the inner vertex.
   ]]></param>
<param><![CDATA[p_nR2  The ratio for the rightmost.
   ]]></param>
<param><![CDATA[p_oMatrix The matrix to use.
      ]]></param>
<return><![CDATA[The transformation matrix to use with beginGradientFill (GradientType.LINEAR only).
   ]]></return>
</method>
<method name='negate' fullname='sandy.math:VertexMath/negate' isStatic='true' isFinal='false' isOverride='false'  param_names='p_oV' param_types='sandy.core.data:Vertex' param_defaults='undefined' result_type='sandy.core.data:Vertex'>
<description><![CDATA[
   Computes the opposite of a vertex.
      <p>The opposite vertex is a vertex where all components are multiplied by <code>-1</code>.</p>
      ]]></description>
<param><![CDATA[p_oV The vertex.
      ]]></param>
<return><![CDATA[The opposite vertex.
   ]]></return>
</method>
<method name='sub' fullname='sandy.math:VertexMath/sub' isStatic='true' isFinal='false' isOverride='false'  param_names='p_oV;p_oW' param_types='sandy.core.data:Vertex;sandy.core.data:Vertex' param_defaults='undefined;undefined' result_type='sandy.core.data:Vertex'>
<description><![CDATA[
   Substracts one vertices from another.
      ]]></description>
<param><![CDATA[p_oV The vertex to subtract from.
   ]]></param>
<param><![CDATA[p_oW The vertex to subtract.
      ]]></param>
<return><![CDATA[The resulting vertex.
   ]]></return>
</method>
<field name='create' fullname='sandy.math:VertexMath/private:create' type='Boolean' isStatic='true' isConst='false' >
</field>
<field name='instance' fullname='sandy.math:VertexMath/private:instance' type='sandy.math:VertexMath' isStatic='true' isConst='false' >
</field>
<classRec name='ColorMath' fullname='sandy.math:ColorMath' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\math\ColorMath.as' namespace='sandy.math' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
  Math functions for colors.
   
  ]]></description>
<author><![CDATA[ Thomas Pfeiffer - kiroukou
  ]]></author>
<author><![CDATA[ Tabin Cédric - thecaptain
  ]]></author>
<author><![CDATA[ Nicolas Coevoet - [ NikO ]
  ]]></author>
<since><![CDATA[ 0.1
  ]]></since>
<version><![CDATA[ 3.1
  ]]></version>
<date><![CDATA[  26.07.2007
  ]]></date>
</classRec>
<method name='applyAlpha' fullname='sandy.math:ColorMath/applyAlpha' isStatic='true' isFinal='false' isOverride='false'  param_names='c;a' param_types='uint;Number' param_defaults='undefined;undefined' result_type='uint'>
<description><![CDATA[
   Returns the color with altered alpha value.
   
   ]]></description>
<param><![CDATA[c 32-bit color.
   ]]></param>
<param><![CDATA[a New alpha ( 0 - 1 ).
      ]]></param>
<return><![CDATA[The hexadecimal value of the altered color.
   ]]></return>
</method>
<method name='calculateLitColour' fullname='sandy.math:ColorMath/calculateLitColour' isStatic='true' isFinal='false' isOverride='false'  param_names='col;lightStrength' param_types='Number;Number' param_defaults='undefined;undefined' result_type='Number'>
<description><![CDATA[
   Calculate the color for a particular lighting strength.
   <p>This converts the supplied pre-multiplied RGB color into HSL then modifies the L according to the light strength. 
   The result is then mapped back into the RGB space.</p>
   ]]></description>
</method>
<method name='hex2rgb' fullname='sandy.math:ColorMath/hex2rgb' isStatic='true' isFinal='false' isOverride='false'  param_names='hex' param_types='Number' param_defaults='undefined' result_type='Object'>
<description><![CDATA[
   Converts a hexadecimal color value to RGB components
   
   ]]></description>
<param><![CDATA[hex Hexadecimal color.
      ]]></param>
<return><![CDATA[The RGB color of the hexadecimal.
   ]]></return>
</method>
<method name='hex2rgbn' fullname='sandy.math:ColorMath/hex2rgbn' isStatic='true' isFinal='false' isOverride='false'  param_names='hex' param_types='Number' param_defaults='undefined' result_type='Object'>
<description><![CDATA[
  Converts hexadecimal color value to normalized rgb components ( 0 - 1 ).
  
  ]]></description>
<param><![CDATA[hex hexadecimal color value.
  ]]></param>
<return><![CDATA[The normalized rgb components ( 0 - 1 ).
  ]]></return>
</method>
<method name='rgb2hex' fullname='sandy.math:ColorMath/rgb2hex' isStatic='true' isFinal='false' isOverride='false'  param_names='r;g;b' param_types='Number;Number;Number' param_defaults='undefined;undefined;undefined' result_type='Number'>
<description><![CDATA[
   Converts color component values ( RGB ) to one hexadecimal value.
   
   ]]></description>
<param><![CDATA[r Red color ( 0 - 255 ).
   ]]></param>
<param><![CDATA[g Green color ( 0 - 255 ).
   ]]></param>
<param><![CDATA[b Blue color ( 0 - 255 ).
      ]]></param>
<return><![CDATA[The hexadecimal value of the RGB color.
   ]]></return>
</method>
<classRec name='Matrix4Math' fullname='sandy.math:Matrix4Math' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\math\Matrix4Math.as' namespace='sandy.math' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
  Math functions for Matrix4 calculations.
    ]]></description>
<author><![CDATA[ Thomas Pfeiffer - kiroukou
  ]]></author>
<see><![CDATA[sandy.core.data.Matrix4
  ]]></see>
<since><![CDATA[ 0.1
  ]]></since>
<version><![CDATA[ 3.1
  ]]></version>
<date><![CDATA[  26.07.2007
    ]]></date>
</classRec>
<method name='addMatrix4' fullname='sandy.math:Matrix4Math/addMatrix4' isStatic='true' isFinal='false' isOverride='false'  param_names='m1;m2' param_types='sandy.core.data:Matrix4;sandy.core.data:Matrix4' param_defaults='undefined;undefined' result_type='sandy.core.data:Matrix4'>
<description><![CDATA[
   Computes the addition of two Matrix4 matrices.
      ]]></description>
<param><![CDATA[m1  The first matrix.
   ]]></param>
<param><![CDATA[m2 The second matrix.
      ]]></param>
<return><![CDATA[The resulting matrix.
   ]]></return>
</method>
<method name='axisRotation' fullname='sandy.math:Matrix4Math/axisRotation' isStatic='true' isFinal='false' isOverride='false'  param_names='u;v;w;angle' param_types='Number;Number;Number;Number' param_defaults='undefined;undefined;undefined;undefined' result_type='sandy.core.data:Matrix4'>
<description><![CDATA[
   Computes a rotation Matrix4 matrix for a general axis of rotation.
      <p>[<strong>ToDo</strong>: My gosh! Explain this Thomas ;-) ]</p>
      ]]></description>
<param><![CDATA[u  rotation X.
   ]]></param>
<param><![CDATA[v  rotation Y.
   ]]></param>
<param><![CDATA[w  rotation Z.
   ]]></param>
<param><![CDATA[angle The angle of rotation in degrees.
      ]]></param>
<return><![CDATA[The resulting matrix.
   ]]></return>
</method>
<method name='axisRotationPoint3D' fullname='sandy.math:Matrix4Math/axisRotationPoint3D' isStatic='true' isFinal='false' isOverride='false'  param_names='v;angle' param_types='sandy.core.data:Point3D;Number' param_defaults='undefined;undefined' result_type='sandy.core.data:Matrix4'>
<description><![CDATA[
   Computes a rotation Matrix4 matrix for a general axis of rotation.
      ]]></description>
<param><![CDATA[v  The axis of rotation.
   ]]></param>
<param><![CDATA[angle The angle of rotation in degrees.
      ]]></param>
<return><![CDATA[The resulting matrix.
   ]]></return>
</method>
<method name='axisRotationWithReference' fullname='sandy.math:Matrix4Math/axisRotationWithReference' isStatic='true' isFinal='false' isOverride='false'  param_names='axis;ref;pAngle' param_types='sandy.core.data:Point3D;sandy.core.data:Point3D;Number' param_defaults='undefined;undefined;undefined' result_type='sandy.core.data:Matrix4'>
<description><![CDATA[
   Computes a Matrix4 matrix for a rotation around a specific axis through a specific point.
   
   <p>NOTE - The axis must be normalized!</p>
      ]]></description>
<param><![CDATA[axis   A Point3D representing the axis of rotation.
   ]]></param>
<param><![CDATA[ref   The center of rotation.
   ]]></param>
<param><![CDATA[pAngle The angle of rotation in degrees.
      ]]></param>
<return><![CDATA[The resulting matrix.
   ]]></return>
</method>
<method name='clone' fullname='sandy.math:Matrix4Math/clone' isStatic='true' isFinal='false' isOverride='false'  param_names='m' param_types='sandy.core.data:Matrix4' param_defaults='undefined' result_type='sandy.core.data:Matrix4'>
<description><![CDATA[
   Returns the clone of a Matrix4 matrix.
      ]]></description>
<param><![CDATA[m1 The matrix to clone.
      ]]></param>
<return><![CDATA[The resulting matrix.
   ]]></return>
</method>
<method name='det' fullname='sandy.math:Matrix4Math/det' isStatic='true' isFinal='false' isOverride='false'  param_names='m' param_types='sandy.core.data:Matrix4' param_defaults='undefined' result_type='Number'>
<description><![CDATA[
   Computes the determinant of a Matrix4 matrix.
      ]]></description>
<param><![CDATA[m  The matrix.
      ]]></param>
<return><![CDATA[The determinant.
   ]]></return>
</method>
<method name='det3x3' fullname='sandy.math:Matrix4Math/det3x3' isStatic='true' isFinal='false' isOverride='false'  param_names='m' param_types='sandy.core.data:Matrix4' param_defaults='undefined' result_type='Number'>
<description><![CDATA[
   Computes the 3x3 determinant of a Matrix4 matrix.
      <p>Uses the upper left 3 by 3 elements.</p>
      ]]></description>
<param><![CDATA[m  The matrix.
      ]]></param>
<return><![CDATA[The determinant.
   ]]></return>
</method>
<method name='eulerRotation' fullname='sandy.math:Matrix4Math/eulerRotation' isStatic='true' isFinal='false' isOverride='false'  param_names='ax;ay;az' param_types='Number;Number;Number' param_defaults='undefined;undefined;undefined' result_type='sandy.core.data:Matrix4'>
<description><![CDATA[
   Computes a rotation Matrix4 matrix from the Euler angle in degrees.
      ]]></description>
<param><![CDATA[ax Angle of rotation around X axis in degrees.
   ]]></param>
<param><![CDATA[ay Angle of rotation around Y axis in degrees.
   ]]></param>
<param><![CDATA[az Angle of rotation around Z axis in degrees.
      ]]></param>
<return><![CDATA[The resulting matrix.
   ]]></return>
</method>
<method name='getInverse' fullname='sandy.math:Matrix4Math/getInverse' isStatic='true' isFinal='false' isOverride='false'  param_names='m' param_types='sandy.core.data:Matrix4' param_defaults='undefined' result_type='sandy.core.data:Matrix4'>
<description><![CDATA[
  Returns the inverse of a Matrix4 matrix.
    ]]></description>
<param><![CDATA[m The matrix to invert.
    ]]></param>
<return><![CDATA[ The inverse Matrix4 matrix.
  ]]></return>
</method>
<method name='getTrace' fullname='sandy.math:Matrix4Math/getTrace' isStatic='true' isFinal='false' isOverride='false'  param_names='m' param_types='sandy.core.data:Matrix4' param_defaults='undefined' result_type='Number'>
<description><![CDATA[
   Computes the trace of a Matrix4 matrix.
      <p>The trace value is the sum of the element on the diagonal of the matrix.</p>
      ]]></description>
<param><![CDATA[m  The matrix we want to compute the trace.
      ]]></param>
<return><![CDATA[The trace value.
   ]]></return>
</method>
<method name='multiply' fullname='sandy.math:Matrix4Math/multiply' isStatic='true' isFinal='false' isOverride='false'  param_names='m1;m2' param_types='sandy.core.data:Matrix4;sandy.core.data:Matrix4' param_defaults='undefined;undefined' result_type='sandy.core.data:Matrix4'>
<description><![CDATA[
   Computes the multiplication of two Matrix4 matrices.
      <p>[<strong>ToDo</strong>: Explain this multiplication ]</p>
      ]]></description>
<param><![CDATA[m1  The first matrix.
   ]]></param>
<param><![CDATA[m2 The second matrix.
      ]]></param>
<return><![CDATA[The resulting matrix.
   ]]></return>
</method>
<method name='multiply3x3' fullname='sandy.math:Matrix4Math/multiply3x3' isStatic='true' isFinal='false' isOverride='false'  param_names='m1;m2' param_types='sandy.core.data:Matrix4;sandy.core.data:Matrix4' param_defaults='undefined;undefined' result_type='sandy.core.data:Matrix4'>
<description><![CDATA[
   Computes the multiplication of two Matrix4 matrices, as if they were 3x3.
      ]]></description>
<param><![CDATA[m1  The first matrix.
   ]]></param>
<param><![CDATA[m2 The second matrix.
      ]]></param>
<return><![CDATA[The resulting matrix.
   ]]></return>
</method>
<method name='multiply4x3' fullname='sandy.math:Matrix4Math/multiply4x3' isStatic='true' isFinal='false' isOverride='false'  param_names='m1;m2' param_types='sandy.core.data:Matrix4;sandy.core.data:Matrix4' param_defaults='undefined;undefined' result_type='sandy.core.data:Matrix4'>
<description><![CDATA[
   Computes the multiplication of two Matrix4 matrices.
      <p>[<strong>ToDo</strong>: Explain this multiplication ]</p>
      ]]></description>
<param><![CDATA[m1  The first matrix.
   ]]></param>
<param><![CDATA[m2 The second matrix.
      ]]></param>
<return><![CDATA[The resulting matrix.
   ]]></return>
</method>
<method name='rotationX' fullname='sandy.math:Matrix4Math/rotationX' isStatic='true' isFinal='false' isOverride='false'  param_names='angle' param_types='Number' param_defaults='undefined' result_type='sandy.core.data:Matrix4'>
<description><![CDATA[
   Computes a rotation Matrix4 matrix for an x axis rotation.
      ]]></description>
<param><![CDATA[angle Angle of rotation.
      ]]></param>
<return><![CDATA[The resulting matrix.
   ]]></return>
</method>
<method name='rotationY' fullname='sandy.math:Matrix4Math/rotationY' isStatic='true' isFinal='false' isOverride='false'  param_names='angle' param_types='Number' param_defaults='undefined' result_type='sandy.core.data:Matrix4'>
<description><![CDATA[
   Computes a rotation Matrix4 matrix for an y axis rotation.
      ]]></description>
<param><![CDATA[angle Angle of rotation.
      ]]></param>
<return><![CDATA[The resulting matrix.
   ]]></return>
</method>
<method name='rotationZ' fullname='sandy.math:Matrix4Math/rotationZ' isStatic='true' isFinal='false' isOverride='false'  param_names='angle' param_types='Number' param_defaults='undefined' result_type='sandy.core.data:Matrix4'>
<description><![CDATA[
   Computes a rotation Matrix4 matrix for an z axis rotation.
      ]]></description>
<param><![CDATA[angle Angle of rotation.
      ]]></param>
<return><![CDATA[The resulting matrix.
   ]]></return>
</method>
<method name='scale' fullname='sandy.math:Matrix4Math/scale' isStatic='true' isFinal='false' isOverride='false'  param_names='nXScale;nYScale;nZScale' param_types='Number;Number;Number' param_defaults='undefined;undefined;undefined' result_type='sandy.core.data:Matrix4'>
<description><![CDATA[
   Computes a scale Matrix4 matrix.
   
   <pre>
   |Sx 0  0  0|
   |0  Sy 0  0|
   |0  0  Sz 0|
   |0  0  0  1|
   </pre>
      ]]></description>
<param><![CDATA[nXScale  Scale factor in the x direction.
   ]]></param>
<param><![CDATA[nYScale  Scale factor in the y direction.
   ]]></param>
<param><![CDATA[nZScale  Scale factor in the z direction.
      ]]></param>
<return><![CDATA[The resulting matrix.
   ]]></return>
</method>
<method name='scalePoint3D' fullname='sandy.math:Matrix4Math/scalePoint3D' isStatic='true' isFinal='false' isOverride='false'  param_names='v' param_types='sandy.core.data:Point3D' param_defaults='undefined' result_type='sandy.core.data:Matrix4'>
<description><![CDATA[
   Computes a scale Matrix4 matrix from a scale Point3D.
   
   <pre>
   |Sx 0  0  0|
   |0  Sy 0  0|
   |0  0  Sz 0|
   |0  0  0  1|
   </pre>
      ]]></description>
<param><![CDATA[v The Point3D containing the scale values.
      ]]></param>
<return><![CDATA[The resulting matrix.
   ]]></return>
</method>
<method name='transform' fullname='sandy.math:Matrix4Math/transform' isStatic='true' isFinal='false' isOverride='false'  param_names='m;pv' param_types='sandy.core.data:Matrix4;sandy.core.data:Point3D' param_defaults='undefined;undefined' result_type='sandy.core.data:Point3D'>
<description><![CDATA[
   Multiplies a 3D vertex by a Matrix4 matrix.
      ]]></description>
<param><![CDATA[m  The matrix.
   ]]></param>
<param><![CDATA[pv The vertex.
      ]]></param>
<return><![CDATA[The resulting Point3D.
   ]]></return>
</method>
<method name='transform3x3' fullname='sandy.math:Matrix4Math/transform3x3' isStatic='true' isFinal='false' isOverride='false'  param_names='m;pv' param_types='sandy.core.data:Matrix4;sandy.core.data:Point3D' param_defaults='undefined;undefined' result_type='sandy.core.data:Point3D'>
<description><![CDATA[
   Multiplies a 3D Point3D by a Matrix4 matrix as a 3x3 matrix.
      <p>Uses the upper left 3 by 3 elements</p>
      ]]></description>
<param><![CDATA[m The matrix.
   ]]></param>
<param><![CDATA[v The Point3D.
      ]]></param>
<return><![CDATA[The resulting Point3D.
   ]]></return>
</method>
<method name='translation' fullname='sandy.math:Matrix4Math/translation' isStatic='true' isFinal='false' isOverride='false'  param_names='nTx;nTy;nTz' param_types='Number;Number;Number' param_defaults='undefined;undefined;undefined' result_type='sandy.core.data:Matrix4'>
<description><![CDATA[
   Computes a translation Matrix4 matrix.
   
   <pre>
   |1  0  0  0|
   |0  1  0  0|
   |0  0  1  0|
   |Tx Ty Tz 1|
   </pre>
   
   ]]></description>
<param><![CDATA[nTx  Translation in the x direction.
   ]]></param>
<param><![CDATA[nTy  Translation in the y direction.
   ]]></param>
<param><![CDATA[nTz  Translation in the z direction.
      ]]></param>
<return><![CDATA[The resulting matrix.
   ]]></return>
</method>
<method name='translationPoint3D' fullname='sandy.math:Matrix4Math/translationPoint3D' isStatic='true' isFinal='false' isOverride='false'  param_names='v' param_types='sandy.core.data:Point3D' param_defaults='undefined' result_type='sandy.core.data:Matrix4'>
<description><![CDATA[
   Computes a translation Matrix4 matrix from a Point3D.
   
   <pre>
   |1  0  0  0|
   |0  1  0  0|
   |0  0  1  0|
   |Tx Ty Tz 1|
   </pre>
   
   ]]></description>
<param><![CDATA[v  Translation Point3D.
      ]]></param>
<return><![CDATA[The resulting matrix.
   ]]></return>
</method>
<field name='USE_FAST_MATH' fullname='sandy.math:Matrix4Math/USE_FAST_MATH' type='Boolean' isStatic='true' isConst='false' defaultValue='false' >
<description><![CDATA[
   Specifies whether to use fast math calculations.
   ]]></description>
</field>
<field name='_fastMathInitialized' fullname='sandy.math:Matrix4Math/private:_fastMathInitialized' type='Boolean' isStatic='false' isConst='true' defaultValue='unknown' >
</field>
<classRec name='IntersectionMath' fullname='sandy.math:IntersectionMath' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\math\IntersectionMath.as' namespace='sandy.math' access='public' baseclass='Object' isFinal='true' isDynamic='false' >
<description><![CDATA[
  An util class with static method which provides useful functions related to intersection.
  
  ]]></description>
<author><![CDATA[ Thomas Pfeiffer - kiroukou
  ]]></author>
<version><![CDATA[ 3.1
  ]]></version>
<date><![CDATA[  18.10.2007
  ]]></date>
</classRec>
<method name='intersectionBSphere' fullname='sandy.math:IntersectionMath/intersectionBSphere' isStatic='true' isFinal='false' isOverride='false'  param_names='p_oBSphereA;p_oBSphereB' param_types='sandy.bounds:BSphere;sandy.bounds:BSphere' param_defaults='undefined;undefined' result_type='Boolean'>
<description><![CDATA[
   Determines whether two bounding spheres intersect.
      ]]></description>
<param><![CDATA[p_oBSphereA The first bounding sphere.
   ]]></param>
<param><![CDATA[p_oBSphereB The second bounding sphere.
      ]]></param>
<return><![CDATA[Whether the two spheres intersect.
   ]]></return>
</method>
<method name='intersectionLine2D' fullname='sandy.math:IntersectionMath/intersectionLine2D' isStatic='true' isFinal='false' isOverride='false'  param_names='p_oPointA;p_oPointB;p_oPointC;p_oPointD' param_types='flash.geom:Point;flash.geom:Point;flash.geom:Point;flash.geom:Point' param_defaults='undefined;undefined;undefined;undefined' result_type='flash.geom:Point'>
<description><![CDATA[
   Finds the intersection point of two 2D lines.
      ]]></description>
<param><![CDATA[p_oPointA A point of the first line.
   ]]></param>
<param><![CDATA[p_oPointB Another point of the first line.
   ]]></param>
<param><![CDATA[p_oPointC A point of the second line.
   ]]></param>
<param><![CDATA[p_oPointD Another point of the second line.
      ]]></param>
<return><![CDATA[The point where the two lines intersect. Returns null if lines are coincident or parallel.
   ]]></return>
</method>
<method name='intersectionLine3D' fullname='sandy.math:IntersectionMath/intersectionLine3D' isStatic='true' isFinal='false' isOverride='false'  param_names='p_oPointA;p_oPointB;p_oPointC;p_oPointD' param_types='sandy.core.data:Point3D;sandy.core.data:Point3D;sandy.core.data:Point3D;sandy.core.data:Point3D' param_defaults='undefined;undefined;undefined;undefined' result_type='Array'>
<description><![CDATA[
   Computes the smallest distance between two 3D lines.
   <p>As 3D lines cannot intersect, we compute two points, first owning to the first 3D line, and the second point owning to the second 3D line.</p>
   <p>The two points define a segment which length represents the shortest distance between these two lines.</p>
      ]]></description>
<param><![CDATA[p_oPointA A Point3D of the first 3D line.
   ]]></param>
<param><![CDATA[p_oPointB Another Point3D of the first 3D line.
   ]]></param>
<param><![CDATA[p_oPointC A Point3D of the second 3D line.
   ]]></param>
<param><![CDATA[p_oPointD Another Point3D of the second 3D line.
      ]]></param>
<return><![CDATA[An array containing the Point3Ds of the segment connecting the two 3D lines.
   ]]></return>
</method>
<method name='isPointInTriangle2D' fullname='sandy.math:IntersectionMath/isPointInTriangle2D' isStatic='true' isFinal='false' isOverride='false'  param_names='p_oPoint;p_oA;p_oB;p_oC' param_types='flash.geom:Point;flash.geom:Point;flash.geom:Point;flash.geom:Point' param_defaults='undefined;undefined;undefined;undefined' result_type='Boolean'>
<description><![CDATA[
   Determines if a point is within a triangle.
      ]]></description>
<param><![CDATA[p_oPoint The point to find in the triangle.
   ]]></param>
<param><![CDATA[p_oA  The first point of the triangle.
   ]]></param>
<param><![CDATA[p_oB  The second point of the triangle.
   ]]></param>
<param><![CDATA[p_oC  The third point of the triangle.
      ]]></param>
<return><![CDATA[Whether the point is inside the triangle.
   ]]></return>
</method>
<classRec name='QuaternionMath' fullname='sandy.math:QuaternionMath' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\math\QuaternionMath.as' namespace='sandy.math' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
  Math functions for manipulation of quaternion objects.
  
  <p>UNTESTED - DO NOT USE THIS CLASS UNLESS YOU KNOW EXACTLY WHAT YOU ARE DOING<br/>
  Do we ever ;-)[Petit comment]</p>
  <p>You can clearly see the reason this class is undocumented.</p>
    ]]></description>
<author><![CDATA[Thomas PFEIFFER - Kiroukou
  ]]></author>
<version><![CDATA[ 3.1
  ]]></version>
</classRec>
<method name='clone' fullname='sandy.math:QuaternionMath/clone' isStatic='true' isFinal='false' isOverride='false'  param_names='q' param_types='sandy.core.data:Quaternion' param_defaults='undefined' result_type='sandy.core.data:Quaternion'>
</method>
<method name='conjugate' fullname='sandy.math:QuaternionMath/conjugate' isStatic='true' isFinal='false' isOverride='false'  param_names='q' param_types='sandy.core.data:Quaternion' param_defaults='undefined' result_type='void'>
</method>
<method name='equal' fullname='sandy.math:QuaternionMath/equal' isStatic='true' isFinal='false' isOverride='false'  param_names='q;q2' param_types='sandy.core.data:Quaternion;sandy.core.data:Quaternion' param_defaults='undefined;undefined' result_type='Boolean'>
</method>
<method name='getAxisAngle' fullname='sandy.math:QuaternionMath/getAxisAngle' isStatic='true' isFinal='false' isOverride='false'  param_names='q' param_types='sandy.core.data:Quaternion' param_defaults='undefined' result_type='sandy.core.data:Quaternion'>
</method>
<method name='getConjugate' fullname='sandy.math:QuaternionMath/getConjugate' isStatic='true' isFinal='false' isOverride='false'  param_names='q' param_types='sandy.core.data:Quaternion' param_defaults='undefined' result_type='sandy.core.data:Quaternion'>
</method>
<method name='getDotProduct' fullname='sandy.math:QuaternionMath/getDotProduct' isStatic='true' isFinal='false' isOverride='false'  param_names='q;q2' param_types='sandy.core.data:Quaternion;sandy.core.data:Quaternion' param_defaults='undefined;undefined' result_type='Number'>
</method>
<method name='getMagnitude' fullname='sandy.math:QuaternionMath/getMagnitude' isStatic='true' isFinal='false' isOverride='false'  param_names='q' param_types='sandy.core.data:Quaternion' param_defaults='undefined' result_type='Number'>
</method>
<method name='getPoint3D' fullname='sandy.math:QuaternionMath/getPoint3D' isStatic='true' isFinal='false' isOverride='false'  param_names='q' param_types='sandy.core.data:Quaternion' param_defaults='undefined' result_type='sandy.core.data:Point3D'>
</method>
<method name='getRotationMatrix' fullname='sandy.math:QuaternionMath/getRotationMatrix' isStatic='true' isFinal='false' isOverride='false'  param_names='q' param_types='sandy.core.data:Quaternion' param_defaults='undefined' result_type='sandy.core.data:Matrix4'>
</method>
<method name='multiply' fullname='sandy.math:QuaternionMath/multiply' isStatic='true' isFinal='false' isOverride='false'  param_names='q;q2' param_types='sandy.core.data:Quaternion;sandy.core.data:Quaternion' param_defaults='undefined;undefined' result_type='sandy.core.data:Quaternion'>
</method>
<method name='multiplyByPoint3D' fullname='sandy.math:QuaternionMath/multiplyByPoint3D' isStatic='true' isFinal='false' isOverride='false'  param_names='q;v' param_types='sandy.core.data:Quaternion;sandy.core.data:Point3D' param_defaults='undefined;undefined' result_type='sandy.core.data:Point3D'>
</method>
<method name='multiplyPoint3D' fullname='sandy.math:QuaternionMath/multiplyPoint3D' isStatic='true' isFinal='false' isOverride='false'  param_names='q;v' param_types='sandy.core.data:Quaternion;sandy.core.data:Point3D' param_defaults='undefined;undefined' result_type='sandy.core.data:Quaternion'>
</method>
<method name='normalize' fullname='sandy.math:QuaternionMath/normalize' isStatic='true' isFinal='false' isOverride='false'  param_names='q' param_types='sandy.core.data:Quaternion' param_defaults='undefined' result_type='void'>
</method>
<method name='setAxisAngle' fullname='sandy.math:QuaternionMath/setAxisAngle' isStatic='true' isFinal='false' isOverride='false'  param_names='axe;angle' param_types='sandy.core.data:Point3D;Number' param_defaults='undefined;undefined' result_type='sandy.core.data:Quaternion'>
</method>
<method name='setByMatrix' fullname='sandy.math:QuaternionMath/setByMatrix' isStatic='true' isFinal='false' isOverride='false'  param_names='m' param_types='sandy.core.data:Matrix4' param_defaults='undefined' result_type='sandy.core.data:Quaternion'>
</method>
<method name='setEuler' fullname='sandy.math:QuaternionMath/setEuler' isStatic='true' isFinal='false' isOverride='false'  param_names='x;y;z' param_types='Number;Number;Number' param_defaults='undefined;undefined;undefined' result_type='sandy.core.data:Quaternion'>
</method>
<method name='setPoint3D' fullname='sandy.math:QuaternionMath/setPoint3D' isStatic='true' isFinal='false' isOverride='false'  param_names='q;v' param_types='sandy.core.data:Quaternion;sandy.core.data:Point3D' param_defaults='undefined;undefined' result_type='void'>
</method>
<method name='setScalar' fullname='sandy.math:QuaternionMath/setScalar' isStatic='true' isFinal='false' isOverride='false'  param_names='q;n' param_types='sandy.core.data:Quaternion;Number' param_defaults='undefined;undefined' result_type='void'>
</method>
<method name='toEuler' fullname='sandy.math:QuaternionMath/toEuler' isStatic='true' isFinal='false' isOverride='false'  param_names='q' param_types='sandy.core.data:Quaternion' param_defaults='undefined' result_type='sandy.core.data:Point3D'>
</method>
<classRec name='SandyFlags' fullname='sandy.core:SandyFlags' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\core\SandyFlags.as' namespace='sandy.core' access='public' baseclass='Object' isFinal='true' isDynamic='false' >
</classRec>
<field name='POLYGON_NORMAL_WORLD' fullname='sandy.core:SandyFlags/POLYGON_NORMAL_WORLD' type='uint' isStatic='true' isConst='true' defaultValue='1' >
</field>
<field name='VERTEX_NORMAL_WORLD' fullname='sandy.core:SandyFlags/VERTEX_NORMAL_WORLD' type='uint' isStatic='true' isConst='true' defaultValue='2' >
</field>
<classRec name='SceneLocator' fullname='sandy.core:SceneLocator' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\core\SceneLocator.as' namespace='sandy.core' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
  The SceneLocator serves as a registry of all scenes in the application.
    <p>An application can only have one SceneLocator. Using the SceneLocator, scenes can be located, registered, and unregistered.</p>
  <p>When scenes are created in an application, they automatically
  register with the SceneLocator registry.</p>
    ]]></description>
<author><![CDATA[ Thomas Pfeiffer - kiroukou
  ]]></author>
<see><![CDATA[Scene3D
  ]]></see>
<version><![CDATA[ 3.1
  ]]></version>
<date><![CDATA[  26.07.2007
    ]]></date>
</classRec>
<method name='SceneLocator' fullname='sandy.core:SceneLocator/SceneLocator' isStatic='false' isFinal='false' isOverride='false'  param_names='access' param_types='SceneLocator.as$99:PrivateConstructorAccess' param_defaults='undefined' result_type='*'>
<description><![CDATA[
   Creates the SceneLocator registry.
      <p>This constructor is never called directly. Instead the registry instance is retrieved by calling SceneLocator.getInstance().</p>
      ]]></description>
<param><![CDATA[access A singleton access flag object
   ]]></param>
</method>
<method name='getInstance' fullname='sandy.core:SceneLocator/getInstance' isStatic='true' isFinal='false' isOverride='false'  result_type='sandy.core:SceneLocator'>
<description><![CDATA[
   Returns the instance of this SceneLocator object.
      ]]></description>
<return><![CDATA[This instance.
   ]]></return>
</method>
<method name='getScene' fullname='sandy.core:SceneLocator/getScene' isStatic='false' isFinal='false' isOverride='false'  param_names='key' param_types='String' param_defaults='undefined' result_type='sandy.core:Scene3D'>
<description><![CDATA[
   Returns the Scene3D object with the specified name.
      ]]></description>
<param><![CDATA[key  The name of the scene.
      ]]></param>
<return><![CDATA[The requested scene.
   ]]></return>
</method>
<method name='isRegistered' fullname='sandy.core:SceneLocator/isRegistered' isStatic='false' isFinal='false' isOverride='false'  param_names='key' param_types='String' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
   Checks if a scene with the specified name is registered.
      ]]></description>
<param><![CDATA[ key The name of the scene to check.
      ]]></param>
<return><![CDATA[true if a scene with that name is registered, false otherwise.
   ]]></return>
</method>
<method name='registerScene' fullname='sandy.core:SceneLocator/registerScene' isStatic='false' isFinal='false' isOverride='false'  param_names='key;o' param_types='String;sandy.core:Scene3D' param_defaults='undefined;undefined' result_type='Boolean'>
<description><![CDATA[
   Registers a scene.
      ]]></description>
<param><![CDATA[key The name of the scene.
   ]]></param>
<param><![CDATA[o  The Scene3D object.
      ]]></param>
<return><![CDATA[Whether the scene was successfully registered.
   ]]></return>
</method>
<method name='unregisterScene' fullname='sandy.core:SceneLocator/unregisterScene' isStatic='false' isFinal='false' isOverride='false'  param_names='key' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   Unregisters a scene with the specified name.
      ]]></description>
<param><![CDATA[key The name of the scene to unregister.
   ]]></param>
</method>
<field name='_m' fullname='sandy.core:SceneLocator/private:_m' type='flash.utils:Dictionary' isStatic='false' isConst='false' >
</field>
<field name='_oI' fullname='sandy.core:SceneLocator/private:_oI' type='sandy.core:SceneLocator' isStatic='true' isConst='false' >
</field>
<classRec name='Scene3D' fullname='sandy.core:Scene3D' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\core\Scene3D.as' namespace='sandy.core' access='public' baseclass='flash.events:EventDispatcher' isFinal='false' isDynamic='false' >
<description><![CDATA[
  The Sandy 3D scene.
    <p>Supercedes deprecated World3D class.</p>
    <p>The Scene3D object is the central point of a Sandy scene.<br/>
  You can have multiple scenes.<br/>
  A scene contains the object tree with groups, a camera, a light source and a canvas to draw on</p>
    ]]></description>
<author><![CDATA[ Thomas Pfeiffer - kiroukou
  ]]></author>
<example><![CDATA[To create the scene, you invoke the Scene3D constructor, passing it the base movie clip, the camera, and the root group for the scene.<br/>
  The rendering of the scene is driven by a "heart beat", which may be a Timer or the Event.ENTER_FRAME event.
    The following pseudo-code approximates the necessary steps. It is very approximate and not meant as a working example:
  <listing version="3.0.3">
    var cam:Camera = new Camera3D(600, 450, 45, 0, 2000); // camera viewport height,width, fov, near plane, and far plane
   var mc:MovieClip = someSceneHoldingMovieClip;  // Programmer must ensure it is a valid movie clip.
   var rootGroup = new Group("world_root_group");
   // Add some child objects to the world (not shown), perhaps as follows
   //rootGroup.addChild(someChild);
   // Create the scene and render it
       var myScene:Scene3D = new Scene3D("scene_name", mc, cam, rootGroup);
   myScene.render();
  //The enterFrameHandler presumably calls the myScene.render() method to render the scene for each frame.
  yourMovieRoot.addEventListener( Event.ENTER_FRAME, enterFrameHandler );
   </listing>
    ]]></example>
<version><![CDATA[ 3.1
  ]]></version>
<date><![CDATA[  25.08.2008
  ]]></date>
<metadata>
	<Event owner='sandy.core:Scene3D' name='scene_render_display_list' type='sandy.events.SandyEvent' >
<description><![CDATA[
 Dispatched when the display list is rendered.
  ]]></description>
<eventType><![CDATA[sandy.events.SandyEvent.SCENE_RENDER_DISPLAYLIST
 ]]></eventType>
	</Event>
</metadata>
<metadata>
	<Event owner='sandy.core:Scene3D' name='scene_update' type='sandy.events.SandyEvent' >
<description><![CDATA[
 Dispatched when the scene is updated.
  ]]></description>
<eventType><![CDATA[sandy.events.SandyEvent.SCENE_UPDATE
 ]]></eventType>
	</Event>
</metadata>
<metadata>
	<Event owner='sandy.core:Scene3D' name='scene_cull' type='sandy.events.SandyEvent' >
<description><![CDATA[
 Dispatched when the scene is culled.
  ]]></description>
<eventType><![CDATA[sandy.events.SandyEvent.SCENE_CULL
 ]]></eventType>
	</Event>
</metadata>
<metadata>
	<Event owner='sandy.core:Scene3D' name='scene_render_finish' type='sandy.events.SandyEvent' >
<description><![CDATA[
 Dispatched when the scene has finished its rendering process
  ]]></description>
<eventType><![CDATA[sandy.events.SandyEvent.SCENE_RENDER_FINISH
 ]]></eventType>
	</Event>
</metadata>
<metadata>
	<Event owner='sandy.core:Scene3D' name='scene_render' type='sandy.events.SandyEvent' >
<description><![CDATA[
 Dispatched when the scene is rendered.
  ]]></description>
<eventType><![CDATA[sandy.events.SandyEvent.SCENE_RENDER
 ]]></eventType>
	</Event>
</metadata>
<metadata>
	<Event owner='sandy.core:Scene3D' name='lightAdded' type='sandy.events.SandyEvent' >
<description><![CDATA[
 Dispatched when a light is added to the scene.
  ]]></description>
<eventType><![CDATA[sandy.events.SandyEvent.LIGHT_ADDED
 ]]></eventType>
	</Event>
</metadata>
</classRec>
<method name='Scene3D' fullname='sandy.core:Scene3D/Scene3D' isStatic='false' isFinal='false' isOverride='false'  param_names='p_sName;p_oContainer;p_oCamera;p_oRootNode' param_types='String;flash.display:Sprite;sandy.core.scenegraph:Camera3D;sandy.core.scenegraph:Group' param_defaults='undefined;undefined;null;null' result_type='*'>
<description><![CDATA[
   Creates a new 3D scene.
      <p>Each scene is automatically registered with the SceneLocator and must be given
   a unique name to make proper use of the SceneLocator registry.</p>
      ]]></description>
<param><![CDATA[p_sName  A unique name for this scene.
   ]]></param>
<param><![CDATA[p_oContainer  The container where the scene will be drawn.
   ]]></param>
<param><![CDATA[p_oCamera  The camera for this scene.
   ]]></param>
<param><![CDATA[p_oRootNode The root group of the scene's object tree.
         ]]></param>
<see><![CDATA[sandy.core.scenegraph.Camera3D
      ]]></see>
<see><![CDATA[sandy.core.scenegraph.Group
   ]]></see>
</method>
<method name='dispose' fullname='sandy.core:Scene3D/dispose' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
   Disposes of all the scene's resources.
      <p>This method is used to clear memory and will free up all resources of the scene and unregister it from SceneLocator.</p>
   ]]></description>
</method>
<method name='getVersion' fullname='sandy.core:Scene3D/getVersion' isStatic='true' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[
   Returns a version string ("3.1"), useful for conditional code
   ]]></description>
</method>
<method name='render' fullname='sandy.core:Scene3D/render' isStatic='false' isFinal='false' isOverride='false'  param_names='p_bUseCache' param_types='Boolean' param_defaults='true' result_type='void'>
<description><![CDATA[
   Renders the scene in its container.
   Several events are dispatched by the scene to allows you to control the rendering pipeline
   SandyEvent.SCENE_UPDATE is broadcasted before the update phasis of the scenegraph. During this phasis each node updates its information and creates its local matrix if any
   SandyEvent.SCENE_CULL is bradcasted before the scene cull phasis. This phasis corresponds to the frustum vs nodes bounding objects visibility test. Nodes that aren't in the camera field of view, are removed from the render phasis.
   SandyEvent.SCENE_RENDER process the render call of the visible nodes. During this process, visible polygons/sprites are registering for the camera display to the screen.
   SandyEvent.SCENE_RENDER_DISPLAYLIST render the visible polygons to the screen
      ]]></description>
<param><![CDATA[p_bUseCache Boolean default true, use the cache system
         ]]></param>
<see><![CDATA[sandy.events.SandyEvent
   ]]></see>
</method>
<method name='light' fullname='sandy.core:Scene3D/light/get' isStatic='false' isFinal='false' isOverride='false'  result_type='sandy.core.light:Light3D'>
<description><![CDATA[
   The Light3D object associated with this this scene.
      ]]></description>
<see><![CDATA[sandy.core.light.Light3D
   ]]></see>
</method>
<method name='name' fullname='sandy.core:Scene3D/name/get' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[
   The name of this scene.
   This value can't be changed.
   ]]></description>
</method>
<method name='rectClipping' fullname='sandy.core:Scene3D/rectClipping/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
   Enable this property to perfectly clip your 3D scene to the viewport's dimensions with a 2D clipping
   If set to <code>true</code>, nothing will be drawn outside the viewport's dimensions.
      ]]></description>
<default><![CDATA[false
   ]]></default>
</method>
<method name='root' fullname='sandy.core:Scene3D/root/get' isStatic='false' isFinal='false' isOverride='false'  result_type='sandy.core.scenegraph:Group'>
</method>
<method name='light' fullname='sandy.core:Scene3D/light/set' isStatic='false' isFinal='false' isOverride='false'  param_names='l' param_types='sandy.core.light:Light3D' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='rectClipping' fullname='sandy.core:Scene3D/rectClipping/set' isStatic='false' isFinal='false' isOverride='false'  param_names='p_bEnableClipping' param_types='Boolean' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='root' fullname='sandy.core:Scene3D/root/set' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oGroup' param_types='sandy.core.scenegraph:Group' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   The root of the scene graph for this scene.
         ]]></description>
<see><![CDATA[sandy.core.scenegraph.Group
   ]]></see>
</method>
<field name='_light' fullname='sandy.core:Scene3D/private:_light' type='sandy.core.light:Light3D' isStatic='false' isConst='false' >
</field>
<field name='_version' fullname='sandy.core:Scene3D/private:_version' type='String' isStatic='true' isConst='false' defaultValue='3.1' >
</field>
<field name='camera' fullname='sandy.core:Scene3D/camera' type='sandy.core.scenegraph:Camera3D' isStatic='false' isConst='false' >
<description><![CDATA[
   The camera looking at this scene.
         ]]></description>
<see><![CDATA[sandy.core.scenegraph.Camera3D
   ]]></see>
</field>
<field name='container' fullname='sandy.core:Scene3D/container' type='flash.display:Sprite' isStatic='false' isConst='false' >
<description><![CDATA[
   The container that stores all displayable objects for this scene.
   ]]></description>
</field>
<field name='frameCount' fullname='sandy.core:Scene3D/frameCount' type='int' isStatic='false' isConst='false' defaultValue='0' >
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='m_bRectClipped' fullname='sandy.core:Scene3D/private:m_bRectClipped' type='Boolean' isStatic='false' isConst='false' defaultValue='false' >
</field>
<field name='m_oRoot' fullname='sandy.core:Scene3D/protected:m_oRoot' type='sandy.core.scenegraph:Group' isStatic='false' isConst='false' >
</field>
<field name='m_sName' fullname='sandy.core:Scene3D/protected:m_sName' type='String' isStatic='false' isConst='false' >
<description><![CDATA[
      ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='renderer' fullname='sandy.core:Scene3D/renderer' type='sandy.core:Renderer' isStatic='false' isConst='false' defaultValue='' >
<description><![CDATA[
   The renerer choosed for render this scene.
   In the future, the actual renderer will implement an interface that developers could use to create their own
   rendering process.
   ]]></description>
</field>
<classRec name='Renderer' fullname='sandy.core:Renderer' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\core\Renderer.as' namespace='sandy.core' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
  This class is design to handle the rendering processing of a Sandy3D scene.
  Basically, it collects elemens to render, prepare their matrix, project vertices.
  
  It also manage the cache system. It means it handle the fact that any non moving object isn't rendered.
  
  ]]></description>
<author><![CDATA[thomas
  ]]></author>
<version><![CDATA[3.1
  ]]></version>
</classRec>
<method name='Renderer' fullname='sandy.core:Renderer/Renderer' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
   Default renderer.
   ]]></description>
</method>
<method name='addToDisplayList' fullname='sandy.core:Renderer/addToDisplayList' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oObject' param_types='sandy.core.scenegraph:IDisplayable' param_defaults='undefined' result_type='void'>
</method>
<method name='init' fullname='sandy.core:Renderer/init' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
   Init the renderer internal data
   ]]></description>
</method>
<method name='removeFromDisplayList' fullname='sandy.core:Renderer/removeFromDisplayList' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oObject' param_types='sandy.core.scenegraph:IDisplayable' param_defaults='undefined' result_type='void'>
</method>
<method name='render' fullname='sandy.core:Renderer/render' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oScene;p_bUseCache' param_types='sandy.core:Scene3D;Boolean' param_defaults='undefined;true' result_type='Boolean'>
<description><![CDATA[
   Render the given scene.
   Objects are transformed, clipped and projected into that function.
    
   ]]></description>
<param><![CDATA[p_bUseCache Boolean value, default to true, use a cache system to avoid unnecessary computation
   ]]></param>
</method>
<method name='renderDisplayList' fullname='sandy.core:Renderer/renderDisplayList' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oScene' param_types='sandy.core:Scene3D' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   Process the rendering of the scene.
   The camera has all the information needed about the objects to render.
   
   The camera stores all the visible shape/polygons into an array, and loop through it calling their display method.
   Before the display call, the container graphics is cleared.
   
   ]]></description>
<param><![CDATA[p_oScene The Scene3D object to render
   ]]></param>
</method>
<field name='m_aCamera' fullname='sandy.core:Renderer/protected:m_aCamera' type='sandy.core.scenegraph:Camera3D' isStatic='false' isConst='false' >
</field>
<field name='m_aDisplayList' fullname='sandy.core:Renderer/protected:m_aDisplayList' type='Array' isStatic='false' isConst='true' defaultValue='' >
</field>
<field name='m_aRenderingList' fullname='sandy.core:Renderer/protected:m_aRenderingList' type='Array' isStatic='false' isConst='true' defaultValue='' >
</field>
<field name='m_bGlobalRedraw' fullname='sandy.core:Renderer/private:m_bGlobalRedraw' type='Boolean' isStatic='false' isConst='false' >
</field>
<field name='m_nDisplayListCount' fullname='sandy.core:Renderer/protected:m_nDisplayListCount' type='int' isStatic='false' isConst='false' >
</field>
<field name='m_nRenderingListCount' fullname='sandy.core:Renderer/protected:m_nRenderingListCount' type='int' isStatic='false' isConst='false' >
</field>
<field name='pool' fullname='sandy.core:Renderer/private:pool' type='sandy.core.data:Pool' isStatic='false' isConst='false' defaultValue='' >
</field>
<classRec name='MaterialType' fullname='sandy.materials:MaterialType' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\materials\MaterialType.as' namespace='sandy.materials' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
  Represents the material types used in Sandy.
  
  <p>All materialy types used in Sandy are registered here as constant properties.<br/>
  If new materials are added to the Sandy library, they should be registered here.</p> 
    ]]></description>
<author><![CDATA[ Thomas Pfeiffer - kiroukou
  ]]></author>
<version><![CDATA[ 3.1
  ]]></version>
<date><![CDATA[  26.07.2007
  ]]></date>
</classRec>
<method name='MaterialType' fullname='sandy.materials:MaterialType/MaterialType' isStatic='false' isFinal='false' isOverride='false'  param_names='p_sType' param_types='String' param_defaults='undefined' result_type='*'>
</method>
<method name='typeString' fullname='sandy.materials:MaterialType/typeString' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
</method>
<field name='BITMAP' fullname='sandy.materials:MaterialType/BITMAP' type='sandy.materials:MaterialType' isStatic='true' isConst='true' defaultValue='' >
<description><![CDATA[
   Specifies a BitmapMaterial.
   ]]></description>
</field>
<field name='COLOR' fullname='sandy.materials:MaterialType/COLOR' type='sandy.materials:MaterialType' isStatic='true' isConst='true' defaultValue='' >
<description><![CDATA[
   Specifies a ColorMaterial.
   ]]></description>
</field>
<field name='MOVIE' fullname='sandy.materials:MaterialType/MOVIE' type='sandy.materials:MaterialType' isStatic='true' isConst='true' defaultValue='' >
<description><![CDATA[
   Specifies a MovieMaterial.
   ]]></description>
</field>
<field name='NONE' fullname='sandy.materials:MaterialType/NONE' type='sandy.materials:MaterialType' isStatic='true' isConst='true' defaultValue='' >
<description><![CDATA[
   Specifies the default material.
   ]]></description>
</field>
<field name='OUTLINE' fullname='sandy.materials:MaterialType/OUTLINE' type='sandy.materials:MaterialType' isStatic='true' isConst='true' defaultValue='' >
<description><![CDATA[
   Specifies a OutlineMaterial.
   ]]></description>
</field>
<field name='VIDEO' fullname='sandy.materials:MaterialType/VIDEO' type='sandy.materials:MaterialType' isStatic='true' isConst='true' defaultValue='' >
<description><![CDATA[
   Specifies a VideoMaterial.
   ]]></description>
</field>
<field name='WIREFRAME' fullname='sandy.materials:MaterialType/WIREFRAME' type='sandy.materials:MaterialType' isStatic='true' isConst='true' defaultValue='' >
<description><![CDATA[
   Specifies a WireFrameMaterial.
   ]]></description>
</field>
<field name='m_sType' fullname='sandy.materials:MaterialType/private:m_sType' type='String' isStatic='false' isConst='false' >
</field>
<interfaceRec name='IAlphaMaterial' fullname='sandy.materials:IAlphaMaterial' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\materials\IAlphaMaterial.as' namespace='sandy.materials' access='public' baseClasses='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
  Interface for setting and getting alpha on a material.
  
  ]]></description>
<author><![CDATA[ flexrails
  ]]></author>
<version><![CDATA[ 3.1
  ]]></version>
<date><![CDATA[  22.03.2008
  ]]></date>
</interfaceRec>
<method name='alpha' fullname='sandy.materials:IAlphaMaterial/sandy.materials:IAlphaMaterial:alpha/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='alpha' fullname='sandy.materials:IAlphaMaterial/sandy.materials:IAlphaMaterial:alpha/set' isStatic='false' isFinal='false' isOverride='false'  param_names='p_nValue' param_types='Number' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   Indicates the alpha transparency value of the material. Valid values are 0 (fully transparent) to 1 (fully opaque).
   ]]></description>
</method>
<classRec name='Appearance' fullname='sandy.materials:Appearance' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\materials\Appearance.as' namespace='sandy.materials' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
  Represents the appearance property of the visible objects.
    <p>The appearance holds the front and back materials of the object.</p>
    ]]></description>
<author><![CDATA[ Thomas Pfeiffer - kiroukou
  ]]></author>
<see><![CDATA[ sandy.core.scenegraph.Shape3D
  ]]></see>
<version><![CDATA[ 3.1
  ]]></version>
<date><![CDATA[  26.07.2007
    ]]></date>
</classRec>
<method name='Appearance' fullname='sandy.materials:Appearance/Appearance' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oFront;p_oBack' param_types='sandy.materials:Material;sandy.materials:Material' param_defaults='null;null' result_type='*'>
<description><![CDATA[
   Creates an appearance with front and back materials.
      <p>If no material is passed, the default material for back and front is a default ColorMaterial.<br />
   If only a front material is passed, it will be used as back material as well.</p>
      ]]></description>
<param><![CDATA[p_oFront The front material
   ]]></param>
<param><![CDATA[p_oBack The back material
      ]]></param>
<see><![CDATA[sandy.materials.ColorMaterial
   ]]></see>
<see><![CDATA[sandy.materials.Material
   ]]></see>
</method>
<method name='dispose' fullname='sandy.materials:Appearance/dispose' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
   Dispose the front and back materials.
   Be careful, this may affect the other shapes that are using the same appearance or materials.
   References to front and back materials are set to null.
   ]]></description>
</method>
<method name='toString' fullname='sandy.materials:Appearance/toString' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[
   Returns a string representation of this object.
      ]]></description>
<return><![CDATA[The fully qualified name of this object.
   ]]></return>
</method>
<method name='backMaterial' fullname='sandy.materials:Appearance/backMaterial/get' isStatic='false' isFinal='false' isOverride='false'  result_type='sandy.materials:Material'>
<description><![CDATA[
   The back material held by this appearance.
   ]]></description>
</method>
<method name='flags' fullname='sandy.materials:Appearance/flags/get' isStatic='false' isFinal='false' isOverride='false'  result_type='uint'>
<description><![CDATA[
  Returns the flags for the front and back materials.
    ]]></description>
<see><![CDATA[sandy.core.SandyFlags
  ]]></see>
</method>
<method name='frontMaterial' fullname='sandy.materials:Appearance/frontMaterial/get' isStatic='false' isFinal='false' isOverride='false'  result_type='sandy.materials:Material'>
<description><![CDATA[
   The front material held by this appearance.
   ]]></description>
</method>
<method name='lightingEnable' fullname='sandy.materials:Appearance/lightingEnable/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
   Return if the light has been enable on one of the 2 material (OR exclusion).
   ]]></description>
<return><![CDATA[Boolean true if light is enable on one of the front/back material
   ]]></return>
</method>
<method name='modified' fullname='sandy.materials:Appearance/modified/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
   Returns a boolean if the appearance has been modified and needs a redraw.
   ]]></description>
<return><![CDATA[Boolean true if one of the material has changed, false otherwise
   ]]></return>
</method>
<method name='useVertexNormal' fullname='sandy.materials:Appearance/useVertexNormal/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
   Get the use of vertex normal feature of the appearance.
      <p><b>Note: Only one of the materials is using this feature.</p>
   ]]></description>
</method>
<method name='backMaterial' fullname='sandy.materials:Appearance/backMaterial/set' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oMat' param_types='sandy.materials:Material' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='frontMaterial' fullname='sandy.materials:Appearance/frontMaterial/set' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oMat' param_types='sandy.materials:Material' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='lightingEnable' fullname='sandy.materials:Appearance/lightingEnable/set' isStatic='false' isFinal='false' isOverride='false'  param_names='p_bValue' param_types='Boolean' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   Enable/Disable the light on the front and back materials on that appearance object
   ]]></description>
<param><![CDATA[p_bValue Boolean true to enable light effect on materials, false value to disable it.
   ]]></param>
</method>
<field name='m_oBackMaterial' fullname='sandy.materials:Appearance/private:m_oBackMaterial' type='sandy.materials:Material' isStatic='false' isConst='false' >
</field>
<field name='m_oFrontMaterial' fullname='sandy.materials:Appearance/private:m_oFrontMaterial' type='sandy.materials:Material' isStatic='false' isConst='false' >
</field>
<classRec name='Material' fullname='sandy.materials:Material' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\materials\Material.as' namespace='sandy.materials' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
  The Material class is the base class for all materials.
  
  <p>Since the Material object is essentially a blank material, this class can be used
  to apply attributes without any material to a 3D object.</p>
    ]]></description>
<author><![CDATA[ Thomas Pfeiffer - kiroukou
  ]]></author>
<see><![CDATA[Appearance
  ]]></see>
<version><![CDATA[ 3.1
  ]]></version>
<date><![CDATA[  26.07.2007
    ]]></date>
</classRec>
<method name='Material' fullname='sandy.materials:Material/Material' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oAttr' param_types='sandy.materials.attributes:MaterialAttributes' param_defaults='null' result_type='*'>
<description><![CDATA[
   Creates a material.
      <p>This constructor is never called directly - but by sub class constructors.</p>
   ]]></description>
<param><![CDATA[p_oAttr The attributes for this material.
   ]]></param>
</method>
<method name='begin' fullname='sandy.materials:Material/begin' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oScene' param_types='sandy.core:Scene3D' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   Calls begin method of the MaterialAttributes associated with this material.
      ]]></description>
<param><![CDATA[p_oScene The scene.
      ]]></param>
<see><![CDATA[sandy.materials.attributes.MaterialAttributes#begin()
   ]]></see>
</method>
<method name='dispose' fullname='sandy.materials:Material/dispose' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
   Method to call when you want to release the resources of that material (filters, attributes and lreferences to polygons)
   Shape3D.DEFAULT_MATERIAL Material can't be disposed because might be used for later shape3D creations
   ]]></description>
</method>
<method name='finish' fullname='sandy.materials:Material/finish' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oScene' param_types='sandy.core:Scene3D' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   Calls finish method of the MaterialAttributes associated with this material.
      ]]></description>
<param><![CDATA[p_oScene The scene.
      ]]></param>
<see><![CDATA[sandy.materials.attributes.MaterialAttributes#finish()
   ]]></see>
</method>
<method name='init' fullname='sandy.materials:Material/init' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oPolygon' param_types='sandy.core.data:Polygon' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   Calls init method of the MaterialAttributes associated with this material.
      ]]></description>
<see><![CDATA[sandy.materials.attributes.MaterialAttributes#init()
   ]]></see>
</method>
<method name='renderPolygon' fullname='sandy.materials:Material/renderPolygon' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oScene;p_oPolygon;p_mcContainer' param_types='sandy.core:Scene3D;sandy.core.data:Polygon;flash.display:Sprite' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
   Renders the polygon dress in this material.
      <p>Implemented by sub classes.</p>
      ]]></description>
<see><![CDATA[sandy.core.Scene3D
   ]]></see>
<see><![CDATA[sandy.core.data.Polygon
   ]]></see>
</method>
<method name='renderSprite' fullname='sandy.materials:Material/renderSprite' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oSprite;p_oMaterial;p_oScene' param_types='sandy.core.scenegraph:Sprite2D;sandy.materials:Material;sandy.core:Scene3D' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
   Renders the sprite dress in this material.
      <p>Basically only needed to apply attributes to sprites</p>
      ]]></description>
<see><![CDATA[sandy.core.scenegraph.Sprite2D
   ]]></see>
<see><![CDATA[sandy.core.Scene3D
   ]]></see>
</method>
<method name='unlink' fullname='sandy.materials:Material/unlink' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oPolygon' param_types='sandy.core.data:Polygon' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   Calls unlink method of the MaterialAttributes associated with this material.
      ]]></description>
<see><![CDATA[sandy.materials.attributes.MaterialAttributes#unlink()
   ]]></see>
</method>
<method name='unlinkAll' fullname='sandy.materials:Material/unlinkAll' isStatic='false' isFinal='false' isOverride='false'  result_type='Array'>
<description><![CDATA[
   Unlink all the non used polygons
   ]]></description>
</method>
<method name='filters' fullname='sandy.materials:Material/filters/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Array'>
<description><![CDATA[
   The array of filters for this material.
   
   <p>You use this property to add an array of filters you want to apply to this material<br>
   To remove the filters, just assign an empty array.</p>
   ]]></description>
</method>
<method name='flags' fullname='sandy.materials:Material/flags/get' isStatic='false' isFinal='false' isOverride='false'  result_type='uint'>
<description><![CDATA[
   Contains specific material flags.
   ]]></description>
</method>
<method name='id' fullname='sandy.materials:Material/id/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
<description><![CDATA[
   The unique id of this material.
   ]]></description>
</method>
<method name='modified' fullname='sandy.materials:Material/modified/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
   The modified state of this material.
      <p>true if this material or its line attributes were modified since last rendered, false otherwise.</p> 
   ]]></description>
</method>
<method name='type' fullname='sandy.materials:Material/type/get' isStatic='false' isFinal='false' isOverride='false'  result_type='sandy.materials:MaterialType'>
<description><![CDATA[
   The material type of this material.
   
   ]]></description>
<default><![CDATA[MaterialType.NONE
      ]]></default>
<see><![CDATA[MaterialType
   ]]></see>
</method>
<method name='filters' fullname='sandy.materials:Material/filters/set' isStatic='false' isFinal='false' isOverride='false'  param_names='a' param_types='Array' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</method>
<field name='_ID_' fullname='sandy.materials:Material/private:_ID_' type='Number' isStatic='true' isConst='false' defaultValue='0' >
</field>
<field name='_filters' fullname='sandy.materials:Material/private:_filters' type='Array' isStatic='false' isConst='false' >
</field>
<field name='_id' fullname='sandy.materials:Material/private:_id' type='Number' isStatic='false' isConst='false' >
</field>
<field name='_useLight' fullname='sandy.materials:Material/protected:_useLight' type='Boolean' isStatic='false' isConst='false' defaultValue='false' >
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='attributes' fullname='sandy.materials:Material/attributes' type='sandy.materials.attributes:MaterialAttributes' isStatic='false' isConst='false' >
<description><![CDATA[
   The attributes of this material.
   ]]></description>
</field>
<field name='autoDispose' fullname='sandy.materials:Material/autoDispose' type='Boolean' isStatic='false' isConst='false' defaultValue='true' >
<description><![CDATA[
   Specifies if the material can automatically be disposed when unused
   Default value is to true
   ]]></description>
</field>
<field name='lastBegin' fullname='sandy.materials:Material/private:lastBegin' type='int' isStatic='false' isConst='false' defaultValue='0' >
</field>
<field name='lastFinish' fullname='sandy.materials:Material/private:lastFinish' type='int' isStatic='false' isConst='false' defaultValue='0' >
</field>
<field name='lightingEnable' fullname='sandy.materials:Material/lightingEnable' type='Boolean' isStatic='false' isConst='false' defaultValue='false' >
<description><![CDATA[
   Specifies if the material can receive light and have light attributes applied to it.
   Can be useful to rapidly disable light on the object when unneeded.
   ]]></description>
</field>
<field name='m_bModified' fullname='sandy.materials:Material/protected:m_bModified' type='Boolean' isStatic='false' isConst='false' >
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='m_nFlags' fullname='sandy.materials:Material/protected:m_nFlags' type='uint' isStatic='false' isConst='false' defaultValue='0' >
<description><![CDATA[
   DO NOT TOUCH THIS PROPERTY UNLESS YOU PERFECTLY KNOW WHAT YOU ARE DOING.
   this flag property contains the specific material flags.
      ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='m_nRefCounting' fullname='sandy.materials:Material/protected:m_nRefCounting' type='int' isStatic='false' isConst='false' >
</field>
<field name='m_oPolygonMap' fullname='sandy.materials:Material/protected:m_oPolygonMap' type='flash.utils:Dictionary' isStatic='false' isConst='false' >
</field>
<field name='m_oType' fullname='sandy.materials:Material/protected:m_oType' type='sandy.materials:MaterialType' isStatic='false' isConst='false' >
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='repeat' fullname='sandy.materials:Material/repeat' type='Boolean' isStatic='false' isConst='false' defaultValue='true' >
<description><![CDATA[
   The repeat property.
   
   This affects the way textured materials are mapped for U or V out of 0-1 range.
   ]]></description>
</field>
<field name='useVertexNormal' fullname='sandy.materials:Material/useVertexNormal' type='Boolean' isStatic='false' isConst='false' defaultValue='false' >
<description><![CDATA[
   Specify if the material use the vertex normal information.
   
   ]]></description>
<default><![CDATA[false
   ]]></default>
</field>
<classRec name='WireFrameMaterial' fullname='sandy.materials:WireFrameMaterial' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\materials\WireFrameMaterial.as' namespace='sandy.materials' access='public' baseclass='sandy.materials:Material' isFinal='true' isDynamic='false' >
<description><![CDATA[
  Displays the faces of a 3D shape as a wire frame.
    <p>This material is used to represent a kind a naked view of a Shape3D. It shows all the edges
  with a certain thickness, color and alpha that you can specify inside the constructor</p>
    ]]></description>
<author><![CDATA[ Thomas PFEIFFER - kiroukou
  ]]></author>
<version><![CDATA[ 3.1
  ]]></version>
<date><![CDATA[  26.06.2007
  ]]></date>
</classRec>
<method name='WireFrameMaterial' fullname='sandy.materials:WireFrameMaterial/WireFrameMaterial' isStatic='false' isFinal='false' isOverride='false'  param_names='p_nThickness;p_nColor;p_nAlpha;p_oAttr' param_types='uint;uint;Number;sandy.materials.attributes:MaterialAttributes' param_defaults='1;0;1;null' result_type='*'>
<description><![CDATA[
   Creates a new WireFrameMaterial.
      ]]></description>
<param><![CDATA[p_nThickness The thickness of the lines.
   ]]></param>
<param><![CDATA[p_nColor  The color of the lines.
   ]]></param>
<param><![CDATA[p_nAlpha  The alpha transparency value of the material.
   ]]></param>
<param><![CDATA[p_oAttr  The attributes for this material.
      ]]></param>
<see><![CDATA[sandy.materials.attributes.MaterialAttributes
   ]]></see>
</method>
<method name='renderPolygon' fullname='sandy.materials:WireFrameMaterial/renderPolygon' isStatic='false' isFinal='false' isOverride='true'  param_names='p_oScene;p_oPolygon;p_mcContainer' param_types='sandy.core:Scene3D;sandy.core.data:Polygon;flash.display:Sprite' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</method>
<classRec name='BitmapMaterial' fullname='sandy.materials:BitmapMaterial' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\materials\BitmapMaterial.as' namespace='sandy.materials' access='public' baseclass='sandy.materials:Material' interfaces='sandy.materials:IAlphaMaterial' isFinal='false' isDynamic='false' >
<description><![CDATA[
  Displays a bitmap on the faces of a 3D shape.
    ]]></description>
<author><![CDATA[ Thomas Pfeiffer - kiroukou
  ]]></author>
<author><![CDATA[ Xavier Martin - zeflasher - transparency managment
  ]]></author>
<author><![CDATA[ Makc for first renderRect implementation
  ]]></author>
<author><![CDATA[ James Dahl - optimization in renderRec method
  ]]></author>
<version><![CDATA[ 3.1
  ]]></version>
<date><![CDATA[  26.07.2007
  ]]></date>
</classRec>
<method name='BitmapMaterial' fullname='sandy.materials:BitmapMaterial/BitmapMaterial' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oTexture;p_oAttr;p_nPrecision' param_types='flash.display:BitmapData;sandy.materials.attributes:MaterialAttributes;uint' param_defaults='null;null;0' result_type='*'>
<description><![CDATA[
   Creates a new BitmapMaterial.
   <p>Please note that we use internally a copy of the constructor bitmapdata. That means in case you need to access this bitmapdata, you can't just use the same reference
   but you shall use the BitmapMaterial#texture getter property to make it work.</p>
      ]]></description>
<param><![CDATA[p_oTexture The bitmapdata for this material.
   ]]></param>
<param><![CDATA[p_oAttr  The attributes for this material.
   ]]></param>
<param><![CDATA[p_nPrecision The precision of this material. Using a precision with 0 makes the material behave as before. Then 1 as precision is very high and requires a lot of computation but proceed a the best perpective mapping correction. Bigger values are less CPU intensive but also less accurate. Usually a value of 5 is enough.
      ]]></param>
<see><![CDATA[sandy.materials.attributes.MaterialAttributes
   ]]></see>
</method>
<method name='_createTextureMatrix' fullname='sandy.materials:BitmapMaterial/protected:_createTextureMatrix' isStatic='false' isFinal='false' isOverride='false'  param_names='p_nU0;p_nV0;p_nU1;p_nV1;p_nU2;p_nV2' param_types='Number;Number;Number;Number;Number;Number' param_defaults='undefined;undefined;undefined;undefined;undefined;undefined' result_type='flash.geom:Matrix'>
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='dispose' fullname='sandy.materials:BitmapMaterial/dispose' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
</method>
<method name='init' fullname='sandy.materials:BitmapMaterial/init' isStatic='false' isFinal='false' isOverride='true'  param_names='p_oPolygon' param_types='sandy.core.data:Polygon' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   ]]></description>
<param><![CDATA[p_oPolygon The face dressed by this material
   ]]></param>
</method>
<method name='renderPolygon' fullname='sandy.materials:BitmapMaterial/renderPolygon' isStatic='false' isFinal='false' isOverride='true'  param_names='p_oScene;p_oPolygon;p_mcContainer' param_types='sandy.core:Scene3D;sandy.core.data:Polygon;flash.display:Sprite' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='renderRec' fullname='sandy.materials:BitmapMaterial/protected:renderRec' isStatic='false' isFinal='false' isOverride='false'  param_names='ta;tb;tc;td;tx;ty;ax;ay;az;bx;by;bz;cx;cy;cz' param_types='Number;Number;Number;Number;Number;Number;Number;Number;Number;Number;Number;Number;Number;Number;Number' param_defaults='undefined;undefined;undefined;undefined;undefined;undefined;undefined;undefined;undefined;undefined;undefined;undefined;undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='renderTriangle' fullname='sandy.materials:BitmapMaterial/protected:renderTriangle' isStatic='false' isFinal='false' isOverride='false'  param_names='a;b;c;d;tx;ty;v0x;v0y;v1x;v1y;v2x;v2y' param_types='Number;Number;Number;Number;Number;Number;Number;Number;Number;Number;Number;Number' param_defaults='undefined;undefined;undefined;undefined;undefined;undefined;undefined;undefined;undefined;undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='setTiling' fullname='sandy.materials:BitmapMaterial/setTiling' isStatic='false' isFinal='false' isOverride='false'  param_names='p_nW;p_nH;p_nU;p_nV' param_types='Number;Number;Number;Number' param_defaults='undefined;undefined;0;0' result_type='void'>
<description><![CDATA[
   Sets texture tiling and optional offset. Tiling is applied first.
   ]]></description>
</method>
<method name='setTransparency' fullname='sandy.materials:BitmapMaterial/setTransparency' isStatic='false' isFinal='false' isOverride='false'  param_names='p_nValue' param_types='Number' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   Changes the transparency of the texture.
      <p>The passed value is the percentage of opacity. Note that in order for this to work with animated texture,
   you need set material transparency every time after new texture frame is rendered.</p>
      ]]></description>
<param><![CDATA[p_nValue  A value between 0 and 1. (automatically constrained)
   ]]></param>
</method>
<method name='toString' fullname='sandy.materials:BitmapMaterial/toString' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[
   Returns a string representation of this object.
      ]]></description>
<return><![CDATA[The fully qualified name of this object.
   ]]></return>
</method>
<method name='unlink' fullname='sandy.materials:BitmapMaterial/unlink' isStatic='false' isFinal='false' isOverride='true'  param_names='p_oPolygon' param_types='sandy.core.data:Polygon' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='alpha' fullname='sandy.materials:BitmapMaterial/alpha/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
<description><![CDATA[
   Indicates the alpha transparency value of the material. Valid values are 0 (fully transparent) to 1 (fully opaque).
      ]]></description>
<default><![CDATA[1.0
   ]]></default>
<see><![CDATA[setTransparency()
   ]]></see>
</method>
<method name='texture' fullname='sandy.materials:BitmapMaterial/texture/get' isStatic='false' isFinal='false' isOverride='false'  result_type='flash.display:BitmapData'>
<description><![CDATA[
   The texture ( bitmap ) of this material.
   ]]></description>
</method>
<method name='alpha' fullname='sandy.materials:BitmapMaterial/alpha/set' isStatic='false' isFinal='false' isOverride='false'  param_names='p_nValue' param_types='Number' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='texture' fullname='sandy.materials:BitmapMaterial/texture/set' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oTexture' param_types='flash.display:BitmapData' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</method>
<field name='forceUpdate' fullname='sandy.materials:BitmapMaterial/forceUpdate' type='Boolean' isStatic='false' isConst='false' defaultValue='false' >
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='graphics' fullname='sandy.materials:BitmapMaterial/sandy.materials:graphics' type='flash.display:Graphics' isStatic='false' isConst='false' >
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='m_nAlpha' fullname='sandy.materials:BitmapMaterial/private:m_nAlpha' type='Number' isStatic='false' isConst='false' defaultValue='1.0' >
</field>
<field name='m_nHeight' fullname='sandy.materials:BitmapMaterial/private:m_nHeight' type='Number' isStatic='false' isConst='false' >
</field>
<field name='m_nInvHeight' fullname='sandy.materials:BitmapMaterial/private:m_nInvHeight' type='Number' isStatic='false' isConst='false' >
</field>
<field name='m_nInvWidth' fullname='sandy.materials:BitmapMaterial/private:m_nInvWidth' type='Number' isStatic='false' isConst='false' >
</field>
<field name='m_nRecLevel' fullname='sandy.materials:BitmapMaterial/private:m_nRecLevel' type='int' isStatic='false' isConst='false' defaultValue='0' >
</field>
<field name='m_nWidth' fullname='sandy.materials:BitmapMaterial/private:m_nWidth' type='Number' isStatic='false' isConst='false' >
</field>
<field name='m_oColorTransform' fullname='sandy.materials:BitmapMaterial/private:m_oColorTransform' type='flash.geom:ColorTransform' isStatic='false' isConst='false' defaultValue='' >
</field>
<field name='m_oDrawMatrix' fullname='sandy.materials:BitmapMaterial/private:m_oDrawMatrix' type='flash.geom:Matrix' isStatic='false' isConst='false' defaultValue='' >
</field>
<field name='m_oOffset' fullname='sandy.materials:BitmapMaterial/protected:m_oOffset' type='flash.geom:Point' isStatic='false' isConst='true' defaultValue='' >
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='m_oPoint' fullname='sandy.materials:BitmapMaterial/protected:m_oPoint' type='flash.geom:Point' isStatic='false' isConst='false' defaultValue='' >
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='m_oPolygonMatrixMap' fullname='sandy.materials:BitmapMaterial/protected:m_oPolygonMatrixMap' type='flash.utils:Dictionary' isStatic='false' isConst='false' >
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='m_oTexture' fullname='sandy.materials:BitmapMaterial/protected:m_oTexture' type='flash.display:BitmapData' isStatic='false' isConst='false' >
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='m_oTextureClone' fullname='sandy.materials:BitmapMaterial/private:m_oTextureClone' type='flash.display:BitmapData' isStatic='false' isConst='false' >
</field>
<field name='m_oTiling' fullname='sandy.materials:BitmapMaterial/protected:m_oTiling' type='flash.geom:Point' isStatic='false' isConst='true' defaultValue='' >
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='map' fullname='sandy.materials:BitmapMaterial/sandy.materials:map' type='flash.geom:Matrix' isStatic='false' isConst='false' defaultValue='' >
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='matrix' fullname='sandy.materials:BitmapMaterial/protected:matrix' type='flash.geom:Matrix' isStatic='false' isConst='false' defaultValue='' >
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='maxRecurssionDepth' fullname='sandy.materials:BitmapMaterial/maxRecurssionDepth' type='uint' isStatic='false' isConst='false' defaultValue='5' >
<description><![CDATA[
   Maximum  recurssion depth when using precision > 1 (which enables the perspective correction).
   The bigger the number is, the more accurate the result will be.
   Try to change this value to fits your needs to obtain the best performance.
   ]]></description>
</field>
<field name='polygon' fullname='sandy.materials:BitmapMaterial/sandy.materials:polygon' type='sandy.core.data:Polygon' isStatic='false' isConst='false' >
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='precision' fullname='sandy.materials:BitmapMaterial/precision' type='uint' isStatic='false' isConst='false' defaultValue='0' >
<description><![CDATA[
   Precision of the bitmap mapping.
   This material uses an affine linear mapping. It results in a lack of accuracy at rendering time when the surface to draw is too big.
   One usual solution is to augment the number of polygon, but the performance cost can be quite big.
   Another solution is to change the precision property value. The lower the value, the more accurate the perspective correction is.
   To disable the perspective correction, set this property to zero, which is also the default value
   If you use the precision to solve the distortion issue, you can reduce the primitives quality (except if you are experiencing some sorting issues)
   ]]></description>
</field>
<field name='smooth' fullname='sandy.materials:BitmapMaterial/smooth' type='Boolean' isStatic='false' isConst='false' defaultValue='false' >
<description><![CDATA[
   This property enables smooth bitmap rendering when set to true.
   The default value is set to false to have the best performance first.
   Enable this property have a performance impact, use it warefully
   ]]></description>
</field>
<classRec name='ColorMaterial' fullname='sandy.materials:ColorMaterial' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\materials\ColorMaterial.as' namespace='sandy.materials' access='public' baseclass='sandy.materials:Material' interfaces='sandy.materials:IAlphaMaterial' isFinal='true' isDynamic='false' >
<description><![CDATA[
  Displays a color with on the faces of a 3D shape.
    <p>Used to show colored faces, possibly with lines at the edges of the faces.</p>
    ]]></description>
<author><![CDATA[ Thomas Pfeiffer - kiroukou
  ]]></author>
<version><![CDATA[ 3.1
  ]]></version>
<date><![CDATA[  26.07.2007
  ]]></date>
</classRec>
<method name='ColorMaterial' fullname='sandy.materials:ColorMaterial/ColorMaterial' isStatic='false' isFinal='false' isOverride='false'  param_names='p_nColor;p_nAlpha;p_oAttr' param_types='uint;Number;sandy.materials.attributes:MaterialAttributes' param_defaults='0x00;1;null' result_type='*'>
<description><![CDATA[
   Creates a new ColorMaterial.
      ]]></description>
<param><![CDATA[p_nColor  The color for this material in hexadecimal notation.
   ]]></param>
<param><![CDATA[p_nAlpha The alpha transparency value of the material.
   ]]></param>
<param><![CDATA[p_oAttr The attributes for this material.
      ]]></param>
<see><![CDATA[sandy.materials.attributes.MaterialAttributes
   ]]></see>
</method>
<method name='renderPolygon' fullname='sandy.materials:ColorMaterial/renderPolygon' isStatic='false' isFinal='false' isOverride='true'  param_names='p_oScene;p_oPolygon;p_mcContainer' param_types='sandy.core:Scene3D;sandy.core.data:Polygon;flash.display:Sprite' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='alpha' fullname='sandy.materials:ColorMaterial/alpha/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
<description><![CDATA[
   Indicates the alpha transparency value of the material. Valid values are 0 (fully transparent) to 1 (fully opaque).
      ]]></description>
<default><![CDATA[1.0
   ]]></default>
</method>
<method name='color' fullname='sandy.materials:ColorMaterial/color/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
<description><![CDATA[
   The color of this material.
      ]]></description>
<default><![CDATA[0x00
   ]]></default>
</method>
<method name='alpha' fullname='sandy.materials:ColorMaterial/alpha/set' isStatic='false' isFinal='false' isOverride='false'  param_names='p_nValue' param_types='Number' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='color' fullname='sandy.materials:ColorMaterial/color/set' isStatic='false' isFinal='false' isOverride='false'  param_names='p_nValue' param_types='Number' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</method>
<field name='m_nAlpha' fullname='sandy.materials:ColorMaterial/private:m_nAlpha' type='Number' isStatic='false' isConst='false' >
</field>
<field name='m_nColor' fullname='sandy.materials:ColorMaterial/private:m_nColor' type='Number' isStatic='false' isConst='false' >
</field>
<classRec name='MovieMaterial' fullname='sandy.materials:MovieMaterial' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\materials\MovieMaterial.as' namespace='sandy.materials' access='public' baseclass='sandy.materials:BitmapMaterial' isFinal='false' isDynamic='false' >
<description><![CDATA[
  Displays a MovieClip on the faces of a 3D shape.
    <p>Based on the AS2 class VideoSkin made by kiroukou and zeusprod</p>
    ]]></description>
<author><![CDATA[ Xavier Martin - zeflasher
  ]]></author>
<author><![CDATA[ Thomas PFEIFFER - kiroukou
  ]]></author>
<since><![CDATA[ 1.0
  ]]></since>
<version><![CDATA[ 3.1
      this should be add directly in the bitmap material I reckon
  ]]></version>
<date><![CDATA[  11.11.2007
  ]]></date>
</classRec>
<method name='MovieMaterial' fullname='sandy.materials:MovieMaterial/MovieMaterial' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oMovie;p_nUpdateMS;p_oAttr;p_bRemoveTransparentBorder;p_nHeight;p_nWidth' param_types='flash.display:Sprite;uint;sandy.materials.attributes:MaterialAttributes;Boolean;Number;Number' param_defaults='undefined;40;null;false;0;0' result_type='*'>
<description><![CDATA[
   Creates a new MovieMaterial.
      <p>The MovieClip used for the material may contain animation.<br/>
   It is converted to a bitmap to give it a perspective distortion.<br/>
   To see the animation the bitmap has to be recreated from the MovieClip on a regular basis.</p>
      ]]></description>
<param><![CDATA[p_oMovie  The Movieclip to be shown by this material.
   ]]></param>
<param><![CDATA[p_nUpdateMS The update interval.
   ]]></param>
<param><![CDATA[p_oAttr  The material attributes.
   ]]></param>
<param><![CDATA[p_bRemoveTransparentBorder Remove the transparent border.
   ]]></param>
<param><![CDATA[p_nWidth  Desired width ( chunk the movieclip )
   ]]></param>
<param><![CDATA[p_nHeight  Desired height ( chunk the movieclip )
      ]]></param>
<see><![CDATA[sandy.materials.attributes.MaterialAttributes
   ]]></see>
</method>
<method name='dispose' fullname='sandy.materials:MovieMaterial/dispose' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
</method>
<method name='renderPolygon' fullname='sandy.materials:MovieMaterial/renderPolygon' isStatic='false' isFinal='false' isOverride='true'  param_names='p_oScene;p_oPolygon;p_mcContainer' param_types='sandy.core:Scene3D;sandy.core.data:Polygon;flash.display:Sprite' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='setTransparency' fullname='sandy.materials:MovieMaterial/setTransparency' isStatic='false' isFinal='false' isOverride='true'  param_names='p_nValue' param_types='Number' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='start' fullname='sandy.materials:MovieMaterial/start' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
   Call this method when you want to start the material update.
   This is automatically called at the material creation so basically it is used only when the MovieMaterial::stop() method has been called
   ]]></description>
</method>
<method name='stop' fullname='sandy.materials:MovieMaterial/stop' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
   Call this method is case you would like to stop the automatic MovieMaterial texture update.
   ]]></description>
</method>
<method name='update' fullname='sandy.materials:MovieMaterial/update' isStatic='false' isFinal='false' isOverride='false'  param_names='p_eEvent' param_types='flash.events:Event' param_defaults='null' result_type='void'>
<description><![CDATA[
   Updates this material each internal timer cycle.
   ]]></description>
</method>
<method name='movie' fullname='sandy.materials:MovieMaterial/movie/get' isStatic='false' isFinal='false' isOverride='false'  result_type='flash.display:Sprite'>
<description><![CDATA[
   Get the sprite used for the material.
   ]]></description>
</method>
<field name='DEFAULT_FILL_COLOR' fullname='sandy.materials:MovieMaterial/DEFAULT_FILL_COLOR' type='uint' isStatic='true' isConst='true' defaultValue='0' >
<description><![CDATA[
   Default color used to draw the bitmapdata content.
   In case you need a specific color, change this value at your application initialization.
   ]]></description>
</field>
<field name='m_bUpdate' fullname='sandy.materials:MovieMaterial/private:m_bUpdate' type='Boolean' isStatic='false' isConst='false' >
</field>
<field name='m_oAlpha' fullname='sandy.materials:MovieMaterial/private:m_oAlpha' type='flash.geom:ColorTransform' isStatic='false' isConst='false' >
</field>
<field name='m_oMovie' fullname='sandy.materials:MovieMaterial/private:m_oMovie' type='flash.display:Sprite' isStatic='false' isConst='false' >
</field>
<field name='m_oTimer' fullname='sandy.materials:MovieMaterial/private:m_oTimer' type='flash.utils:Timer' isStatic='false' isConst='false' >
</field>
<classRec name='VideoMaterial' fullname='sandy.materials:VideoMaterial' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\materials\VideoMaterial.as' namespace='sandy.materials' access='public' baseclass='sandy.materials:BitmapMaterial' isFinal='false' isDynamic='false' >
<description><![CDATA[
  Displays a Flash video ( FLV ) on the faces of a 3D shape.
    <p>Based on the AS2 class VideoSkin made by kiroukou and zeusprod</p>
    ]]></description>
<author><![CDATA[ Xavier Martin - zeflasher
  ]]></author>
<author><![CDATA[ Thomas PFEIFFER - kiroukou
  ]]></author>
<since><![CDATA[ 1.0
  ]]></since>
<version><![CDATA[ 3.1
  ]]></version>
<date><![CDATA[  26.06.2007
  ]]></date>
</classRec>
<method name='VideoMaterial' fullname='sandy.materials:VideoMaterial/VideoMaterial' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oVideo;p_nUpdateMS;p_oAttr' param_types='flash.media:Video;uint;sandy.materials.attributes:MaterialAttributes' param_defaults='undefined;40;null' result_type='*'>
<description><![CDATA[
   Creates a new VideoMaterial.
      <p>The video is converted to a bitmap to give it a perspective distortion.<br/>
   To see the animation, the bitmap has to be recreated from the video on a regular basis.</p>
      ]]></description>
<param><![CDATA[p_oVideo  The video to be shown by this material.
   ]]></param>
<param><![CDATA[p_nUpdateMS The update interval.
   ]]></param>
<param><![CDATA[p_oAttr  The material attributes.
      ]]></param>
<see><![CDATA[sandy.materials.attributes.MaterialAttributes
   ]]></see>
</method>
<method name='dispose' fullname='sandy.materials:VideoMaterial/dispose' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
</method>
<method name='renderPolygon' fullname='sandy.materials:VideoMaterial/renderPolygon' isStatic='false' isFinal='false' isOverride='true'  param_names='p_oScene;p_oPolygon;p_mcContainer' param_types='sandy.core:Scene3D;sandy.core.data:Polygon;flash.display:Sprite' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='setTransparency' fullname='sandy.materials:VideoMaterial/setTransparency' isStatic='false' isFinal='false' isOverride='true'  param_names='p_nValue' param_types='Number' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='start' fullname='sandy.materials:VideoMaterial/start' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
   Call this method when you want to start the material update.
   This is automatically called at the material creation so basically it is used only when the VideoMaterial::stop() method has been called
   ]]></description>
</method>
<method name='stop' fullname='sandy.materials:VideoMaterial/stop' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
   Call this method is case you would like to stop the automatic video material graphics update.
   ]]></description>
</method>
<method name='update' fullname='sandy.materials:VideoMaterial/update' isStatic='false' isFinal='false' isOverride='false'  param_names='p_eEvent' param_types='flash.events:TimerEvent' param_defaults='null' result_type='void'>
<description><![CDATA[
   Updates this material each internal timer cycle.
   ]]></description>
</method>
<field name='DEFAULT_FILL_COLOR' fullname='sandy.materials:VideoMaterial/DEFAULT_FILL_COLOR' type='uint' isStatic='true' isConst='true' defaultValue='0' >
<description><![CDATA[
   Default color used to draw the bitmapdata content.
   In case you need a specific color, change this value at your application initialization.
   ]]></description>
</field>
<field name='m_bUpdate' fullname='sandy.materials:VideoMaterial/private:m_bUpdate' type='Boolean' isStatic='false' isConst='false' >
</field>
<field name='m_oAlpha' fullname='sandy.materials:VideoMaterial/private:m_oAlpha' type='flash.geom:ColorTransform' isStatic='false' isConst='false' >
</field>
<field name='m_oTimer' fullname='sandy.materials:VideoMaterial/private:m_oTimer' type='flash.utils:Timer' isStatic='false' isConst='false' >
</field>
<field name='m_oVideo' fullname='sandy.materials:VideoMaterial/private:m_oVideo' type='flash.media:Video' isStatic='false' isConst='false' >
</field>
<classRec name='CullingState' fullname='sandy.view:CullingState' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\view\CullingState.as' namespace='sandy.view' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
  Used to identify the culling state of an object.
    <p>A 3D object can be completely or partly inside the frustum of the camera,
  or completely outside of it.</p>
    ]]></description>
<author><![CDATA[ Thomas Pfeiffer - kiroukou
  ]]></author>
<version><![CDATA[ 3.1
  ]]></version>
<date><![CDATA[  26.07.2007
  ]]></date>
</classRec>
<method name='CullingState' fullname='sandy.view:CullingState/CullingState' isStatic='false' isFinal='false' isOverride='false'  param_names='p_sState' param_types='String' param_defaults='undefined' result_type='*'>
<description><![CDATA[
   Sets the value of this culling state.
   ]]></description>
</method>
<method name='toString' fullname='sandy.view:CullingState/toString' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[
   Returns the string representation of the CullingState object.
   ]]></description>
</method>
<field name='INSIDE' fullname='sandy.view:CullingState/INSIDE' type='sandy.view:CullingState' isStatic='true' isConst='true' defaultValue='' >
<description><![CDATA[
   Specifies that the object completely inside the frustum and should be rendered.
   ]]></description>
</field>
<field name='INTERSECT' fullname='sandy.view:CullingState/INTERSECT' type='sandy.view:CullingState' isStatic='true' isConst='true' defaultValue='' >
<description><![CDATA[
   Specifies that the object intersects one or more planes of the frustum and should be partly rendered.
   ]]></description>
</field>
<field name='OUTSIDE' fullname='sandy.view:CullingState/OUTSIDE' type='sandy.view:CullingState' isStatic='true' isConst='true' defaultValue='' >
<description><![CDATA[
   Specifies that the object completely outside the frustum and should not be rendered.
   ]]></description>
</field>
<field name='m_sState' fullname='sandy.view:CullingState/private:m_sState' type='String' isStatic='false' isConst='false' >
</field>
<classRec name='ViewPort' fullname='sandy.view:ViewPort' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\view\ViewPort.as' namespace='sandy.view' access='public' baseclass='Object' isFinal='true' isDynamic='false' >
<description><![CDATA[
  The view port represents the rendered screen.
    <p>This is the area where the view of the camera is projected.<br/>
  It may be the whole or only a part of the stage</p>
    ]]></description>
<author><![CDATA[ Thomas Pfeiffer - kiroukou
  ]]></author>
<author><![CDATA[ James Dahl - optimization with bitwise and int type.
  ]]></author>
<version><![CDATA[ 3.1
  ]]></version>
<date><![CDATA[  26.07.2007
  ]]></date>
</classRec>
<method name='ViewPort' fullname='sandy.view:ViewPort/ViewPort' isStatic='false' isFinal='false' isOverride='false'  param_names='p_nW;p_nH' param_types='Number;Number' param_defaults='undefined;undefined' result_type='*'>
<description><![CDATA[
   Creates a new ViewPort.
      ]]></description>
<param><![CDATA[p_nW  The width of the rendered screen.
   ]]></param>
<param><![CDATA[p_nH  The height of the rendered screen.
   ]]></param>
</method>
<method name='update' fullname='sandy.view:ViewPort/update' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
   Updates the view port.
   ]]></description>
</method>
<method name='height' fullname='sandy.view:ViewPort/height/get' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
   The height of the view port.
   ]]></description>
</method>
<method name='height2' fullname='sandy.view:ViewPort/height2/get' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
   Half the height of the view port. Used to center Camera3D.
   ]]></description>
</method>
<method name='ratio' fullname='sandy.view:ViewPort/ratio/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
<description><![CDATA[
   The width/height ratio of the view port.
   ]]></description>
</method>
<method name='width' fullname='sandy.view:ViewPort/width/get' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
   The width of the view port.
   ]]></description>
</method>
<method name='width2' fullname='sandy.view:ViewPort/width2/get' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
   Half the width of the view port. Used to center Camera3D.
   ]]></description>
</method>
<method name='height' fullname='sandy.view:ViewPort/height/set' isStatic='false' isFinal='false' isOverride='false'  param_names='p_nValue' param_types='int' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='width' fullname='sandy.view:ViewPort/width/set' isStatic='false' isFinal='false' isOverride='false'  param_names='p_nValue' param_types='int' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</method>
<field name='hasChanged' fullname='sandy.view:ViewPort/hasChanged' type='Boolean' isStatic='false' isConst='false' defaultValue='false' >
<description><![CDATA[
   Flag which specifies if the view port dimension has changed.
   ]]></description>
</field>
<field name='m_nH' fullname='sandy.view:ViewPort/private:m_nH' type='int' isStatic='false' isConst='false' defaultValue='0' >
</field>
<field name='m_nH2' fullname='sandy.view:ViewPort/private:m_nH2' type='int' isStatic='false' isConst='false' defaultValue='0' >
</field>
<field name='m_nRatio' fullname='sandy.view:ViewPort/private:m_nRatio' type='Number' isStatic='false' isConst='false' defaultValue='0' >
</field>
<field name='m_nW' fullname='sandy.view:ViewPort/private:m_nW' type='int' isStatic='false' isConst='false' defaultValue='0' >
</field>
<field name='m_nW2' fullname='sandy.view:ViewPort/private:m_nW2' type='int' isStatic='false' isConst='false' defaultValue='0' >
</field>
<field name='offset' fullname='sandy.view:ViewPort/offset' type='flash.geom:Point' isStatic='false' isConst='true' defaultValue='' >
<description><![CDATA[
   A point representing the offset to change the view port center.
   <p>If you set myCamera.viewport.offset.y to 100, everything drawn at the screen will be moved 100 pixels down (due to Flash vertical axis convention).</p>
   ]]></description>
</field>
<classRec name='Frustum' fullname='sandy.view:Frustum' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\view\Frustum.as' namespace='sandy.view' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
  Used to create the frustum of the camera.
  
  <p>The frustum is volume used to control a geometrical object, such as a box, a sphere, or a point
  can be seen by the camera, and thus should be rendered.</p> 
  <p>Clipping of objects and polygons is performed against the frustum surfaces, as well as the near and far planes.</p>
  
  ]]></description>
<author><![CDATA[ Thomas Pfeiffer - kiroukou
  ]]></author>
<version><![CDATA[ 3.1
  ]]></version>
<date><![CDATA[  26.07.2007
  ]]></date>
</classRec>
<method name='Frustum' fullname='sandy.view:Frustum/Frustum' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
   Creates a frustum for the camera.
      <p>This constructor only creates the necessay data structures</p>
   ]]></description>
</method>
<method name='boxInFrustum' fullname='sandy.view:Frustum/boxInFrustum' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oBox' param_types='sandy.bounds:BBox' param_defaults='undefined' result_type='sandy.view:CullingState'>
<description><![CDATA[
   Returns the culling state for the passed bounding box.
   
   <p>The method tests if the bounding box is within the frustum volume or not.
   The returned culling state is either Frustum.INSIDE, Frustum.OUTSIDE or Frustum.INTERSECT</p>
      ]]></description>
<param><![CDATA[p_oS The box to test.
      ]]></param>
<return><![CDATA[The culling state of the box.
   ]]></return>
</method>
<method name='clipFrontPlane' fullname='sandy.view:Frustum/clipFrontPlane' isStatic='false' isFinal='false' isOverride='false'  param_names='p_aCvert;p_aUVCoords' param_types='Array;Array' param_defaults='undefined;undefined' result_type='Boolean'>
<description><![CDATA[
   Clips a polygon against the front frustum plane.
      ]]></description>
<param><![CDATA[p_aCvert  Vertices of the polygon.
   ]]></param>
<param><![CDATA[p_aUVCoords UV coordiantes of the polygon.
   ]]></param>
</method>
<method name='clipFrustum' fullname='sandy.view:Frustum/clipFrustum' isStatic='false' isFinal='false' isOverride='false'  param_names='p_aCvert;p_aUVCoords' param_types='Array;Array' param_defaults='undefined;undefined' result_type='Boolean'>
<description><![CDATA[
   Clips a polygon against the frustum planes.
      ]]></description>
<param><![CDATA[p_aCvert  Vertices of the polygon.
   ]]></param>
<param><![CDATA[p_aUVCoords UV coordiantes of the polygon.
   ]]></param>
</method>
<method name='clipLineFrontPlane' fullname='sandy.view:Frustum/clipLineFrontPlane' isStatic='false' isFinal='false' isOverride='false'  param_names='p_aCvert' param_types='Array' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
   Clip the given vertex and UVCoords arrays against the frustum front plane.
      ]]></description>
<param><![CDATA[p_aCvert Vertices of the line.
   ]]></param>
</method>
<method name='clipPolygon' fullname='sandy.view:Frustum/clipPolygon' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oPlane;p_aCvert;p_aUVCoords' param_types='sandy.core.data:Plane;Array;Array' param_defaults='undefined;undefined;undefined' result_type='Boolean'>
</method>
<method name='computePlanes' fullname='sandy.view:Frustum/computePlanes' isStatic='false' isFinal='false' isOverride='false'  param_names='p_nAspect;p_nNear;p_nFar;p_nFov' param_types='Number;Number;Number;Number' param_defaults='undefined;undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
   Computes the frustum planes.
   
   ]]></description>
<param><![CDATA[p_nAspect Aspect ration of the camera.
   ]]></param>
<param><![CDATA[p_nNear The distance from the camera to the near clipping plane.
   ]]></param>
<param><![CDATA[p_nFar The distance from the camera to the far clipping plane.
   ]]></param>
<param><![CDATA[p_nFov Vertical field of view of the camera.
   ]]></param>
</method>
<method name='pointInFrustum' fullname='sandy.view:Frustum/pointInFrustum' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oPoint' param_types='sandy.core.data:Point3D' param_defaults='undefined' result_type='sandy.view:CullingState'>
<description><![CDATA[
   Returns the culling state for the passed point.
   
   <p>The method tests if the passed point is within the frustum volume or not.
   The returned culling state is either Frustum.INSIDE or Frustum.OUTSIDE.</p>
      ]]></description>
<param><![CDATA[p_oPoint The point to test.
      ]]></param>
<return><![CDATA[The culling state of the point.
   ]]></return>
</method>
<method name='polygonInFrustum' fullname='sandy.view:Frustum/polygonInFrustum' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oPoly' param_types='sandy.core.data:Polygon' param_defaults='undefined' result_type='sandy.view:CullingState'>
<description><![CDATA[
   Helping function to test a polygon against the frustum
   <p>The method tests if the passed polygon is inside the frustum, outside or intersecting the frustum</p>
   
   ]]></description>
<param><![CDATA[p_oPoly The polygon to test
   
   ]]></param>
<return><![CDATA[The culling state of the polygon
   ]]></return>
</method>
<method name='sphereInFrustum' fullname='sandy.view:Frustum/sphereInFrustum' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oSphere' param_types='sandy.bounds:BSphere' param_defaults='undefined' result_type='sandy.view:CullingState'>
<description><![CDATA[
   Returns the culling state for the passed bounding sphere.
   
   <p>The method tests if the bounding sphere is within the frustum volume or not.
   The returned culling state is either Frustum.INSIDE, Frustum.OUTSIDE or Frustum.INTERSECT</p>
      ]]></description>
<param><![CDATA[p_oSphere The sphere to test.
      ]]></param>
<return><![CDATA[The culling state of the sphere.
   ]]></return>
</method>
<field name='BOTTOM' fullname='sandy.view:Frustum/BOTTOM' type='uint' isStatic='true' isConst='true' defaultValue='5' >
<description><![CDATA[
  Specifies the index of the bottom plane of the frustum in the aPlanes array.
  ]]></description>
</field>
<field name='EPSILON' fullname='sandy.view:Frustum/EPSILON' type='Number' isStatic='true' isConst='true' defaultValue='0.005' >
</field>
<field name='FAR' fullname='sandy.view:Frustum/FAR' type='uint' isStatic='true' isConst='true' defaultValue='0' >
<description><![CDATA[
  Specifies the index of the far plane of the frustum in the aPlanes array.
  ]]></description>
</field>
<field name='INSIDE' fullname='sandy.view:Frustum/INSIDE' type='sandy.view:CullingState' isStatic='true' isConst='true' defaultValue='unknown' >
<description><![CDATA[
  Alias of CullingState.INSIDE.
  ]]></description>
</field>
<field name='INTERSECT' fullname='sandy.view:Frustum/INTERSECT' type='sandy.view:CullingState' isStatic='true' isConst='true' defaultValue='unknown' >
<description><![CDATA[
  Alias of CullingState.INTERSECT.
  ]]></description>
</field>
<field name='LEFT' fullname='sandy.view:Frustum/LEFT' type='uint' isStatic='true' isConst='true' defaultValue='3' >
<description><![CDATA[
  Specifies the index of the left plane of the frustum in the aPlanes array.
  ]]></description>
</field>
<field name='NEAR' fullname='sandy.view:Frustum/NEAR' type='uint' isStatic='true' isConst='true' defaultValue='1' >
<description><![CDATA[
  Specifies the index of the near plane of the frustum in the aPlanes array.
  ]]></description>
</field>
<field name='OUTSIDE' fullname='sandy.view:Frustum/OUTSIDE' type='sandy.view:CullingState' isStatic='true' isConst='true' defaultValue='unknown' >
<description><![CDATA[
  Alias of CullingState.OUTSIDE.
  ]]></description>
</field>
<field name='RIGHT' fullname='sandy.view:Frustum/RIGHT' type='uint' isStatic='true' isConst='true' defaultValue='2' >
<description><![CDATA[
  Specifies the index of the right plane of the frustum in the aPlanes array.
  ]]></description>
</field>
<field name='TOP' fullname='sandy.view:Frustum/TOP' type='uint' isStatic='true' isConst='true' defaultValue='4' >
<description><![CDATA[
  Specifies the index of the top plane of the frustum in the aPlanes array.
  ]]></description>
</field>
<field name='aConstants' fullname='sandy.view:Frustum/aConstants' type='Array' isStatic='false' isConst='false' >
</field>
<field name='aDist' fullname='sandy.view:Frustum/private:aDist' type='Array' isStatic='false' isConst='true' defaultValue='unknown' >
<description><![CDATA[
   Clips a polygon against one the frustum planes.
      ]]></description>
<param><![CDATA[p_oPlane The plane to clip against.
   ]]></param>
<param><![CDATA[p_aCvert Vertices of the polygon. 
   ]]></param>
<param><![CDATA[p_aUVCoords UV coordiantes of the polygon.
   ]]></param>
</field>
<field name='aNormals' fullname='sandy.view:Frustum/aNormals' type='Array' isStatic='false' isConst='false' >
</field>
<field name='aPlanes' fullname='sandy.view:Frustum/aPlanes' type='Array' isStatic='false' isConst='false' >
<description><![CDATA[
  An array of planes representing the frustum.
  ]]></description>
</field>
<field name='aPoints' fullname='sandy.view:Frustum/aPoints' type='Array' isStatic='false' isConst='false' >
<description><![CDATA[
  An array of points representing the frustum.
  ]]></description>
</field>
<field name='m_aBoxEdges' fullname='sandy.view:Frustum/private:m_aBoxEdges' type='Array' isStatic='false' isConst='true' defaultValue='' >
</field>
<field name='pool' fullname='sandy.view:Frustum/private:pool' type='sandy.core.data:Pool' isStatic='false' isConst='false' defaultValue='' >
</field>
<classRec name='BasicView' fullname='sandy.view:BasicView' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\view\BasicView.as' namespace='sandy.view' access='public' baseclass='flash.display:Sprite' isFinal='false' isDynamic='false' >
<description><![CDATA[
  Basic view to simplify Sandy scene setup.
  You just have to extends it, and call init method with your settings.
  Right after that you can use some utils methods to improve workflow.
  ]]></description>
</classRec>
<method name='BasicView' fullname='sandy.view:BasicView/BasicView' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
</method>
<method name='addBox' fullname='sandy.view:BasicView/addBox' isStatic='false' isFinal='false' isOverride='false'  param_names='p_nWidth;p_nHeight;p_nDepth;p_nQuality;p_oPosition;p_oRotation' param_types='Number;Number;Number;uint;sandy.core.data:Point3D;sandy.core.data:Point3D' param_defaults='100;100;100;1;null;null' result_type='sandy.primitive:Box'>
</method>
<method name='addHorizontalPlane' fullname='sandy.view:BasicView/addHorizontalPlane' isStatic='false' isFinal='false' isOverride='false'  param_names='p_nWidth;p_nHeight;p_nQuality;p_oPosition;p_oRotation' param_types='Number;Number;uint;sandy.core.data:Point3D;sandy.core.data:Point3D' param_defaults='100;100;3;null;null' result_type='sandy.primitive:Plane3D'>
</method>
<method name='addSphere' fullname='sandy.view:BasicView/addSphere' isStatic='false' isFinal='false' isOverride='false'  param_names='p_nRadius;p_nQualityW;p_nQualityH;p_oPosition;p_oRotation' param_types='Number;uint;uint;sandy.core.data:Point3D;sandy.core.data:Point3D' param_defaults='100;8;8;null;null' result_type='sandy.primitive:Sphere'>
</method>
<method name='addVerticalPlane' fullname='sandy.view:BasicView/addVerticalPlane' isStatic='false' isFinal='false' isOverride='false'  param_names='p_nWidth;p_nHeight;p_nQuality;p_oPosition;p_oRotation' param_types='Number;Number;uint;sandy.core.data:Point3D;sandy.core.data:Point3D' param_defaults='100;100;3;null;null' result_type='sandy.primitive:Plane3D'>
</method>
<method name='init' fullname='sandy.view:BasicView/init' isStatic='false' isFinal='false' isOverride='false'  param_names='p_nWidth;p_nHeight' param_types='Number;Number' param_defaults='640;480' result_type='void'>
</method>
<method name='makeBitmapAppearance' fullname='sandy.view:BasicView/makeBitmapAppearance' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oTexture;p_oAttr;p_nPrecision' param_types='flash.display:BitmapData;sandy.materials.attributes:MaterialAttributes;Number' param_defaults='undefined;null;0.0' result_type='sandy.materials:Appearance'>
</method>
<method name='makeColorAppearance' fullname='sandy.view:BasicView/makeColorAppearance' isStatic='false' isFinal='false' isOverride='false'  param_names='p_nColor;p_nAlpha;p_oAttr' param_types='uint;Number;sandy.materials.attributes:MaterialAttributes' param_defaults='0xFF;1.0;null' result_type='sandy.materials:Appearance'>
</method>
<method name='makeMaterialAttributes' fullname='sandy.view:BasicView/makeMaterialAttributes' isStatic='false' isFinal='false' isOverride='false'  param_names='rest' param_types='restParam' param_defaults='undefined' result_type='sandy.materials.attributes:MaterialAttributes'>
</method>
<method name='makeMovieAppearance' fullname='sandy.view:BasicView/makeMovieAppearance' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oTexture;p_oAttr;p_nPrecision' param_types='flash.display:Sprite;sandy.materials.attributes:MaterialAttributes;Number' param_defaults='undefined;null;0.0' result_type='sandy.materials:Appearance'>
</method>
<method name='render' fullname='sandy.view:BasicView/render' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='simpleRender' fullname='sandy.view:BasicView/simpleRender' isStatic='false' isFinal='false' isOverride='false'  param_names='pEvt' param_types='flash.events:Event' param_defaults='null' result_type='void'>
</method>
<method name='stop' fullname='sandy.view:BasicView/stop' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<field name='camera' fullname='sandy.view:BasicView/camera' type='sandy.core.scenegraph:Camera3D' isStatic='false' isConst='false' >
</field>
<field name='rootNode' fullname='sandy.view:BasicView/rootNode' type='sandy.core.scenegraph:Group' isStatic='false' isConst='false' >
</field>
<field name='scene' fullname='sandy.view:BasicView/scene' type='sandy.core:Scene3D' isStatic='false' isConst='false' >
</field>
<field name='useRenderingCache' fullname='sandy.view:BasicView/useRenderingCache' type='Boolean' isStatic='false' isConst='false' defaultValue='true' >
</field>
<classRec name='Polygon2D' fullname='sandy.extrusion.data:Polygon2D' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\extrusion\data\Polygon2D.as' namespace='sandy.extrusion.data' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
  2D polygon class.
    ]]></description>
<author><![CDATA[makc
  ]]></author>
<date><![CDATA[13.03.2008
  ]]></date>
</classRec>
<method name='Polygon2D' fullname='sandy.extrusion.data:Polygon2D/Polygon2D' isStatic='false' isFinal='false' isOverride='false'  param_names='points' param_types='Array' param_defaults='null' result_type='*'>
<description><![CDATA[
   Creates Polygon2D instance.
   ]]></description>
<param><![CDATA[points array to copy to vertices property.
   ]]></param>
<see><![CDATA[#vertices
   ]]></see>
</method>
<method name='area' fullname='sandy.extrusion.data:Polygon2D/area' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
<description><![CDATA[
   Calculates Polygon2D oriented area.
   ]]></description>
<see><![CDATA[http://local.wasp.uwa.edu.au/~pbourke/geometry/clockwise/
   ]]></see>
</method>
<method name='bbox' fullname='sandy.extrusion.data:Polygon2D/bbox' isStatic='false' isFinal='false' isOverride='false'  result_type='flash.geom:Rectangle'>
<description><![CDATA[
   Bounding box.
   ]]></description>
</method>
<method name='convexHull' fullname='sandy.extrusion.data:Polygon2D/convexHull' isStatic='false' isFinal='false' isOverride='false'  result_type='sandy.extrusion.data:Polygon2D'>
<description><![CDATA[
   Convex hull.
   ]]></description>
</method>
<method name='edge2edge' fullname='sandy.extrusion.data:Polygon2D/private:edge2edge' isStatic='false' isFinal='false' isOverride='false'  param_names='edge1;edge2' param_types='Array;Array' param_defaults='undefined;undefined' result_type='Boolean'>
<description><![CDATA[
   Checks for edge intersection.
   ]]></description>
<return><![CDATA[True if edges intersect in X pattern.
   ]]></return>
<see><![CDATA[http://local.wasp.uwa.edu.au/~pbourke/geometry/lineline2d/
   ]]></see>
</method>
<method name='edges' fullname='sandy.extrusion.data:Polygon2D/edges' isStatic='false' isFinal='false' isOverride='false'  param_names='reorient' param_types='Boolean' param_defaults='false' result_type='Array'>
<description><![CDATA[
   Returns array of edges.
   ]]></description>
<param><![CDATA[reorient If true, vertices in edges are ordered.
   ]]></param>
<return><![CDATA[Array of vertice pairs.
   ]]></return>
</method>
<method name='hitTest' fullname='sandy.extrusion.data:Polygon2D/hitTest' isStatic='false' isFinal='false' isOverride='false'  param_names='point;includeVertices' param_types='flash.geom:Point;Boolean' param_defaults='undefined;true' result_type='Boolean'>
<description><![CDATA[
   Tests if point is inside or not.
   At first, I thought this will be needed for tesselation, so here you have it :)
   ]]></description>
<param><![CDATA[point Point to test.
   ]]></param>
<param><![CDATA[includeVertices if false, vertices are not considered to be inside.
   ]]></param>
<return><![CDATA[True if point is inside.
   ]]></return>
</method>
<method name='removeOrphanLinks' fullname='sandy.extrusion.data:Polygon2D/private:removeOrphanLinks' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
   Removes links that no longer link to anything.
   ]]></description>
</method>
<method name='towardsLeft' fullname='sandy.extrusion.data:Polygon2D/private:towardsLeft' isStatic='false' isFinal='false' isOverride='false'  param_names='origin;p1;p2' param_types='flash.geom:Point;flash.geom:Point;flash.geom:Point' param_defaults='undefined;undefined;undefined' result_type='Boolean'>
<description><![CDATA[
   Used by convexHull() code.
   ]]></description>
</method>
<method name='triangles' fullname='sandy.extrusion.data:Polygon2D/triangles' isStatic='false' isFinal='false' isOverride='false'  result_type='Array'>
<description><![CDATA[
   Simple polygon tesselator.
   <p>This handles both concave and convex non-selfintersecting polygons.</p>
   ]]></description>
<return><![CDATA[Array of Polygon2D objects.
   ]]></return>
</method>
<field name='vertices' fullname='sandy.extrusion.data:Polygon2D/vertices' type='Array' isStatic='false' isConst='false' >
<description><![CDATA[
   Ordered array of Point objects.
   ]]></description>
</field>
<classRec name='Curve3D' fullname='sandy.extrusion.data:Curve3D' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\extrusion\data\Curve3D.as' namespace='sandy.extrusion.data' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
  Specifies a curve in 3D space.
  ]]></description>
<author><![CDATA[makc
  ]]></author>
</classRec>
<method name='Curve3D' fullname='sandy.extrusion.data:Curve3D/Curve3D' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
   Creates empty Curve3D object.
   ]]></description>
</method>
<method name='orthogonalize' fullname='sandy.extrusion.data:Curve3D/protected:orthogonalize' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oPoint;hint' param_types='sandy.core.data:Point3D;sandy.core.data:Point3D' param_defaults='undefined;undefined' result_type='sandy.core.data:Point3D'>
<description><![CDATA[
   Return Point3D perpendicular to Point3D and as close to hint as possible.
   ]]></description>
<param><![CDATA[Point3D
   ]]></param>
<param><![CDATA[hint
   ]]></param>
<return><![CDATA[   ]]></return>
</method>
<method name='toSections' fullname='sandy.extrusion.data:Curve3D/toSections' isStatic='false' isFinal='false' isOverride='false'  param_names='stabilize' param_types='Boolean' param_defaults='true' result_type='Array'>
<description><![CDATA[
   Computes matrices to use this curve as extrusion path.
   ]]></description>
<param><![CDATA[stabilize whether to flip normals after inflection points.
   ]]></param>
<return><![CDATA[array of Matrix4 objects.
   ]]></return>
<see><![CDATA[Extrusion
   ]]></see>
</method>
<method name='b' fullname='sandy.extrusion.data:Curve3D/b/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Array'>
<description><![CDATA[
   Array of binormal unit Point3Ds at curve points. Set to null in order to re-calculate it from t and n.
   ]]></description>
<see><![CDATA[http://en.wikipedia.org/wiki/Frenet-Serret_frame
   ]]></see>
</method>
<method name='b' fullname='sandy.extrusion.data:Curve3D/b/set' isStatic='false' isFinal='false' isOverride='false'  param_names='arg' param_types='Array' param_defaults='undefined' result_type='void'>
</method>
<field name='_b' fullname='sandy.extrusion.data:Curve3D/private:_b' type='Array' isStatic='false' isConst='false' >
</field>
<field name='n' fullname='sandy.extrusion.data:Curve3D/n' type='Array' isStatic='false' isConst='false' >
<description><![CDATA[
   Array of normal unit Point3Ds at curve points.
   ]]></description>
</field>
<field name='s' fullname='sandy.extrusion.data:Curve3D/s' type='Array' isStatic='false' isConst='false' >
<description><![CDATA[
   Array of scalar values at curve points. toSections method uses
   these values to scale crossections.
   ]]></description>
</field>
<field name='t' fullname='sandy.extrusion.data:Curve3D/t' type='Array' isStatic='false' isConst='false' >
<description><![CDATA[
   Array of tangent unit Point3Ds at curve points.
   ]]></description>
</field>
<field name='v' fullname='sandy.extrusion.data:Curve3D/v' type='Array' isStatic='false' isConst='false' >
<description><![CDATA[
   Array of points that curve passes through.
   ]]></description>
</field>
<classRec name='Lathe' fullname='sandy.extrusion.data:Lathe' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\extrusion\data\Lathe.as' namespace='sandy.extrusion.data' access='public' baseclass='sandy.extrusion.data:Curve3D' isFinal='false' isDynamic='false' >
<description><![CDATA[
  Circular, spiral or helix arc.
  ]]></description>
<author><![CDATA[makc
  ]]></author>
</classRec>
<method name='Lathe' fullname='sandy.extrusion.data:Lathe/Lathe' isStatic='false' isFinal='false' isOverride='false'  param_names='center;axis;reference;angle0;angle1;step;radius0;radius1;height0;height1;scale0;scale1' param_types='sandy.core.data:Point3D;sandy.core.data:Point3D;sandy.core.data:Point3D;Number;Number;Number;Number;Number;Number;Number;Number;Number' param_defaults='undefined;undefined;undefined;0;unknown;0.3;100;100;0;0;1;1' result_type='*'>
<description><![CDATA[
   Generates circular, spiral or helix arc.
   ]]></description>
<param><![CDATA[center Arc center.
   ]]></param>
<param><![CDATA[axis Axis of revolution.
   ]]></param>
<param><![CDATA[reference A Point3D that specifies direction to count angle from. Must be non-collinear to axis.
   ]]></param>
<param><![CDATA[angle0 Start angle.
   ]]></param>
<param><![CDATA[angle1 End angle.
   ]]></param>
<param><![CDATA[step Angle step.
   ]]></param>
<param><![CDATA[radius0 Start radius.
   ]]></param>
<param><![CDATA[radius1 End radius.
   ]]></param>
<param><![CDATA[height0 Start height.
   ]]></param>
<param><![CDATA[height1 End height.
   ]]></param>
<param><![CDATA[scale0 Start scale.
   ]]></param>
<param><![CDATA[scale1 End scale.
   ]]></param>
</method>
<classRec name='Plane' fullname='sandy.core.data:Plane' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\core\data\Plane.as' namespace='sandy.core.data' access='public' baseclass='Object' isFinal='true' isDynamic='false' >
<description><![CDATA[
  A plane in 3D space.
    <p>This class is used primarily to represent the frustrum planes of the camera.</p>
    ]]></description>
<author><![CDATA[ Thomas Pfeiffer - kiroukou
  ]]></author>
<see><![CDATA[sandy.view.Frustum
  ]]></see>
<since><![CDATA[ 0.1
  ]]></since>
<version><![CDATA[ 3.1
  ]]></version>
<date><![CDATA[  24.08.2007
    ]]></date>
</classRec>
<method name='Plane' fullname='sandy.core.data:Plane/Plane' isStatic='false' isFinal='false' isOverride='false'  param_names='p_nA;p_nB;p_nC;p_nd' param_types='Number;Number;Number;Number' param_defaults='0;0;0;0' result_type='*'>
<description><![CDATA[
  Creates a new Plane instance.
    ]]></description>
<param><![CDATA[p_nA The coordinate of the first plane.
  ]]></param>
<param><![CDATA[p_nB The coordinate of the second plane.
  ]]></param>
<param><![CDATA[p_nC The coordinate of the third plane.
  ]]></param>
<param><![CDATA[p_nd The coordinate of the forth plane.
  ]]></param>
</method>
<method name='toString' fullname='sandy.core.data:Plane/toString' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[
   Returns a string representation of this object.
      ]]></description>
<return><![CDATA[The fully qualified name of this object.
   ]]></return>
</method>
<field name='a' fullname='sandy.core.data:Plane/a' type='Number' isStatic='false' isConst='false' >
<description><![CDATA[
  The coordinate of the first plane.
  ]]></description>
</field>
<field name='b' fullname='sandy.core.data:Plane/b' type='Number' isStatic='false' isConst='false' >
<description><![CDATA[
  The coordinate of the second plane.
  ]]></description>
</field>
<field name='c' fullname='sandy.core.data:Plane/c' type='Number' isStatic='false' isConst='false' >
<description><![CDATA[
  The coordinate of the third plane.
  ]]></description>
</field>
<field name='d' fullname='sandy.core.data:Plane/d' type='Number' isStatic='false' isConst='false' >
<description><![CDATA[
  The coordinate of the fourth plane.
  ]]></description>
</field>
<classRec name='Edge3D' fullname='sandy.core.data:Edge3D' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\core\data\Edge3D.as' namespace='sandy.core.data' access='public' baseclass='Object' isFinal='true' isDynamic='false' >
<description><![CDATA[
  <p>The Edge3D class stores two related Vertex objects that make an edge.
  Multiple polygons can share similar vertices, which are considered edges.</p>
    ]]></description>
<author><![CDATA[ Thomas Pfeiffer - kiroukou
  ]]></author>
<see><![CDATA[sandy.core.data.Polygon
  ]]></see>
<see><![CDATA[sandy.core.scenegraph.Geometry3D
  ]]></see>
<since><![CDATA[ 1.0
  ]]></since>
<version><![CDATA[ 3.1
  ]]></version>
<date><![CDATA[  24.08.2007
    ]]></date>
</classRec>
<method name='Edge3D' fullname='sandy.core.data:Edge3D/Edge3D' isStatic='false' isFinal='false' isOverride='false'  param_names='p_nVertexId1;p_nVertexId2' param_types='uint;uint' param_defaults='undefined;undefined' result_type='*'>
<description><![CDATA[
   Creates an edge from two vertices.
   ]]></description>
</method>
<method name='clone' fullname='sandy.core.data:Edge3D/clone' isStatic='false' isFinal='false' isOverride='false'  result_type='sandy.core.data:Edge3D'>
<description><![CDATA[
   Returns a new Edge3D object that is a clone of the original instance. 
   
   ]]></description>
<return><![CDATA[A new Edge3D object that is identical to the original. 
   ]]></return>
</method>
<field name='vertex1' fullname='sandy.core.data:Edge3D/vertex1' type='sandy.core.data:Vertex' isStatic='false' isConst='false' >
<description><![CDATA[
   First vertex of the edge (not in use?).
   ]]></description>
</field>
<field name='vertex2' fullname='sandy.core.data:Edge3D/vertex2' type='sandy.core.data:Vertex' isStatic='false' isConst='false' >
<description><![CDATA[
   Second vertex of the edge (not in use?).
   ]]></description>
</field>
<field name='vertexId1' fullname='sandy.core.data:Edge3D/vertexId1' type='uint' isStatic='false' isConst='false' >
<description><![CDATA[
   The index of the first vertex of the edge in the Geometry3D <code>aVertex</code> array.
   ]]></description>
</field>
<field name='vertexId2' fullname='sandy.core.data:Edge3D/vertexId2' type='uint' isStatic='false' isConst='false' >
<description><![CDATA[
   The index of the second vertex of the edge in the Geometry3D <code>aVertex</code> array.
   ]]></description>
</field>
<classRec name='Point3D' fullname='sandy.core.data:Point3D' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\core\data\Point3D.as' namespace='sandy.core.data' access='public' baseclass='Object' isFinal='true' isDynamic='false' >
<description><![CDATA[
  A 3D coordinate.
    <p>A representation of a position in a 3D space.</p>
    ]]></description>
<author><![CDATA[ Thomas Pfeiffer - kiroukou
  ]]></author>
<author><![CDATA[ Mirek Mencel
  ]]></author>
<author><![CDATA[ Tabin Cédric - thecaptain
  ]]></author>
<author><![CDATA[ Nicolas Coevoet - [ NikO ]
  ]]></author>
<author><![CDATA[ Bruce Epstein - zeusprod - truncated toString output to 2 decimals
  ]]></author>
<since><![CDATA[ 0.1
  ]]></since>
<version><![CDATA[ 3.1
  ]]></version>
<date><![CDATA[  24.08.2007
  ]]></date>
</classRec>
<method name='Point3D' fullname='sandy.core.data:Point3D/Point3D' isStatic='false' isFinal='false' isOverride='false'  param_names='p_nX;p_nY;p_nZ' param_types='Number;Number;Number' param_defaults='0;0;0' result_type='*'>
<description><![CDATA[
  Creates a new Point3D.
    ]]></description>
<param><![CDATA[p_nX The x coordinate.
  ]]></param>
<param><![CDATA[p_nY The y coordinate.
  ]]></param>
<param><![CDATA[p_nZ The z coordinate.
  ]]></param>
</method>
<method name='add' fullname='sandy.core.data:Point3D/add' isStatic='false' isFinal='true' isOverride='false'  param_names='v' param_types='sandy.core.data:Point3D' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   Adds the specified Point3D to this Point3D.
      ]]></description>
<param><![CDATA[v  The Point3D to add.
   ]]></param>
</method>
<method name='clone' fullname='sandy.core.data:Point3D/clone' isStatic='false' isFinal='true' isOverride='false'  result_type='sandy.core.data:Point3D'>
<description><![CDATA[
   Returns a new Point3D object that is a clone of the original instance. 
   
   ]]></description>
<return><![CDATA[A new Point3D object that is identical to the original. 
   ]]></return>
</method>
<method name='copy' fullname='sandy.core.data:Point3D/copy' isStatic='false' isFinal='true' isOverride='false'  param_names='p_oPoint3D' param_types='sandy.core.data:Point3D' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   Makes this Point3D a copy of the specified Point3D.
      <p>All components of the specified Point3D are copied to this Point3D.</p>
      ]]></description>
<param><![CDATA[p_oPoint3D The Point3D to copy.
   ]]></param>
</method>
<method name='cross' fullname='sandy.core.data:Point3D/cross' isStatic='false' isFinal='true' isOverride='false'  param_names='v' param_types='sandy.core.data:Point3D' param_defaults='undefined' result_type='sandy.core.data:Point3D'>
<description><![CDATA[
   Returns the cross product between this Point3D and the specified Point3D.
      ]]></description>
<param><![CDATA[v  The Point3D to make a cross product with (right side).
      ]]></param>
<return><![CDATA[The resulting Point3D of the cross product.
   ]]></return>
</method>
<method name='crossWith' fullname='sandy.core.data:Point3D/crossWith' isStatic='false' isFinal='true' isOverride='false'  param_names='v' param_types='sandy.core.data:Point3D' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   Crosses this Point3D with the specified Point3D.
      ]]></description>
<param><![CDATA[v  The Point3D to make the cross product with (right side).
   ]]></param>
</method>
<method name='deserialize' fullname='sandy.core.data:Point3D/deserialize' isStatic='true' isFinal='false' isOverride='false'  param_names='convertFrom' param_types='String' param_defaults='undefined' result_type='sandy.core.data:Point3D'>
</method>
<method name='dot' fullname='sandy.core.data:Point3D/dot' isStatic='false' isFinal='true' isOverride='false'  param_names='w' param_types='sandy.core.data:Point3D' param_defaults='undefined' result_type='Number'>
<description><![CDATA[
   Returns the dot product between this Point3D and the specified Point3D.
      ]]></description>
<param><![CDATA[w  The Point3D to make a dot product with.
      ]]></param>
<return><![CDATA[The dot product.
   ]]></return>
</method>
<method name='equals' fullname='sandy.core.data:Point3D/equals' isStatic='false' isFinal='true' isOverride='false'  param_names='p_Point3D' param_types='sandy.core.data:Point3D' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
   Determines if this Point3D is equal to the specified Point3D.
      <p>This all properties of this Point3D is compared to the properties of the specified Point3D.
   If all properties of the two Point3Ds are equal, a value of <code>true</code> is returned.</p>
      ]]></description>
<return><![CDATA[Whether the two Point3Ds are equal.
   ]]></return>
</method>
<method name='getAngle' fullname='sandy.core.data:Point3D/getAngle' isStatic='false' isFinal='true' isOverride='false'  param_names='w' param_types='sandy.core.data:Point3D' param_defaults='undefined' result_type='Number'>
<description><![CDATA[
   Returns the angle between this Point3D and the specified Point3D.
      ]]></description>
<param><![CDATA[w  The Point3D making an angle with this one.
      ]]></param>
<return><![CDATA[The angle in radians.
   ]]></return>
</method>
<method name='getMaxComponent' fullname='sandy.core.data:Point3D/getMaxComponent' isStatic='false' isFinal='true' isOverride='false'  result_type='Number'>
<description><![CDATA[
   Gives the biggest component of the current Point3D.
   <listing version="3.1">
       var lMax:Number = new Point3D(5, 6.7, -4).getMaxComponent(); //returns 6.7
    </listing>
   
   ]]></description>
<return><![CDATA[The biggest component value of the Point3D
   ]]></return>
</method>
<method name='getMinComponent' fullname='sandy.core.data:Point3D/getMinComponent' isStatic='false' isFinal='true' isOverride='false'  result_type='Number'>
<description><![CDATA[
   Gives the smallest component of the current Point3D.
   <listing version="3.1">
       var lMin:Number = new Point3D(5, 6.7, -4).getMinComponent(); //returns -4
    </listing>
   
   ]]></description>
<return><![CDATA[The smallest component value of the Point3D
   ]]></return>
</method>
<method name='getNorm' fullname='sandy.core.data:Point3D/getNorm' isStatic='false' isFinal='true' isOverride='false'  result_type='Number'>
<description><![CDATA[
   Returns the norm of this Point3D.
      <p>The norm is calculated by <code>Math.sqrt( x + y + z )</code>.</p>
      ]]></description>
<return><![CDATA[ The norm.
   ]]></return>
</method>
<method name='negate' fullname='sandy.core.data:Point3D/negate' isStatic='false' isFinal='true' isOverride='false'  result_type='sandy.core.data:Point3D'>
<description><![CDATA[
   Returns the inverse of this Point3D, will all properties as their negative values.
      ]]></description>
<return><![CDATA[ The inverse of the Point3D.
   ]]></return>
</method>
<method name='normalize' fullname='sandy.core.data:Point3D/normalize' isStatic='false' isFinal='true' isOverride='false'  result_type='void'>
<description><![CDATA[
   Normalizes this Point3D.
      <p>A Point3D is normalized when its components are divided by its norm.
   The norm is calculated by <code>Math.sqrt( x + y + z )</code>. After normalizing
   the Point3D, the direction is the same, but the length is <code>1</code>.</p>
   ]]></description>
</method>
<method name='pow' fullname='sandy.core.data:Point3D/pow' isStatic='false' isFinal='true' isOverride='false'  param_names='pow' param_types='Number' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   Raises the Point3D to the specified power.
      <p>All components of the vertex are raised to the specified power.</p>
      ]]></description>
<param><![CDATA[pow The power to raise the Point3D to.
   ]]></param>
</method>
<method name='reset' fullname='sandy.core.data:Point3D/reset' isStatic='false' isFinal='false' isOverride='false'  param_names='px;py;pz' param_types='Number;Number;Number' param_defaults='0;0;0' result_type='void'>
<description><![CDATA[
   Sets the <code>x</code>, <code>y</code>, and <code>z</code> properties to <code>0</code>.
   ]]></description>
</method>
<method name='resetToNegativeInfinity' fullname='sandy.core.data:Point3D/resetToNegativeInfinity' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
   Sets the <code>x</code>, <code>y</code>, and <code>z</code> properties to lowest value Flash can handle (<code>Number.NEGATIVE_INFINITY</code>).
   ]]></description>
</method>
<method name='resetToPositiveInfinity' fullname='sandy.core.data:Point3D/resetToPositiveInfinity' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
   Sets the <code>x</code>, <code>y</code>, and <code>z</code> properties to highest value Flash can handle (<code>Number.POSITIVE_INFINITY</code>).
   ]]></description>
</method>
<method name='scale' fullname='sandy.core.data:Point3D/scale' isStatic='false' isFinal='true' isOverride='false'  param_names='n' param_types='Number' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   Multiplies this Point3D by the specified number.
      <p>All components of the Point3D are multiplied by the specified number.</p>
      ]]></description>
<param><![CDATA[n  The number to multiply the Point3D with.
   ]]></param>
</method>
<method name='serialize' fullname='sandy.core.data:Point3D/serialize' isStatic='false' isFinal='false' isOverride='false'  param_names='decPlaces' param_types='Number' param_defaults='0.1' result_type='String'>
</method>
<method name='sub' fullname='sandy.core.data:Point3D/sub' isStatic='false' isFinal='true' isOverride='false'  param_names='v' param_types='sandy.core.data:Point3D' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   Substracts the specified Point3D from this Point3D.
      ]]></description>
<param><![CDATA[v  The Point3D to subtract.
   ]]></param>
</method>
<method name='toString' fullname='sandy.core.data:Point3D/toString' isStatic='false' isFinal='true' isOverride='false'  param_names='decPlaces' param_types='Number' param_defaults='0' result_type='String'>
<description><![CDATA[
   Returns a string representation of this object.
      ]]></description>
<param><![CDATA[decPlaces The number of decimal places to round the Point3D's components off to.
      ]]></param>
<return><![CDATA[The fully qualified name of this object.
   ]]></return>
</method>
<field name='x' fullname='sandy.core.data:Point3D/x' type='Number' isStatic='false' isConst='false' >
<description><![CDATA[
   The x coordinate.
   ]]></description>
</field>
<field name='y' fullname='sandy.core.data:Point3D/y' type='Number' isStatic='false' isConst='false' >
<description><![CDATA[
   The y coordinate.
   ]]></description>
</field>
<field name='z' fullname='sandy.core.data:Point3D/z' type='Number' isStatic='false' isConst='false' >
<description><![CDATA[
   The z coordinate.
   ]]></description>
</field>
<classRec name='BezierPath' fullname='sandy.core.data:BezierPath' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\core\data\BezierPath.as' namespace='sandy.core.data' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
  A 3D Bézier path.
    <p>The Bézier path is built form an array of 3D points, by using Bézier equations<br />
  With two points the path is degenereated to a straight line. To get a curved line, you need
  at least three points. The mid point is used as a control point which gives the curvature.<br />
  After that you will have to add three point segments</p>
    ]]></description>
<author><![CDATA[ Thomas Pfeiffer - kiroukou
  ]]></author>
<since><![CDATA[ 1.0
  ]]></since>
<version><![CDATA[ 3.1
  ]]></version>
<date><![CDATA[  24.08.2007
  ]]></date>
</classRec>
<method name='BezierPath' fullname='sandy.core.data:BezierPath/BezierPath' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
   Creates a new Bézier path.
   ]]></description>
</method>
<method name='addPoint' fullname='sandy.core.data:BezierPath/addPoint' isStatic='false' isFinal='false' isOverride='false'  param_names='p_nX;p_nY;p_nZ' param_types='Number;Number;Number' param_defaults='undefined;undefined;undefined' result_type='Boolean'>
<description><![CDATA[
   Adds a 3D point to this path.
      <p>At least three points are required for a a curved segment. The first point added must be the control point,
   followed by segments added in sets of two points.
      <p><strong>Note:</strong> You can't add a point to the path once it has been compiled.</p>
      ]]></description>
<param><![CDATA[p_nX The x coordinate of the 3D point.
   ]]></param>
<param><![CDATA[p_nY The y coordinate of the 3D point.
   ]]></param>
<param><![CDATA[p_nZ The z coordinate of the 3D point.
      ]]></param>
<return><![CDATA[Whether the point was added.
   ]]></return>
</method>
<method name='compile' fullname='sandy.core.data:BezierPath/compile' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
   Computes the control points for this path.
      <p>Must be called after all segments have been added and before the scene is rendered.</p>
   ]]></description>
</method>
<method name='getNumberOfSegments' fullname='sandy.core.data:BezierPath/getNumberOfSegments' isStatic='false' isFinal='false' isOverride='false'  result_type='uint'>
<description><![CDATA[
   Returns the number of segments for this path.
      ]]></description>
<return><![CDATA[The number of segments in this path.
   ]]></return>
</method>
<method name='getPosition' fullname='sandy.core.data:BezierPath/getPosition' isStatic='false' isFinal='false' isOverride='false'  param_names='p_nP' param_types='Number' param_defaults='undefined' result_type='sandy.core.data:Point3D'>
<description><![CDATA[
   Returns the position in the 3D space at a specific portion of this path.
      If length of the path is regarded as <code>1.0</code> (100%) and the position at 10% of the path is desired
   <code>0.1</code> is passed as the.
      ]]></description>
<param><![CDATA[p_nP The position of the path length as a percentage ( 0 - 1 ).
      ]]></param>
<return><![CDATA[The 3D position on the path at the desired position.
   ]]></return>
</method>
<method name='getSegment' fullname='sandy.core.data:BezierPath/getSegment' isStatic='false' isFinal='false' isOverride='false'  param_names='p_nId' param_types='uint' param_defaults='undefined' result_type='Array'>
<description><![CDATA[
   Returns a segment of this path identified by its sequence number.
      <p>The Bézier path is made up of a sequence of segments which are internally numbered.
   This method returns the n:th segment, where n is the passed in number.</p>
      ]]></description>
<param><![CDATA[p_nId The index of the desired segment in the segments array.
      ]]></param>
<return><![CDATA[An array containing the Bézier curve points [startPoint, controlPoint, endPoint]
   ]]></return>
</method>
<method name='toString' fullname='sandy.core.data:BezierPath/toString' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[
   Returns a string representation of this object.
      ]]></description>
<return><![CDATA[The fully qualified name of this object.
   ]]></return>
</method>
<field name='_aContainer' fullname='sandy.core.data:BezierPath/private:_aContainer' type='Array' isStatic='false' isConst='false' >
<description><![CDATA[
   Transformed coordinates in the local frame of the object.
   ]]></description>
</field>
<field name='_aSegments' fullname='sandy.core.data:BezierPath/private:_aSegments' type='Array' isStatic='false' isConst='false' >
<description><![CDATA[
   Array of segments.
   ]]></description>
</field>
<field name='_bBoucle' fullname='sandy.core.data:BezierPath/private:_bBoucle' type='Boolean' isStatic='false' isConst='false' >
<description><![CDATA[
   Should this path be closed? True if it should false otherwise, default - false
   ]]></description>
</field>
<field name='_bCompiled' fullname='sandy.core.data:BezierPath/private:_bCompiled' type='Boolean' isStatic='false' isConst='false' >
<description><![CDATA[
   Is this path compiled? True if it is, false otherwise.
   ]]></description>
</field>
<field name='_nCrtSegment' fullname='sandy.core.data:BezierPath/private:_nCrtSegment' type='uint' isStatic='false' isConst='false' >
<description><![CDATA[
   Current segment id.
   ]]></description>
</field>
<field name='_nNbPoints' fullname='sandy.core.data:BezierPath/private:_nNbPoints' type='uint' isStatic='false' isConst='false' >
<description><![CDATA[
   Number of points of this path.
   ]]></description>
</field>
<field name='_nNbSegments' fullname='sandy.core.data:BezierPath/private:_nNbSegments' type='uint' isStatic='false' isConst='false' >
<description><![CDATA[
   Number of segments of this path.
   ]]></description>
</field>
<field name='_nRatio' fullname='sandy.core.data:BezierPath/private:_nRatio' type='Number' isStatic='false' isConst='false' >
</field>
<classRec name='Vertex' fullname='sandy.core.data:Vertex' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\core\data\Vertex.as' namespace='sandy.core.data' access='public' baseclass='Object' isFinal='true' isDynamic='false' >
<description><![CDATA[
  A vertex is the point of intersection of edges the of a polygon.
    ]]></description>
<author><![CDATA[ Thomas Pfeiffer - kiroukou
  ]]></author>
<see><![CDATA[sandy.core.data.Polygon
  ]]></see>
<since><![CDATA[ 1.0
  ]]></since>
<version><![CDATA[ 3.1
  ]]></version>
<date><![CDATA[  24.08.2007
    ]]></date>
</classRec>
<method name='Vertex' fullname='sandy.core.data:Vertex/Vertex' isStatic='false' isFinal='false' isOverride='false'  param_names='p_nx;p_ny;p_nz;rest' param_types='Number;Number;Number;restParam' param_defaults='0;0;0;undefined' result_type='*'>
<description><![CDATA[
  Creates a new vertex.
    ]]></description>
<param><![CDATA[p_nx  The x position.
  ]]></param>
<param><![CDATA[p_ny  The y position.
  ]]></param>
<param><![CDATA[p_nz  The z position.
  ]]></param>
<param><![CDATA[...rest Optional values for the <code>wx</code>, <code>wy</code>, and <code>wz</code> properties.
  ]]></param>
</method>
<method name='add' fullname='sandy.core.data:Vertex/add' isStatic='false' isFinal='true' isOverride='false'  param_names='v' param_types='sandy.core.data:Vertex' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   Adds the specified vertex to this vertex.
      ]]></description>
<param><![CDATA[v  The vertex to add to this vertex.
   ]]></param>
</method>
<method name='clone' fullname='sandy.core.data:Vertex/clone' isStatic='false' isFinal='true' isOverride='false'  result_type='sandy.core.data:Vertex'>
<description><![CDATA[
   Returns a new Vertex object that is a clone of the original instance. 
   
   ]]></description>
<return><![CDATA[A new Vertex object that is identical to the original. 
   ]]></return>
</method>
<method name='clone2' fullname='sandy.core.data:Vertex/clone2' isStatic='false' isFinal='true' isOverride='false'  result_type='sandy.core.data:Vertex'>
<description><![CDATA[
   Returns a new vertex build on the transformed values of this vertex.
      <p>Returns a new Vertex object that is created with the vertex's transformed coordinates as the new vertex's start position.
   The <code>x</code>, y</code>, and z</code> properties of the new vertex would be the <code>wx</code>, <code>wy</code>, <code>wz</code> properties of this vertex.</p>
   <p>[<strong>ToDo</strong>: What can this one be used for? - Explain! ]</p>
      ]]></description>
<return><![CDATA[ The new Vertex object.
   ]]></return>
</method>
<method name='copy' fullname='sandy.core.data:Vertex/copy' isStatic='false' isFinal='true' isOverride='false'  param_names='p_oPoint3D' param_types='sandy.core.data:Vertex' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   Makes this vertex a copy of the specified vertex.
      <p>All components of the specified vertex are copied to this vertex.</p>
      ]]></description>
<param><![CDATA[p_oPoint3D The vertex to copy.
   ]]></param>
</method>
<method name='createFromPoint3D' fullname='sandy.core.data:Vertex/createFromPoint3D' isStatic='true' isFinal='false' isOverride='false'  param_names='p_v' param_types='sandy.core.data:Point3D' param_defaults='undefined' result_type='sandy.core.data:Vertex'>
<description><![CDATA[
   Creates and returns a new vertex from the specified Point3D.
      ]]></description>
<param><![CDATA[p_v The vertex's position Point3D.
      ]]></param>
<return><![CDATA[ The new vertex.
   ]]></return>
</method>
<method name='cross' fullname='sandy.core.data:Vertex/cross' isStatic='false' isFinal='true' isOverride='false'  param_names='v' param_types='sandy.core.data:Vertex' param_defaults='undefined' result_type='sandy.core.data:Vertex'>
<description><![CDATA[
   Returns the cross product between this vertex and the specified vertex.
      <p>Only the original positions values are used for this cross product.</p>
      ]]></description>
<param><![CDATA[v  The vertex to make a cross product with.
      ]]></param>
<return><![CDATA[The resulting vertex of the cross product.
   ]]></return>
</method>
<method name='deserialize' fullname='sandy.core.data:Vertex/deserialize' isStatic='false' isFinal='true' isOverride='false'  param_names='convertFrom' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   Sets the elements of this vertex from a string representation.
      <p>[<strong>ToDo</strong>: Explain why this is good for XML intput! ]</p>
      ]]></description>
<param><![CDATA[ A string representing the vertex ( specific serialize format ).
   ]]></param>
</method>
<method name='dot' fullname='sandy.core.data:Vertex/dot' isStatic='false' isFinal='true' isOverride='false'  param_names='w' param_types='sandy.core.data:Vertex' param_defaults='undefined' result_type='Number'>
<description><![CDATA[
   Returns the dot product between this vertex and the specified vertex.
      <p>Only the original positions values are used for this dot product.</p>
      ]]></description>
<param><![CDATA[w  The vertex to make a dot product with.
      ]]></param>
<return><![CDATA[The dot product.
   ]]></return>
</method>
<method name='equals' fullname='sandy.core.data:Vertex/equals' isStatic='false' isFinal='true' isOverride='false'  param_names='p_vertex' param_types='sandy.core.data:Vertex' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
   Determines if this vertex is equal to the specified vertex.
      <p>This all properties of this vertex is compared to the properties of the specified vertex.
   If all properties of the two vertices are equal, a value of <code>true</code> is returned.</p>
      ]]></description>
<return><![CDATA[Whether the two verticies are equal.
   ]]></return>
</method>
<method name='getAngle' fullname='sandy.core.data:Vertex/getAngle' isStatic='false' isFinal='true' isOverride='false'  param_names='w' param_types='sandy.core.data:Vertex' param_defaults='undefined' result_type='Number'>
<description><![CDATA[
   Returns the angle between this vertex and the specified vertex.
      ]]></description>
<param><![CDATA[w The vertex making an angle with this one.
      ]]></param>
<return><![CDATA[ The angle in radians.
   ]]></return>
</method>
<method name='getCameraPoint3D' fullname='sandy.core.data:Vertex/getCameraPoint3D' isStatic='false' isFinal='true' isOverride='false'  result_type='sandy.core.data:Point3D'>
<description><![CDATA[
  Returns a Point3D of the transformed vertex.
    ]]></description>
<return><![CDATA[A Point3D of the transformed vertex.
  ]]></return>
</method>
<method name='getNorm' fullname='sandy.core.data:Vertex/getNorm' isStatic='false' isFinal='true' isOverride='false'  result_type='Number'>
<description><![CDATA[
   Returns the norm of this vertex.
      <p>The norm of the vertex is calculated as the length of its position Point3D.
   The norm is calculated by <code>Math.sqrt( x + y + z )</code>.</p>
      ]]></description>
<return><![CDATA[ The norm.
   ]]></return>
</method>
<method name='getPoint3D' fullname='sandy.core.data:Vertex/getPoint3D' isStatic='false' isFinal='true' isOverride='false'  result_type='sandy.core.data:Point3D'>
<description><![CDATA[
   Returns a Point3D representing the original x, y, z coordinates.
      ]]></description>
<return><![CDATA[A Point3D representing the original x, y, z coordinates.
   ]]></return>
</method>
<method name='getScreenPoint' fullname='sandy.core.data:Vertex/getScreenPoint' isStatic='false' isFinal='false' isOverride='false'  result_type='sandy.core.data:Point3D'>
<description><![CDATA[
   Returns the 2D position of this vertex.  The function returns a Point3D with the x and y coordinates of the
   vertex and the depth as the <code>z</code> property.
      ]]></description>
<return><![CDATA[The 2D position of this vertex once projected.
   ]]></return>
</method>
<method name='negate' fullname='sandy.core.data:Vertex/negate' isStatic='false' isFinal='true' isOverride='false'  result_type='void'>
<description><![CDATA[
   Inverts the vertex.  All properties of the vertex become their nagative values.
   ]]></description>
</method>
<method name='normalize' fullname='sandy.core.data:Vertex/normalize' isStatic='false' isFinal='true' isOverride='false'  result_type='void'>
<description><![CDATA[
   Normalizes this vertex.
      <p>A vertex is normalized when its components are divided by its norm.
   The norm is calculated by <code>Math.sqrt( x + y + z )</code>, which is the length of the position Point3D.</p>
   ]]></description>
</method>
<method name='pow' fullname='sandy.core.data:Vertex/pow' isStatic='false' isFinal='true' isOverride='false'  param_names='pow' param_types='Number' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   Raises the vertex to the specified power.
      <p>All components of the vertex are raised to the specified power.</p>
      ]]></description>
<param><![CDATA[pow The power to raise the vertex to.
   ]]></param>
</method>
<method name='reset' fullname='sandy.core.data:Vertex/reset' isStatic='false' isFinal='false' isOverride='false'  param_names='p_nX;p_nY;p_nZ' param_types='Number;Number;Number' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
   Reset the values of that vertex.
   This allows to change all the values of that vertex in one method call instead of acessing to each public property.
    ]]></description>
<param><![CDATA[p_nX Value for x and wx properties
    ]]></param>
<param><![CDATA[p_nY Value for y and wy properties
    ]]></param>
<param><![CDATA[p_nZ Value for z and wz properties
   ]]></param>
</method>
<method name='scale' fullname='sandy.core.data:Vertex/scale' isStatic='false' isFinal='true' isOverride='false'  param_names='n' param_types='Number' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   Multiplies this vertex by the specified number.
      <p>All components of the vertex are multiplied by the specified number.</p>
      ]]></description>
<param><![CDATA[n  The number to multiply the vertex with.
   ]]></param>
</method>
<method name='serialize' fullname='sandy.core.data:Vertex/serialize' isStatic='false' isFinal='true' isOverride='false'  param_names='decPlaces' param_types='Number' param_defaults='0' result_type='String'>
<description><![CDATA[
   Returns a string representation of this vertex with rounded values.
      <p>[<strong>ToDo</strong>: Explain why this is good for XML output! ]</p>
      ]]></description>
<param><![CDATA[decPlaces Number of decimals.
   ]]></param>
<return><![CDATA[  The specific serialize string.
   ]]></return>
</method>
<method name='sub' fullname='sandy.core.data:Vertex/sub' isStatic='false' isFinal='false' isOverride='false'  param_names='v' param_types='sandy.core.data:Vertex' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   Substracts the specified vertex from this vertex.
      ]]></description>
<param><![CDATA[v  The vertex to subtract from this vertex.
   ]]></param>
</method>
<method name='toString' fullname='sandy.core.data:Vertex/toString' isStatic='false' isFinal='true' isOverride='false'  param_names='decPlaces' param_types='Number' param_defaults='0' result_type='String'>
<description><![CDATA[
   Returns a string representation of this object.
      ]]></description>
<param><![CDATA[decPlaces The number of decimal places to round the vertex's components off to.
      ]]></param>
<return><![CDATA[The fully qualified name of this object.
   ]]></return>
</method>
<field name='ID' fullname='sandy.core.data:Vertex/private:ID' type='uint' isStatic='true' isConst='false' defaultValue='0' >
</field>
<field name='aFaces' fullname='sandy.core.data:Vertex/aFaces' type='Array' isStatic='false' isConst='false' defaultValue='' >
<description><![CDATA[
   An array of polygons that use the vertex</p>
   ]]></description>
</field>
<field name='flags' fullname='sandy.core.data:Vertex/flags' type='int' isStatic='false' isConst='false' defaultValue='0' >
<description><![CDATA[
   Vertex flags that can be SandyFlags.VERTEX_WORLD, SandyFlags.VERTEX_CAMERA or SandyFlags.VERTEX_PROJECTED
   Need to avoid unecessary computations
   ]]></description>
</field>
<field name='id' fullname='sandy.core.data:Vertex/id' type='uint' isStatic='false' isConst='true' defaultValue='unknown' >
<description><![CDATA[
  The unique identifier for the vertex.
  ]]></description>
</field>
<field name='m_oCamera' fullname='sandy.core.data:Vertex/private:m_oCamera' type='sandy.core.data:Point3D' isStatic='false' isConst='true' defaultValue='' >
</field>
<field name='m_oLocal' fullname='sandy.core.data:Vertex/private:m_oLocal' type='sandy.core.data:Point3D' isStatic='false' isConst='true' defaultValue='' >
</field>
<field name='nbFaces' fullname='sandy.core.data:Vertex/nbFaces' type='uint' isStatic='false' isConst='false' defaultValue='0' >
<description><![CDATA[
   The number of polygons the vertex belongs to.
   ]]></description>
</field>
<field name='projected' fullname='sandy.core.data:Vertex/projected' type='Boolean' isStatic='false' isConst='false' defaultValue='false' >
</field>
<field name='sx' fullname='sandy.core.data:Vertex/sx' type='Number' isStatic='false' isConst='false' >
<description><![CDATA[
  The transformed x coordinate on the screen.
  ]]></description>
</field>
<field name='sy' fullname='sandy.core.data:Vertex/sy' type='Number' isStatic='false' isConst='false' >
<description><![CDATA[
  The transformed y coordinate on the screen.
  ]]></description>
</field>
<field name='transformed' fullname='sandy.core.data:Vertex/transformed' type='Boolean' isStatic='false' isConst='false' defaultValue='false' >
</field>
<field name='wx' fullname='sandy.core.data:Vertex/wx' type='Number' isStatic='false' isConst='false' >
<description><![CDATA[
  The transformed x coordinate in the scene.
  ]]></description>
</field>
<field name='wy' fullname='sandy.core.data:Vertex/wy' type='Number' isStatic='false' isConst='false' >
<description><![CDATA[
  The transformed y coordinate in the scene.
  ]]></description>
</field>
<field name='wz' fullname='sandy.core.data:Vertex/wz' type='Number' isStatic='false' isConst='false' >
<description><![CDATA[
  The transformed z coordinate in the scene.
  ]]></description>
</field>
<field name='x' fullname='sandy.core.data:Vertex/x' type='Number' isStatic='false' isConst='false' >
<description><![CDATA[
  The x coordinate in the scene.
  ]]></description>
</field>
<field name='y' fullname='sandy.core.data:Vertex/y' type='Number' isStatic='false' isConst='false' >
<description><![CDATA[
  The y coordinate in the scene.
  ]]></description>
</field>
<field name='z' fullname='sandy.core.data:Vertex/z' type='Number' isStatic='false' isConst='false' >
<description><![CDATA[
  The z coordinate in the scene.
  ]]></description>
</field>
<classRec name='UVCoord' fullname='sandy.core.data:UVCoord' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\core\data\UVCoord.as' namespace='sandy.core.data' access='public' baseclass='Object' isFinal='true' isDynamic='false' >
<description><![CDATA[
  A 2D coordinate point on a texture that corresponds to a vertex of a polygon.
    <p>The UVCoord represents the position of a vertex on the Bitmap used to &quot;dress&quot; a polygon.<br />
  It is the 2D texture coordinate, used in the BitmapMaterial and VideoMaterial.</p>
    ]]></description>
<author><![CDATA[ Thomas Pfeiffer - kiroukou
  ]]></author>
<see><![CDATA[http://en.wikipedia.org/wiki/UV_mapping
  ]]></see>
<since><![CDATA[ 0.3
  ]]></since>
<version><![CDATA[ 3.1
  ]]></version>
<date><![CDATA[  24.08.2007
    ]]></date>
</classRec>
<method name='UVCoord' fullname='sandy.core.data:UVCoord/UVCoord' isStatic='false' isFinal='false' isOverride='false'  param_names='p_nU;p_nV' param_types='Number;Number' param_defaults='0;0' result_type='*'>
<description><![CDATA[
  Creates a new UV coordinate.
    ]]></description>
<param><![CDATA[p_nU Number the x texture position on the bitmap.
  ]]></param>
<param><![CDATA[p_nV Number the y texture position on the bitmap.
  ]]></param>
</method>
<method name='add' fullname='sandy.core.data:UVCoord/add' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oUV' param_types='sandy.core.data:UVCoord' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   Adds the specified UV coordinate from this UV coordinate.
      ]]></description>
<param><![CDATA[p_oUV The UVCoord to add.
   ]]></param>
</method>
<method name='clone' fullname='sandy.core.data:UVCoord/clone' isStatic='false' isFinal='false' isOverride='false'  result_type='sandy.core.data:UVCoord'>
<description><![CDATA[
   Returns a new UVCoord object that is a clone of the original instance. 
   
   ]]></description>
<return><![CDATA[A new UVCoord object that is identical to the original. 
   ]]></return>
</method>
<method name='copy' fullname='sandy.core.data:UVCoord/copy' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oUV' param_types='sandy.core.data:UVCoord' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   Makes this UV coordinate a copy of the specified UV coordinate.
      <p>All components of the specified UV coordinate are copied to this UV coordinate.</p>
      ]]></description>
<param><![CDATA[p_oUV The vertex to copy.
   ]]></param>
</method>
<method name='length' fullname='sandy.core.data:UVCoord/length' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
<description><![CDATA[
   The length.
   ]]></description>
</method>
<method name='normalize' fullname='sandy.core.data:UVCoord/normalize' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
   Normalizes this UV coordinate.
      <p>A UV coordinate is normalized when its components are divided by its length.
   The length is calculated by <code>Math.sqrt( u + v )</code>.</p>
   ]]></description>
</method>
<method name='scale' fullname='sandy.core.data:UVCoord/scale' isStatic='false' isFinal='false' isOverride='false'  param_names='p_nFactor' param_types='Number' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   Scales the texture coordinates by a factor.
      ]]></description>
<param><![CDATA[p_nFactor The factor.
   ]]></param>
</method>
<method name='sub' fullname='sandy.core.data:UVCoord/sub' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oUV' param_types='sandy.core.data:UVCoord' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   Subtracts the specified UV coordinate from this UV coordinate.
      ]]></description>
<param><![CDATA[p_oUV The UV coordinate to substract.
   ]]></param>
</method>
<method name='toString' fullname='sandy.core.data:UVCoord/toString' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[
   Returns a string representation of this object.
      ]]></description>
<return><![CDATA[The fully qualified name of this object.
   ]]></return>
</method>
<field name='u' fullname='sandy.core.data:UVCoord/u' type='Number' isStatic='false' isConst='false' >
<description><![CDATA[
   The v coordinate.
   ]]></description>
</field>
<field name='v' fullname='sandy.core.data:UVCoord/v' type='Number' isStatic='false' isConst='false' >
<description><![CDATA[
   The u coordinate.
   ]]></description>
</field>
<classRec name='Pool' fullname='sandy.core.data:Pool' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\core\data\Pool.as' namespace='sandy.core.data' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
  ]]></description>
<author><![CDATA[thomas
  ]]></author>
</classRec>
<method name='Pool' fullname='sandy.core.data:Pool/Pool' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
</method>
<method name='getInstance' fullname='sandy.core.data:Pool/getInstance' isStatic='true' isFinal='false' isOverride='false'  result_type='sandy.core.data:Pool'>
</method>
<method name='init' fullname='sandy.core.data:Pool/init' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='nextPoint3D' fullname='sandy.core.data:Pool/nextPoint3D/get' isStatic='false' isFinal='false' isOverride='false'  result_type='sandy.core.data:Point3D'>
</method>
<method name='nextUV' fullname='sandy.core.data:Pool/nextUV/get' isStatic='false' isFinal='false' isOverride='false'  result_type='sandy.core.data:UVCoord'>
</method>
<method name='nextVertex' fullname='sandy.core.data:Pool/nextVertex/get' isStatic='false' isFinal='false' isOverride='false'  result_type='sandy.core.data:Vertex'>
</method>
<field name='INSTANCE' fullname='sandy.core.data:Pool/private:INSTANCE' type='sandy.core.data:Pool' isStatic='true' isConst='false' defaultValue='null' >
</field>
<field name='m_aPoint3Ds' fullname='sandy.core.data:Pool/private:m_aPoint3Ds' type='Array' isStatic='false' isConst='true' defaultValue='' >
</field>
<field name='m_aUV' fullname='sandy.core.data:Pool/private:m_aUV' type='Array' isStatic='false' isConst='true' defaultValue='' >
</field>
<field name='m_aVertices' fullname='sandy.core.data:Pool/private:m_aVertices' type='Array' isStatic='false' isConst='true' defaultValue='' >
</field>
<field name='m_nIdPoint3D' fullname='sandy.core.data:Pool/private:m_nIdPoint3D' type='int' isStatic='false' isConst='false' defaultValue='0' >
</field>
<field name='m_nIdUV' fullname='sandy.core.data:Pool/private:m_nIdUV' type='int' isStatic='false' isConst='false' defaultValue='0' >
</field>
<field name='m_nIdVertice' fullname='sandy.core.data:Pool/private:m_nIdVertice' type='int' isStatic='false' isConst='false' defaultValue='0' >
</field>
<field name='m_nSize' fullname='sandy.core.data:Pool/private:m_nSize' type='int' isStatic='false' isConst='false' defaultValue='300' >
</field>
<classRec name='Matrix4' fullname='sandy.core.data:Matrix4' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\core\data\Matrix4.as' namespace='sandy.core.data' access='public' baseclass='Object' isFinal='true' isDynamic='false' >
<description><![CDATA[
  A 4x4 matrix for transformations in 3D space.
    ]]></description>
<author><![CDATA[ Thomas Pfeiffer - kiroukou
  ]]></author>
<since><![CDATA[ 1.0
  ]]></since>
<version><![CDATA[ 3.1
  ]]></version>
<date><![CDATA[  24.08.2007
  ]]></date>
</classRec>
<method name='Matrix4' fullname='sandy.core.data:Matrix4/Matrix4' isStatic='false' isFinal='false' isOverride='false'  param_names='pn11;pn12;pn13;pn14;pn21;pn22;pn23;pn24;pn31;pn32;pn33;pn34;pn41;pn42;pn43;pn44' param_types='Number;Number;Number;Number;Number;Number;Number;Number;Number;Number;Number;Number;Number;Number;Number;Number' param_defaults='1;0;0;0;0;1;0;0;0;0;1;0;0;0;0;1' result_type='*'>
<description><![CDATA[
   Creates a new 4x4 matrix. The default is an identity matrix.
      ]]></description>
<example><![CDATA[The examples below shows the results of calling the constructor with and without parameters. 
   <listing version="3.1">
   var m:Matrix4 = new Matrix4();
   </listing>
      <pre>
   1 0 0 0
   0 1 0 0
   0 0 1 0
   0 0 0 1
   </pre>
      <listing version="3.1">
   var m:Matrix4 = new Matrix4(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16);
   </listing>
      <pre>
   1  2  3  4
   5  6  7  8
   9  10 11 12
   13 14 15 16
   </pre>
      ]]></example>
<param><![CDATA[pn11 Matrix cell n11.
   ]]></param>
<param><![CDATA[pn12 Matrix cell n12.
   ]]></param>
<param><![CDATA[pn13 Matrix cell n13.
   ]]></param>
<param><![CDATA[pn14 Matrix cell n14.
   ]]></param>
<param><![CDATA[pn21 Matrix cell n21.
   ]]></param>
<param><![CDATA[pn22 Matrix cell n22.
   ]]></param>
<param><![CDATA[pn23 Matrix cell n23.
   ]]></param>
<param><![CDATA[pn24 Matrix cell n24.
   ]]></param>
<param><![CDATA[pn31 Matrix cell n31.
   ]]></param>
<param><![CDATA[pn32 Matrix cell n32.
   ]]></param>
<param><![CDATA[pn33 Matrix cell n33.
   ]]></param>
<param><![CDATA[pn34 Matrix cell n34.
   ]]></param>
<param><![CDATA[pn41 Matrix cell n41.
   ]]></param>
<param><![CDATA[pn42 Matrix cell n42.
   ]]></param>
<param><![CDATA[pn43 Matrix cell n43.
   ]]></param>
<param><![CDATA[pn44 Matrix cell n44.
   ]]></param>
</method>
<method name='addMatrix' fullname='sandy.core.data:Matrix4/addMatrix' isStatic='false' isFinal='true' isOverride='false'  param_names='m2' param_types='sandy.core.data:Matrix4' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   Adds the passed in matrix to this matrix.
      <p>This passed in matrix is added to this matrix element by element:<br />
   <code>n11 = n11 + m2.n11</code><br />
   <code>n11 = n12 + m2.n12</code><br />
   ...</p>
      ]]></description>
<param><![CDATA[m2 The matrix to add to this matrix.
   ]]></param>
</method>
<method name='axisRotation' fullname='sandy.core.data:Matrix4/axisRotation' isStatic='false' isFinal='true' isOverride='false'  param_names='u;v;w;angle' param_types='Number;Number;Number;Number' param_defaults='undefined;undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
   Computes a rotation around an axis.
      ]]></description>
<param><![CDATA[u  X rotation.
   ]]></param>
<param><![CDATA[v  Y rotation.
   ]]></param>
<param><![CDATA[w  Z rotation.
   ]]></param>
<param><![CDATA[angle The angle of rotation in degrees.
   ]]></param>
</method>
<method name='axisRotationPoint3D' fullname='sandy.core.data:Matrix4/axisRotationPoint3D' isStatic='false' isFinal='true' isOverride='false'  param_names='v;angle' param_types='sandy.core.data:Point3D;Number' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
   Makes this matrix a rotation matrix for a rotation around a given axis.
      ]]></description>
<param><![CDATA[v  The axis of rotation.
   ]]></param>
<param><![CDATA[angle The angle of rotation in degrees.
   ]]></param>
</method>
<method name='axisRotationWithReference' fullname='sandy.core.data:Matrix4/axisRotationWithReference' isStatic='false' isFinal='true' isOverride='false'  param_names='axis;ref;pAngle' param_types='sandy.core.data:Point3D;sandy.core.data:Point3D;Number' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
   Realize a rotation around a specific axis through a specified point.
      <p>A rotation by a specified angle around a specified axis through a specific position (the reference point),
   is applied to this matrix.</p>
      ]]></description>
<param><![CDATA[pAxis  A Point3D representing the axis of the rotation.
   ]]></param>
<param><![CDATA[ref   The reference point.
   ]]></param>
<param><![CDATA[pAngle The angle of rotation in degrees.
   ]]></param>
</method>
<method name='clone' fullname='sandy.core.data:Matrix4/clone' isStatic='false' isFinal='true' isOverride='false'  result_type='sandy.core.data:Matrix4'>
<description><![CDATA[
   Returns a new Matrix4 object that is a clone of the original instance. 
   
   ]]></description>
<return><![CDATA[A new Matrix4 object that is identical to the original. 
   ]]></return>
</method>
<method name='copy' fullname='sandy.core.data:Matrix4/copy' isStatic='false' isFinal='true' isOverride='false'  param_names='m' param_types='sandy.core.data:Matrix4' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   Makes this matrix a copy of a passed in matrix.
      <p>All elements of the argument matrix are copied into this matrix.</p>
      ]]></description>
<param><![CDATA[m1 The matrix to copy.
   ]]></param>
</method>
<method name='deserialize' fullname='sandy.core.data:Matrix4/deserialize' isStatic='true' isFinal='false' isOverride='false'  param_names='convertFrom' param_types='String' param_defaults='undefined' result_type='sandy.core.data:Matrix4'>
<description><![CDATA[
   Convert a string representation in a {]]></description>
<return><![CDATA[A {]]></return>
<code><![CDATA[Matrix4} equivalent to the input string
   ]]></code>
</method>
<method name='det' fullname='sandy.core.data:Matrix4/det' isStatic='false' isFinal='true' isOverride='false'  result_type='Number'>
<description><![CDATA[
  Returns the determinant of this matrix.
    ]]></description>
<return><![CDATA[The determinant.
  ]]></return>
</method>
<method name='det3x3' fullname='sandy.core.data:Matrix4/det3x3' isStatic='false' isFinal='true' isOverride='false'  result_type='Number'>
<description><![CDATA[
  Returns the determinant of the upper left 3x3 sub matrix of this matrix.
    ]]></description>
<return><![CDATA[The determinant.
  ]]></return>
</method>
<method name='eulerRotation' fullname='sandy.core.data:Matrix4/eulerRotation' isStatic='false' isFinal='true' isOverride='false'  param_names='ax;ay;az' param_types='Number;Number;Number' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
   Computes a rotation from the Euler angle in degrees.
      ]]></description>
<param><![CDATA[ax The angle of rotation around the X axis in degrees.
   ]]></param>
<param><![CDATA[ay The angle of rotation around the Y axis in degrees.
   ]]></param>
<param><![CDATA[az The angle of rotation around the Z axis in degrees.
   ]]></param>
</method>
<method name='fromPoint3Ds' fullname='sandy.core.data:Matrix4/fromPoint3Ds' isStatic='false' isFinal='true' isOverride='false'  param_names='px;py;pz;pt' param_types='sandy.core.data:Point3D;sandy.core.data:Point3D;sandy.core.data:Point3D;sandy.core.data:Point3D' param_defaults='undefined;undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
   Creates transformation matrix from axis and translation Point3Ds.
   
   ]]></description>
<param><![CDATA[px X axis Point3D.
   ]]></param>
<param><![CDATA[py Y axis Point3D.
   ]]></param>
<param><![CDATA[pz Z axis Point3D.
   ]]></param>
<param><![CDATA[pt translation Point3D.
   ]]></param>
</method>
<method name='getEulerAngles' fullname='sandy.core.data:Matrix4/getEulerAngles' isStatic='false' isFinal='true' isOverride='false'  result_type='sandy.core.data:Point3D'>
<description><![CDATA[
   Get the Euler angles from the rotation matrix.
      ]]></description>
<return><![CDATA[A Point3D representing the Euler angles.
   ]]></return>
</method>
<method name='getTrace' fullname='sandy.core.data:Matrix4/getTrace' isStatic='false' isFinal='true' isOverride='false'  result_type='Number'>
<description><![CDATA[
   Returns the trace of the matrix.
      <p>The trace value is the sum of the elements on the corners of the matrix.</p>
      ]]></description>
<return><![CDATA[The trace value.
   ]]></return>
</method>
<method name='getTranslation' fullname='sandy.core.data:Matrix4/getTranslation' isStatic='false' isFinal='true' isOverride='false'  result_type='sandy.core.data:Point3D'>
<description><![CDATA[
   Returns a Point3D that contains the 3D position information.
   
   ]]></description>
<return><![CDATA[A Point3D.
   ]]></return>
</method>
<method name='identity' fullname='sandy.core.data:Matrix4/identity' isStatic='false' isFinal='true' isOverride='false'  result_type='void'>
<description><![CDATA[
   Makes this matrix into an identity matrix.
      <p>Below is a representation of a identity matrix:</p>
      <pre>
   1 0 0 0
   0 1 0 0
   0 0 1 0
   0 0 0 1
   </pre>
      ]]></description>
<return><![CDATA[The identity matrix.
   ]]></return>
</method>
<method name='inverse' fullname='sandy.core.data:Matrix4/inverse' isStatic='false' isFinal='true' isOverride='false'  result_type='void'>
<description><![CDATA[
  Inverts this matrix.
  ]]></description>
</method>
<method name='multiply' fullname='sandy.core.data:Matrix4/multiply' isStatic='false' isFinal='true' isOverride='false'  param_names='m2' param_types='sandy.core.data:Matrix4' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   Multiplies this matrix by the passed in matrix.
      ]]></description>
<param><![CDATA[m2 The matrix to multiply with.
   ]]></param>
</method>
<method name='multiply3x3' fullname='sandy.core.data:Matrix4/multiply3x3' isStatic='false' isFinal='true' isOverride='false'  param_names='m2' param_types='sandy.core.data:Matrix4' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   Multiplies this matrix by the matrix passed in as if they were 3x3 matrices.
      ]]></description>
<param><![CDATA[m2 The matrix to multiply with.
   ]]></param>
</method>
<method name='multiply4x3' fullname='sandy.core.data:Matrix4/multiply4x3' isStatic='false' isFinal='true' isOverride='false'  param_names='m2' param_types='sandy.core.data:Matrix4' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   Multiplies the upper left 3x3 sub matrix of this matrix by the passed in matrix.
      ]]></description>
<param><![CDATA[m2 The matrix to multiply with.
   ]]></param>
</method>
<method name='rotationX' fullname='sandy.core.data:Matrix4/rotationX' isStatic='false' isFinal='true' isOverride='false'  param_names='angle' param_types='Number' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   Makes this matrix a rotation matrix for the given angle of rotation around the x axis.
   
   ]]></description>
<param><![CDATA[angle The angle of rotation around the x axis in degrees.
   ]]></param>
</method>
<method name='rotationY' fullname='sandy.core.data:Matrix4/rotationY' isStatic='false' isFinal='true' isOverride='false'  param_names='angle' param_types='Number' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   Makes this matrix a rotation matrix for the given angle of rotation around the y axis.
   
   ]]></description>
<param><![CDATA[angle The angle of rotation around the y axis in degrees.
   ]]></param>
</method>
<method name='rotationZ' fullname='sandy.core.data:Matrix4/rotationZ' isStatic='false' isFinal='true' isOverride='false'  param_names='angle' param_types='Number' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   Makes this matrix a rotation matrix for the given angle of rotation around the z axis.
   
   ]]></description>
<param><![CDATA[angle The angle of rotation around the z axis in degrees.
   ]]></param>
</method>
<method name='scale' fullname='sandy.core.data:Matrix4/scale' isStatic='false' isFinal='true' isOverride='false'  param_names='nXScale;nYScale;nZScale' param_types='Number;Number;Number' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
   Makes this matrix a scale matrix from coordinates.
      <pre>
   Sx 0  0  0
   0  Sy 0  0
   0  0  Sz 0
   0  0  0  1
   </pre>
      ]]></description>
<param><![CDATA[nXScale  x-scale.
   ]]></param>
<param><![CDATA[nYScale  y-scale.
   ]]></param>
<param><![CDATA[nZScale z-scale.
   ]]></param>
</method>
<method name='scalePoint3D' fullname='sandy.core.data:Matrix4/scalePoint3D' isStatic='false' isFinal='true' isOverride='false'  param_names='v' param_types='sandy.core.data:Point3D' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   Makes this matrix a scale matrix from a Point3D.
      <pre>
   Sx 0  0  0
   0  Sy 0  0
   0  0  Sz 0
   0  0  0  1
   </pre>
      ]]></description>
<param><![CDATA[v The scale Point3D.
   ]]></param>
</method>
<method name='serialize' fullname='sandy.core.data:Matrix4/serialize' isStatic='false' isFinal='false' isOverride='false'  param_names='d' param_types='Number' param_defaults='.000001' result_type='String'>
<description><![CDATA[
   Get a string representation of the {]]></description>
<return><![CDATA[A serialized String representing the {]]></return>
<code><![CDATA[Matrix4}.
   ]]></code>
</method>
<method name='toString' fullname='sandy.core.data:Matrix4/toString' isStatic='false' isFinal='true' isOverride='false'  result_type='String'>
<description><![CDATA[
   Returns a string representation of this object.
      ]]></description>
<return><![CDATA[The fully qualified name of this object.
   ]]></return>
</method>
<method name='transform' fullname='sandy.core.data:Matrix4/transform' isStatic='false' isFinal='true' isOverride='false'  param_names='pv' param_types='sandy.core.data:Point3D' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   Multiplies a Point3D with this matrix.
      ]]></description>
<param><![CDATA[pv The Point3D to be mutliplied.
   ]]></param>
</method>
<method name='transform3x3' fullname='sandy.core.data:Matrix4/transform3x3' isStatic='false' isFinal='true' isOverride='false'  param_names='pv' param_types='sandy.core.data:Point3D' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   Multiplies a Point3D with the upper left 3x3 sub matrix of this matrix.
      ]]></description>
<param><![CDATA[pv The Point3D to be mutliplied.
   ]]></param>
</method>
<method name='translation' fullname='sandy.core.data:Matrix4/translation' isStatic='false' isFinal='true' isOverride='false'  param_names='nTx;nTy;nTz' param_types='Number;Number;Number' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
   Makes this matrix a translation matrix from coordinates.
   
   <pre>
   1  0  0  0
   0  1  0  0
   0  0  1  0
   Tx Ty Tz 1
   </pre>
      ]]></description>
<param><![CDATA[nTx Translation in the x direction.
   ]]></param>
<param><![CDATA[nTy Translation in the y direction.
   ]]></param>
<param><![CDATA[nTz Translation in the z direction.
   ]]></param>
</method>
<method name='translationPoint3D' fullname='sandy.core.data:Matrix4/translationPoint3D' isStatic='false' isFinal='true' isOverride='false'  param_names='v' param_types='sandy.core.data:Point3D' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   Makes this matrix a translation matrix from a Point3D.
      <pre>
   1   0   0   0
   0   1   0   0
   0   0   1   0
   v.x v.y v.z 1
   </pre>
      ]]></description>
<param><![CDATA[v  The translation Point3D.
   ]]></param>
</method>
<method name='zero' fullname='sandy.core.data:Matrix4/zero' isStatic='false' isFinal='true' isOverride='false'  result_type='void'>
<description><![CDATA[
   Makes this matrix into a zero matrix.
      <p>Below is a representation of a zero matrix:</p>
      <pre>
   0 0 0 0
   0 0 0 0
   0 0 0 0
   0 0 0 0
   </pre>
      ]]></description>
<return><![CDATA[The zero matrix.
   ]]></return>
</method>
<field name='USE_FAST_MATH' fullname='sandy.core.data:Matrix4/USE_FAST_MATH' type='Boolean' isStatic='true' isConst='true' defaultValue='false' >
<description><![CDATA[
   Specifies whether fast math should be used.
   ]]></description>
</field>
<field name='_fastMathInitialized' fullname='sandy.core.data:Matrix4/private:_fastMathInitialized' type='Boolean' isStatic='false' isConst='true' defaultValue='unknown' >
</field>
<field name='n11' fullname='sandy.core.data:Matrix4/n11' type='Number' isStatic='false' isConst='false' >
<description><![CDATA[
   Matrix4 cell.
      <pre>
   1 0 0 0
   0 0 0 0
   0 0 0 0
   0 0 0 0
   </pre>
   ]]></description>
</field>
<field name='n12' fullname='sandy.core.data:Matrix4/n12' type='Number' isStatic='false' isConst='false' >
<description><![CDATA[
   Matrix4 cell.
      <pre>
   0 1 0 0
   0 0 0 0
   0 0 0 0
   0 0 0 0
   </pre>
   ]]></description>
</field>
<field name='n13' fullname='sandy.core.data:Matrix4/n13' type='Number' isStatic='false' isConst='false' >
<description><![CDATA[
   Matrix4 cell.
      <pre>
   0 0 1 0
   0 0 0 0
   0 0 0 0
   0 0 0 0
   </pre>
   ]]></description>
</field>
<field name='n14' fullname='sandy.core.data:Matrix4/n14' type='Number' isStatic='false' isConst='false' >
<description><![CDATA[
   Matrix4 cell.
      <pre>
   0 0 0 1
   0 0 0 0
   0 0 0 0
   0 0 0 0
   </pre>
   ]]></description>
</field>
<field name='n21' fullname='sandy.core.data:Matrix4/n21' type='Number' isStatic='false' isConst='false' >
<description><![CDATA[
   Matrix4 cell.
      <pre>
   0 0 0 0
   1 0 0 0
   0 0 0 0
   0 0 0 0
   </pre>
   ]]></description>
</field>
<field name='n22' fullname='sandy.core.data:Matrix4/n22' type='Number' isStatic='false' isConst='false' >
<description><![CDATA[
   Matrix4 cell.
      <pre>
   0 0 0 0
   0 1 0 0
   0 0 0 0
   0 0 0 0
   </pre>
   ]]></description>
</field>
<field name='n23' fullname='sandy.core.data:Matrix4/n23' type='Number' isStatic='false' isConst='false' >
<description><![CDATA[
   Matrix4 cell.
      <pre>
   0 0 0 0
   0 0 1 0
   0 0 0 0
   0 0 0 0
   </pre>
   ]]></description>
</field>
<field name='n24' fullname='sandy.core.data:Matrix4/n24' type='Number' isStatic='false' isConst='false' >
<description><![CDATA[
   Matrix4 cell.
      <pre>
   0 0 0 0
   0 0 0 1
   0 0 0 0
   0 0 0 0
   </pre>
   ]]></description>
</field>
<field name='n31' fullname='sandy.core.data:Matrix4/n31' type='Number' isStatic='false' isConst='false' >
<description><![CDATA[
   Matrix4 cell.
      <pre>
   0 0 0 0
   0 0 0 0
   1 0 0 0
   0 0 0 0
   </pre>
   ]]></description>
</field>
<field name='n32' fullname='sandy.core.data:Matrix4/n32' type='Number' isStatic='false' isConst='false' >
<description><![CDATA[
   Matrix4 cell.
      <pre>
   0 0 0 0
   0 0 0 0
   0 1 0 0
   0 0 0 0
   </pre>
   ]]></description>
</field>
<field name='n33' fullname='sandy.core.data:Matrix4/n33' type='Number' isStatic='false' isConst='false' >
<description><![CDATA[
   Matrix4 cell.
      <pre>
   0 0 0 0
   0 0 0 0
   0 0 1 0
   0 0 0 0
   </pre>
   ]]></description>
</field>
<field name='n34' fullname='sandy.core.data:Matrix4/n34' type='Number' isStatic='false' isConst='false' >
<description><![CDATA[
   Matrix4 cell.
      <pre>
   0 0 0 0
   0 0 0 0
   0 0 0 1
   0 0 0 0
   </pre>
   ]]></description>
</field>
<field name='n41' fullname='sandy.core.data:Matrix4/n41' type='Number' isStatic='false' isConst='false' >
<description><![CDATA[
   Matrix4 cell.
      <pre>
   0 0 0 0
   0 0 0 0
   0 0 0 0
   1 0 0 0
   </pre>
   ]]></description>
</field>
<field name='n42' fullname='sandy.core.data:Matrix4/n42' type='Number' isStatic='false' isConst='false' >
<description><![CDATA[
   Matrix4 cell.
      <pre>
   0 0 0 0
   0 0 0 0
   0 0 0 0
   0 1 0 0
   </pre>
   ]]></description>
</field>
<field name='n43' fullname='sandy.core.data:Matrix4/n43' type='Number' isStatic='false' isConst='false' >
<description><![CDATA[
   Matrix4 cell.
      <pre>
   0 0 0 0
   0 0 0 0
   0 0 0 0
   0 0 1 0
   </pre>
   ]]></description>
</field>
<field name='n44' fullname='sandy.core.data:Matrix4/n44' type='Number' isStatic='false' isConst='false' >
<description><![CDATA[
   Matrix4 cell.
      <pre>
   0 0 0 0
   0 0 0 0
   0 0 0 0
   0 0 0 1
   </pre>
   ]]></description>
</field>
<classRec name='Quaternion' fullname='sandy.core.data:Quaternion' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\core\data\Quaternion.as' namespace='sandy.core.data' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
  The Quaternion class is experimental and not used in this version.
    <p>It is not used at the moment in the library, but should becomes very usefull soon.<br />
  It should be stable but any kind of comments/note about it will be appreciated.</p>
    <p>[<strong>ToDo</strong>: Check the use of and comment this class ]</p>
    ]]></description>
<author><![CDATA[ Thomas Pfeiffer - kiroukou
  ]]></author>
<since><![CDATA[ 0.3
  ]]></since>
<version><![CDATA[ 3.1
  ]]></version>
<date><![CDATA[  24.08.2007
  ]]></date>
</classRec>
<method name='Quaternion' fullname='sandy.core.data:Quaternion/Quaternion' isStatic='false' isFinal='false' isOverride='false'  param_names='px;py;pz;pw' param_types='Number;Number;Number;Number' param_defaults='0;0;0;0' result_type='*'>
<description><![CDATA[
   Creates a quaternion.
      <p>[<strong>ToDo</strong>: What's all this here? ]</p>
   ]]></description>
</method>
<method name='toString' fullname='sandy.core.data:Quaternion/toString' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[
   Returns a string representing this quaternion.
      ]]></description>
<return><![CDATA[The string representatation
   ]]></return>
</method>
<field name='w' fullname='sandy.core.data:Quaternion/w' type='Number' isStatic='false' isConst='false' >
</field>
<field name='x' fullname='sandy.core.data:Quaternion/x' type='Number' isStatic='false' isConst='false' >
</field>
<field name='y' fullname='sandy.core.data:Quaternion/y' type='Number' isStatic='false' isConst='false' >
</field>
<field name='z' fullname='sandy.core.data:Quaternion/z' type='Number' isStatic='false' isConst='false' >
</field>
<classRec name='PrimitiveFace' fullname='sandy.core.data:PrimitiveFace' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\core\data\PrimitiveFace.as' namespace='sandy.core.data' access='public' baseclass='Object' isFinal='true' isDynamic='false' >
<description><![CDATA[ 
  PrimitiveFace is a tool for generated primitive, allowing users (for some specifics primitives) to get the face polygon array
  to have an easier manipulation.
  ]]></description>
<author><![CDATA[ Thomas Pfeiffer - kiroukou
  ]]></author>
<author><![CDATA[ Xavier Martin - zeflasher
  ]]></author>
<version><![CDATA[ 3.1
  ]]></version>
<date><![CDATA[  20.09.2007
  ]]></date>
</classRec>
<method name='PrimitiveFace' fullname='sandy.core.data:PrimitiveFace/PrimitiveFace' isStatic='false' isFinal='false' isOverride='false'  param_names='p_iPrimitive' param_types='sandy.core.scenegraph:Shape3D' param_defaults='undefined' result_type='*'>
<description><![CDATA[
   PrimitiveFace class
   This class is a tool for the primitives. It will stores all the polygons that are owned by the visible primitive face.
   
   ]]></description>
<param><![CDATA[p_iPrimitive The primitive this face will be linked to
   ]]></param>
</method>
<method name='addPolygon' fullname='sandy.core.data:PrimitiveFace/addPolygon' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oPolyId' param_types='uint' param_defaults='undefined' result_type='void'>
</method>
<method name='appearance' fullname='sandy.core.data:PrimitiveFace/appearance/get' isStatic='false' isFinal='false' isOverride='false'  result_type='sandy.materials:Appearance'>
</method>
<method name='primitive' fullname='sandy.core.data:PrimitiveFace/primitive/get' isStatic='false' isFinal='false' isOverride='false'  result_type='sandy.core.scenegraph:Shape3D'>
</method>
<method name='appearance' fullname='sandy.core.data:PrimitiveFace/appearance/set' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oApp' param_types='sandy.materials:Appearance' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   The appearance of this face.
   ]]></description>
</method>
<field name='aPolygons' fullname='sandy.core.data:PrimitiveFace/aPolygons' type='Array' isStatic='false' isConst='false' defaultValue='' >
<description><![CDATA[
   The array containing the polygon instances own by this primitive face
   ]]></description>
</field>
<field name='m_iPrimitive' fullname='sandy.core.data:PrimitiveFace/private:m_iPrimitive' type='sandy.core.scenegraph:Shape3D' isStatic='false' isConst='false' >
</field>
<field name='m_oAppearance' fullname='sandy.core.data:PrimitiveFace/private:m_oAppearance' type='sandy.materials:Appearance' isStatic='false' isConst='false' >
</field>
<classRec name='BSPNode' fullname='sandy.core.data:BSPNode' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\core\data\BSPNode.as' namespace='sandy.core.data' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
  BSP tree node.
  ]]></description>
<author><![CDATA[makc
  ]]></author>
</classRec>
<method name='lazyBSPFaces2Planes' fullname='sandy.core.data:BSPNode/private:lazyBSPFaces2Planes' isStatic='true' isFinal='false' isOverride='false'  param_names='faces;threshold' param_types='Array;Number' param_defaults='undefined;undefined' result_type='Array'>
</method>
<method name='makeLazyBSP' fullname='sandy.core.data:BSPNode/makeLazyBSP' isStatic='true' isFinal='false' isOverride='false'  param_names='faces;threshold' param_types='Array;Number' param_defaults='undefined;undefined' result_type='sandy.core.data:BSPNode'>
<description><![CDATA[
   Creates BSP tree from list of faces without cutting them (hence "lazy").
   Faces are ordered by coplanar area.
   ]]></description>
</method>
<field name='faces' fullname='sandy.core.data:BSPNode/faces' type='Array' isStatic='false' isConst='false' >
</field>
<field name='negative' fullname='sandy.core.data:BSPNode/negative' type='sandy.core.data:BSPNode' isStatic='false' isConst='false' >
</field>
<field name='plane' fullname='sandy.core.data:BSPNode/plane' type='sandy.core.data:Plane' isStatic='false' isConst='false' >
</field>
<field name='positive' fullname='sandy.core.data:BSPNode/positive' type='sandy.core.data:BSPNode' isStatic='false' isConst='false' >
</field>
<classRec name='Polygon' fullname='sandy.core.data:Polygon' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\core\data\Polygon.as' namespace='sandy.core.data' access='public' baseclass='Object' interfaces='sandy.core.scenegraph:IDisplayable' isFinal='true' isDynamic='false' >
<description><![CDATA[
  Polygon's are the building blocks of visible 3D shapes.
    ]]></description>
<author><![CDATA[ Thomas Pfeiffer - kiroukou
  ]]></author>
<author><![CDATA[ Mirek Mencel
  ]]></author>
<see><![CDATA[sandy.core.scenegraph.Shape3D
  ]]></see>
<since><![CDATA[ 1.0
  ]]></since>
<version><![CDATA[ 3.1
  ]]></version>
<date><![CDATA[  24.08.2007
    ]]></date>
</classRec>
<method name='Polygon' fullname='sandy.core.data:Polygon/Polygon' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oOwner;p_geometry;p_aVertexID;p_aUVCoordsID;p_nFaceNormalID;p_nEdgesID' param_types='sandy.core.scenegraph:Shape3D;sandy.core.scenegraph:Geometry3D;Array;Array;Number;uint' param_defaults='undefined;undefined;undefined;null;0;0' result_type='*'>
<description><![CDATA[
   Creates a new polygon.
      ]]></description>
<param><![CDATA[p_oShape   The shape the polygon belongs to.
   ]]></param>
<param><![CDATA[p_geometry  The geometry the polygon belongs to.
   ]]></param>
<param><![CDATA[p_aVertexID  An array of verticies of the polygon.
   ]]></param>
<param><![CDATA[p_aUVCoordsID  An array of UV coordinates of this polygon.
   ]]></param>
<param><![CDATA[p_nFaceNormalID The faceNormalID of this polygon.
   ]]></param>
<param><![CDATA[p_nEdgesID  The edgesID of this polygon.
   ]]></param>
</method>
<method name='__update' fullname='sandy.core.data:Polygon/private:__update' isStatic='false' isFinal='false' isOverride='false'  param_names='p_aVertexID;p_aUVCoordsID;p_nFaceNormalID;p_nEdgeListID' param_types='Array;Array;uint;uint' param_defaults='undefined;undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
   Updates the vertices and normals for this polygon.
      <p>Calling this method make the polygon gets its vertice and normals by reference
   instead of accessing them by their ID.<br/>
   This method shall be called once the geometry created.</p>
      ]]></description>
<param><![CDATA[p_aVertexID  The vertexID array of this polygon
   ]]></param>
<param><![CDATA[p_aUVCoordsID  The UVCoordsID array of this polygon
   ]]></param>
<param><![CDATA[p_nFaceNormalID The faceNormalID of this polygon
   ]]></param>
<param><![CDATA[p_nEdgesID  The edgesID of this polygon
   ]]></param>
</method>
<method name='_beginMaterial' fullname='sandy.core.data:Polygon/private:_beginMaterial' isStatic='false' isFinal='false' isOverride='false'  param_names='pEvt' param_types='sandy.events:SandyEvent' param_defaults='undefined' result_type='void'>
</method>
<method name='_finishMaterial' fullname='sandy.core.data:Polygon/private:_finishMaterial' isStatic='false' isFinal='false' isOverride='false'  param_names='pEvt' param_types='sandy.events:SandyEvent' param_defaults='undefined' result_type='void'>
</method>
<method name='_onInteraction' fullname='sandy.core.data:Polygon/protected:_onInteraction' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oEvt' param_types='flash.events:Event' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='_onTextureInteraction' fullname='sandy.core.data:Polygon/_onTextureInteraction' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oEvt' param_types='flash.events:Event' param_defaults='null' result_type='void'>
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='_startMouseInteraction' fullname='sandy.core.data:Polygon/_startMouseInteraction' isStatic='false' isFinal='false' isOverride='false'  param_names='e' param_types='flash.events:MouseEvent' param_defaults='null' result_type='void'>
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='_stopMouseInteraction' fullname='sandy.core.data:Polygon/_stopMouseInteraction' isStatic='false' isFinal='false' isOverride='false'  param_names='e' param_types='flash.events:MouseEvent' param_defaults='null' result_type='void'>
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='addEventListener' fullname='sandy.core.data:Polygon/addEventListener' isStatic='false' isFinal='false' isOverride='false'  param_names='p_sEvent;oL' param_types='String' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
   Adds an event listener to the polygon.
      ]]></description>
<param><![CDATA[p_sEvent  The name of the event to add.
   ]]></param>
<param><![CDATA[oL   The listener object.
   ]]></param>
</method>
<method name='clear' fullname='sandy.core.data:Polygon/clear' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
   Clears the polygon's container.
   ]]></description>
</method>
<method name='clip' fullname='sandy.core.data:Polygon/clip' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oFrustum' param_types='sandy.view:Frustum' param_defaults='undefined' result_type='Array'>
<description><![CDATA[
   Clips the polygon.
      ]]></description>
<return><![CDATA[An array of vertices clipped by the camera frustum.
   ]]></return>
</method>
<method name='clipFrontPlane' fullname='sandy.core.data:Polygon/clipFrontPlane' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oFrustum' param_types='sandy.view:Frustum' param_defaults='undefined' result_type='Array'>
<description><![CDATA[
   Perform a clipping against the camera frustum's front plane.
      ]]></description>
<return><![CDATA[An array of vertices clipped by the camera frustum's front plane.
   ]]></return>
</method>
<method name='createNormal' fullname='sandy.core.data:Polygon/createNormal' isStatic='false' isFinal='false' isOverride='false'  result_type='sandy.core.data:Point3D'>
<description><![CDATA[
   Returns the normal Point3D of the polygon.
      ]]></description>
<return><![CDATA[The normal Point3D of the polygon.
   ]]></return>
</method>
<method name='createTransformedNormal' fullname='sandy.core.data:Polygon/createTransformedNormal' isStatic='false' isFinal='false' isOverride='false'  result_type='sandy.core.data:Point3D'>
<description><![CDATA[
   Returns the transformed normal Point3D of the polygon.
      ]]></description>
<return><![CDATA[The transformed normal Point3D of the polygon.
   ]]></return>
</method>
<method name='destroy' fullname='sandy.core.data:Polygon/destroy' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
   Removes the polygon's container from the stage.
   ]]></description>
</method>
<method name='display' fullname='sandy.core.data:Polygon/display' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oContainer' param_types='flash.display:Sprite' param_defaults='null' result_type='void'>
<description><![CDATA[
   Draws the polygon on its container if visible.
      ]]></description>
<param><![CDATA[p_oScene  The scene this polygon is rendered in.
   ]]></param>
<param><![CDATA[p_oContainer The container to draw on.
   ]]></param>
</method>
<method name='get3DFrom2D' fullname='sandy.core.data:Polygon/get3DFrom2D' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oScreenPoint' param_types='flash.geom:Point' param_defaults='undefined' result_type='sandy.core.data:Point3D'>
<description><![CDATA[
   Returns a Point3D (3D position) on the polygon relative to the specified point on the 2D screen.
      ]]></description>
<example><![CDATA[Below is an example of how to get the 3D coordinate of the polygon under the position of the mouse:
   <listing version="3.1">
   var screenPoint:Point = new Point(myPolygon.container.mouseX, myPolygon.container.mouseY);
   var scenePosition:Point3D = myPolygon.get3DFrom2D(screenPoint);
         </listing>
         
         ]]></example>
<return><![CDATA[A Point3D that corresponds to the specified point.
         ]]></return>
</method>
<method name='getUVFrom2D' fullname='sandy.core.data:Polygon/getUVFrom2D' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oScreenPoint' param_types='flash.geom:Point' param_defaults='undefined' result_type='sandy.core.data:UVCoord'>
<description><![CDATA[
   Returns a UV coordinate elative to the specified point on the 2D screen.
      ]]></description>
<example><![CDATA[Below is an example of how to get the UV coordinate under the position of the mouse:
   <listing version="3.1">
   var screenPoint:Point = new Point(myPolygon.container.mouseX, myPolygon.container.mouseY);
   var scenePosition:Point3D = myPolygon.getUVFrom2D(screenPoint);
         </listing>
         
         ]]></example>
<return><![CDATA[A the UV coordinate that corresponds to the specified point.
         ]]></return>
</method>
<method name='precompute' fullname='sandy.core.data:Polygon/precompute' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
   Computes several properties of the polygon.
   <p>The computed properties are listed below:</p>
   <ul>
    <li><code>visible</code></li>
    <li><code>minZ</code></li>
    <li><code>depth</code></li>
   </ul>
   ]]></description>
</method>
<method name='removeEventListener' fullname='sandy.core.data:Polygon/removeEventListener' isStatic='false' isFinal='false' isOverride='false'  param_names='p_sEvent;oL' param_types='String' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
   Removes an event listener to the polygon.
      ]]></description>
<param><![CDATA[p_sEvent  The name of the event to remove.
   ]]></param>
<param><![CDATA[oL   The listener object.
   ]]></param>
</method>
<method name='swapCulling' fullname='sandy.core.data:Polygon/swapCulling' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
   Changes which side is the "normal" culling side.
      <p>This method also swaps the front and back skins.</p>
   ]]></description>
</method>
<method name='toString' fullname='sandy.core.data:Polygon/toString' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[
   Returns a string representation of this object.
      ]]></description>
<return><![CDATA[The fully qualified name of this object.
   ]]></return>
</method>
<method name='updateNormal' fullname='sandy.core.data:Polygon/updateNormal' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='appearance' fullname='sandy.core.data:Polygon/appearance/get' isStatic='false' isFinal='false' isOverride='false'  result_type='sandy.materials:Appearance'>
<description><![CDATA[
   The appearance of this polygon.
   ]]></description>
</method>
<method name='area' fullname='sandy.core.data:Polygon/area/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
</method>
<method name='broadcaster' fullname='sandy.core.data:Polygon/broadcaster/get' isStatic='false' isFinal='false' isOverride='false'  result_type='sandy.events:BubbleEventBroadcaster'>
<description><![CDATA[
   The broadcaster of the polygon that sends events to listeners.
   ]]></description>
</method>
<method name='changed' fullname='sandy.core.data:Polygon/changed/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
</method>
<method name='container' fullname='sandy.core.data:Polygon/container/get' isStatic='false' isFinal='false' isOverride='false'  result_type='flash.display:Sprite'>
<description><![CDATA[
   The polygon's container.
   ]]></description>
</method>
<method name='depth' fullname='sandy.core.data:Polygon/depth/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
<description><![CDATA[
   The depth of the polygon.
   ]]></description>
</method>
<method name='enableEvents' fullname='sandy.core.data:Polygon/enableEvents/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
   Specifies whether mouse events are enabled for this polygon.
      <p>To apply events to a polygon, listeners must be added with the <code>addEventListener()</code> method.</p>
      ]]></description>
<see><![CDATA[#addEventListener()
   ]]></see>
</method>
<method name='enableInteractivity' fullname='sandy.core.data:Polygon/enableInteractivity/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
   Specifies whether <code>MouseEvent.ROLL_&#42;</code> events are enabled for this polygon.
      <p>To apply events to a polygon, listeners must be added with the <code>addEventListener()</code> method.</p>
      ]]></description>
<see><![CDATA[#addEventListener()
   ]]></see>
</method>
<method name='material' fullname='sandy.core.data:Polygon/material/get' isStatic='false' isFinal='false' isOverride='false'  result_type='sandy.materials:Material'>
<description><![CDATA[
   Returns the material currently used by the renderer
   ]]></description>
<return><![CDATA[Material the material used to render
   ]]></return>
</method>
<method name='normal' fullname='sandy.core.data:Polygon/normal/get' isStatic='false' isFinal='false' isOverride='false'  result_type='sandy.core.data:Vertex'>
</method>
<method name='scene' fullname='sandy.core.data:Polygon/scene/get' isStatic='false' isFinal='false' isOverride='false'  result_type='sandy.core:Scene3D'>
</method>
<method name='appearance' fullname='sandy.core.data:Polygon/appearance/set' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oApp' param_types='sandy.materials:Appearance' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='depth' fullname='sandy.core.data:Polygon/depth/set' isStatic='false' isFinal='false' isOverride='false'  param_names='p_nDepth' param_types='Number' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='enableEvents' fullname='sandy.core.data:Polygon/enableEvents/set' isStatic='false' isFinal='false' isOverride='false'  param_names='b' param_types='Boolean' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='enableInteractivity' fullname='sandy.core.data:Polygon/enableInteractivity/set' isStatic='false' isFinal='false' isOverride='false'  param_names='p_bState' param_types='Boolean' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='normal' fullname='sandy.core.data:Polygon/normal/set' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oVertex' param_types='sandy.core.data:Vertex' param_defaults='undefined' result_type='void'>
</method>
<method name='scene' fullname='sandy.core.data:Polygon/scene/set' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oScene' param_types='sandy.core:Scene3D' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   A reference to the Scene3D object this polygon is in.
   ]]></description>
</method>
<field name='POLYGON_MAP' fullname='sandy.core.data:Polygon/POLYGON_MAP' type='flash.utils:Dictionary' isStatic='true' isConst='false' defaultValue='' >
<description><![CDATA[
   This property lists all the polygons.
   This is a helper property since it allows all polygons of a scene to be retrieved from a single list by its unique identifier.
   A polygon's unique identifier can be retrieved useing <code>myPolygon.id</code>.
      ]]></description>
<example><![CDATA[The examples below shows how to retrieve a ploygon from this property. 
   <listing version="3.1">
   var p:Polygon = Polygon.POLYGON_MAP[myPolygon.id];
   </listing>
   ]]></example>
</field>
<field name='_ID_' fullname='sandy.core.data:Polygon/private:_ID_' type='uint' isStatic='true' isConst='false' defaultValue='0' >
</field>
<field name='_area' fullname='sandy.core.data:Polygon/private:_area' type='Number' isStatic='false' isConst='false' >
</field>
<field name='a' fullname='sandy.core.data:Polygon/a' type='sandy.core.data:Vertex' isStatic='false' isConst='false' >
</field>
<field name='aEdges' fullname='sandy.core.data:Polygon/aEdges' type='Array' isStatic='false' isConst='false' >
<description><![CDATA[
   An array of the polygon's edges.
   ]]></description>
</field>
<field name='aNeighboors' fullname='sandy.core.data:Polygon/aNeighboors' type='Array' isStatic='false' isConst='false' defaultValue='' >
<description><![CDATA[
   An array of polygons that share an edge with this polygon.
   ]]></description>
</field>
<field name='aUVCoord' fullname='sandy.core.data:Polygon/aUVCoord' type='Array' isStatic='false' isConst='false' >
</field>
<field name='caUVCoord' fullname='sandy.core.data:Polygon/caUVCoord' type='Array' isStatic='false' isConst='false' >
</field>
<field name='cvertices' fullname='sandy.core.data:Polygon/cvertices' type='Array' isStatic='false' isConst='false' >
<description><![CDATA[
   An array of clipped vertices. Check the <code>isClipped</code> property first to see if this array will contain the useful data.
   ]]></description>
</field>
<field name='id' fullname='sandy.core.data:Polygon/id' type='uint' isStatic='false' isConst='true' defaultValue='unknown' >
<description><![CDATA[
   The unique identifier for this polygon.
   ]]></description>
</field>
<field name='isClipped' fullname='sandy.core.data:Polygon/isClipped' type='Boolean' isStatic='false' isConst='false' defaultValue='false' >
<description><![CDATA[
   Specifies if the polygon has been clipped.
   ]]></description>
</field>
<field name='m_bWasOver' fullname='sandy.core.data:Polygon/private:m_bWasOver' type='Boolean' isStatic='false' isConst='false' defaultValue='false' >
</field>
<field name='m_nDepth' fullname='sandy.core.data:Polygon/private:m_nDepth' type='Number' isStatic='false' isConst='false' >
</field>
<field name='m_nNormalId' fullname='sandy.core.data:Polygon/private:m_nNormalId' type='uint' isStatic='false' isConst='false' >
</field>
<field name='m_oAppearance' fullname='sandy.core.data:Polygon/private:m_oAppearance' type='sandy.materials:Appearance' isStatic='false' isConst='false' >
</field>
<field name='m_oContainer' fullname='sandy.core.data:Polygon/protected:m_oContainer' type='flash.display:Sprite' isStatic='false' isConst='false' >
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='m_oEB' fullname='sandy.core.data:Polygon/protected:m_oEB' type='sandy.events:BubbleEventBroadcaster' isStatic='false' isConst='false' >
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='m_oGeometry' fullname='sandy.core.data:Polygon/private:m_oGeometry' type='sandy.core.scenegraph:Geometry3D' isStatic='false' isConst='false' >
<description><![CDATA[ Reference to its owner geometry ]]></description>
</field>
<field name='m_oScene' fullname='sandy.core.data:Polygon/private:m_oScene' type='sandy.core:Scene3D' isStatic='false' isConst='false' defaultValue='null' >
</field>
<field name='minZ' fullname='sandy.core.data:Polygon/minZ' type='Number' isStatic='false' isConst='false' >
<description><![CDATA[
   Minimum depth value of that polygon in the camera space
   ]]></description>
</field>
<field name='mouseEvents' fullname='sandy.core.data:Polygon/private:mouseEvents' type='Boolean' isStatic='false' isConst='false' defaultValue='false' >
<description><![CDATA[ Boolean representing the state of the event activation ]]></description>
</field>
<field name='mouseInteractivity' fullname='sandy.core.data:Polygon/private:mouseInteractivity' type='Boolean' isStatic='false' isConst='false' defaultValue='false' >
</field>
<field name='shape' fullname='sandy.core.data:Polygon/shape' type='sandy.core.scenegraph:Shape3D' isStatic='false' isConst='false' >
<description><![CDATA[
   A reference to the Shape3D object this polygon belongs to.
   ]]></description>
</field>
<field name='uvBounds' fullname='sandy.core.data:Polygon/uvBounds' type='flash.geom:Rectangle' isStatic='false' isConst='false' >
<description><![CDATA[
   The texture bounds.
   ]]></description>
</field>
<field name='vertexNormals' fullname='sandy.core.data:Polygon/vertexNormals' type='Array' isStatic='false' isConst='false' >
<description><![CDATA[
   An array of the polygon's vertex normals.
   ]]></description>
</field>
<field name='vertices' fullname='sandy.core.data:Polygon/vertices' type='Array' isStatic='false' isConst='false' >
<description><![CDATA[
   An array of the polygon's original vertices.
   ]]></description>
</field>
<field name='visible' fullname='sandy.core.data:Polygon/visible' type='Boolean' isStatic='false' isConst='false' >
<description><![CDATA[
   Specifies whether the face of the polygon is visible.
   ]]></description>
</field>
<classRec name='SingletonError' fullname='sandy.errors:SingletonError' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\errors\SingletonError.as' namespace='sandy.errors' access='public' baseclass='Error' isFinal='false' isDynamic='false' >
<description><![CDATA[
  The SingletonError class is used as a workaround for private constructors not existing
  in ActionScript 3.0. Every singleton class in Sandy has a private static variable
  called <code>instance</code>. The <code>instance</code> variable is given a 
  reference to an instance of the class the first time the class constructor or
  <code>getInstance()</code> is called. If an attempt is made to instantiate the
  class a the second time, a <code>SingletonError</code> will be thrown. Always 
  use the static method <code>Class.getInstance()</code> to get an instance of the 
  class.
  
  ]]></description>
<author><![CDATA[ Dennis Ippel - ippeldv
  ]]></author>
<version><![CDATA[ 3.1
  ]]></version>
<date><![CDATA[  26.07.2007
  ]]></date>
</classRec>
<method name='SingletonError' fullname='sandy.errors:SingletonError/SingletonError' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
   All the constructor does is pass the error message to the superclass.
   ]]></description>
</method>
<classRec name='BubbleEvent' fullname='sandy.events:BubbleEvent' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\events\BubbleEvent.as' namespace='sandy.events' access='public' baseclass='flash.events:Event' isFinal='false' isDynamic='false' >
<description><![CDATA[
  BubbleEvent defines a custom event type to work with.
    ]]></description>
<author><![CDATA[Thomas Pfeiffer
  ]]></author>
<see><![CDATA[BubbleEventBroadcaster
  ]]></see>
<version><![CDATA[ 3.1
    ]]></version>
</classRec>
<method name='BubbleEvent' fullname='sandy.events:BubbleEvent/BubbleEvent' isStatic='false' isFinal='false' isOverride='false'  param_names='e;oT' param_types='String;Object' param_defaults='undefined;undefined' result_type='*'>
<description><![CDATA[
   Creates a new BubbleEvent instance.
       ]]></description>
<example><![CDATA[   <listing version="3.1">
     var e:BubbleEvent = new BubbleEvent(MyClass.onSomething, this);
   </listing>
      ]]></example>
<param><![CDATA[e  A name for the event.
   ]]></param>
<param><![CDATA[oT The event target.
   ]]></param>
</method>
<method name='toString' fullname='sandy.events:BubbleEvent/toString' isStatic='false' isFinal='false' isOverride='true'  result_type='String'>
<description><![CDATA[
   Returns the string representation of the event.
      ]]></description>
<return><![CDATA[String representation of this instance.
   ]]></return>
</method>
<method name='object' fullname='sandy.events:BubbleEvent/object/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Object'>
<description><![CDATA[
   The event target.
   ]]></description>
</method>
<field name='m_oTarget' fullname='sandy.events:BubbleEvent/private:m_oTarget' type='Object' isStatic='false' isConst='false' >
</field>
<classRec name='EventBroadcaster' fullname='sandy.events:EventBroadcaster' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\events\EventBroadcaster.as' namespace='sandy.events' access='public' baseclass='flash.events:EventDispatcher' isFinal='false' isDynamic='false' >
<description><![CDATA[
  The event broadcaster of Sandy.
    ]]></description>
<version><![CDATA[ 3.1
  ]]></version>
</classRec>
<method name='EventBroadcaster' fullname='sandy.events:EventBroadcaster/EventBroadcaster' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
</method>
<method name='dispatchEvent' fullname='sandy.events:EventBroadcaster/dispatchEvent' isStatic='false' isFinal='false' isOverride='true'  param_names='evt' param_types='flash.events:Event' param_defaults='undefined' result_type='Boolean'>
</method>
<classRec name='BubbleEventBroadcaster' fullname='sandy.events:BubbleEventBroadcaster' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\events\BubbleEventBroadcaster.as' namespace='sandy.events' access='public' baseclass='sandy.events:EventBroadcaster' isFinal='true' isDynamic='false' >
<description><![CDATA[
  BubbleEventBroadcaster defines a custom event broadcaster to work with.
    ]]></description>
<author><![CDATA[Thomas Pfeiffer - kiroukou
  ]]></author>
<version><![CDATA[ 3.1
  ]]></version>
</classRec>
<method name='BubbleEventBroadcaster' fullname='sandy.events:BubbleEventBroadcaster/BubbleEventBroadcaster' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oTarget' param_types='Object' param_defaults='undefined' result_type='*'>
<description><![CDATA[
   Constructor.
      ]]></description>
</method>
<method name='addChild' fullname='sandy.events:BubbleEventBroadcaster/addChild' isStatic='false' isFinal='false' isOverride='false'  param_names='child' param_types='sandy.events:BubbleEventBroadcaster' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   Starts receiving bubble events from specified child.
      ]]></description>
<param><![CDATA[child A BubbleEventBroadcaster instance that will send bubble events.
   ]]></param>
</method>
<method name='dispatchEvent' fullname='sandy.events:BubbleEventBroadcaster/dispatchEvent' isStatic='false' isFinal='false' isOverride='true'  param_names='e' param_types='flash.events:Event' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='removeChild' fullname='sandy.events:BubbleEventBroadcaster/removeChild' isStatic='false' isFinal='false' isOverride='false'  param_names='child' param_types='sandy.events:BubbleEventBroadcaster' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   Stops receiving bubble events from specified child.
   <p>[<strong>ToDo</strong>: This method has very bad implementation and disabled for the moment. ]</p>
      ]]></description>
<param><![CDATA[child A BubbleEventBroadcaster instance that will stop sending bubble events.
   ]]></param>
</method>
<method name='parent' fullname='sandy.events:BubbleEventBroadcaster/parent/get' isStatic='false' isFinal='false' isOverride='false'  result_type='sandy.events:BubbleEventBroadcaster'>
<description><![CDATA[
   The parent of this broadcaster.
      ]]></description>
</method>
<method name='target' fullname='sandy.events:BubbleEventBroadcaster/target/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Object'>
</method>
<method name='parent' fullname='sandy.events:BubbleEventBroadcaster/parent/set' isStatic='false' isFinal='false' isOverride='false'  param_names='pEB' param_types='sandy.events:BubbleEventBroadcaster' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</method>
<field name='m_oParent' fullname='sandy.events:BubbleEventBroadcaster/private:m_oParent' type='sandy.events:BubbleEventBroadcaster' isStatic='false' isConst='false' defaultValue='null' >
</field>
<field name='m_oTarget' fullname='sandy.events:BubbleEventBroadcaster/private:m_oTarget' type='Object' isStatic='false' isConst='false' >
</field>
<classRec name='QueueEvent' fullname='sandy.events:QueueEvent' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\events\QueueEvent.as' namespace='sandy.events' access='public' baseclass='flash.events:Event' isFinal='false' isDynamic='false' >
<description><![CDATA[
  Conatains events use for loading resources.
    ]]></description>
<see><![CDATA[sandy.util.LoaderQueue
  ]]></see>
<see><![CDATA[BubbleEventBroadcaster
  ]]></see>
<version><![CDATA[ 3.1
    ]]></version>
</classRec>
<method name='QueueEvent' fullname='sandy.events:QueueEvent/QueueEvent' isStatic='false' isFinal='false' isOverride='false'  param_names='type;bubbles;cancelable' param_types='String;Boolean;Boolean' param_defaults='undefined;false;false' result_type='*'>
<description><![CDATA[
   Constructor.
      ]]></description>
<param><![CDATA[type The event type; indicates the action that caused the event.
   ]]></param>
<param><![CDATA[bubbles Specifies whether the event can bubble up the display list hierarchy.
   ]]></param>
<param><![CDATA[cancelable Specifies whether the behavior associated with the event can be prevented.
      ]]></param>
</method>
<method name='clone' fullname='sandy.events:QueueEvent/clone' isStatic='false' isFinal='false' isOverride='true'  result_type='flash.events:Event'>
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='loaders' fullname='sandy.events:QueueEvent/loaders/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Object'>
<description><![CDATA[
      Someone care to explain?
      ]]></description>
</method>
<method name='loaders' fullname='sandy.events:QueueEvent/loaders/set' isStatic='false' isFinal='false' isOverride='false'  param_names='loaderObject' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</method>
<field name='QUEUE_COMPLETE' fullname='sandy.events:QueueEvent/QUEUE_COMPLETE' type='String' isStatic='true' isConst='true' defaultValue='queueComplete' >
<description><![CDATA[
   Defines the value of the <code>type</code> property of a <code>queueComplete</code> event object.
            ]]></description>
<eventType><![CDATA[queueComplete
      ]]></eventType>
</field>
<field name='QUEUE_LOADER_ERROR' fullname='sandy.events:QueueEvent/QUEUE_LOADER_ERROR' type='String' isStatic='true' isConst='true' defaultValue='queueLoaderError' >
<description><![CDATA[
   Defines the value of the <code>type</code> property of a <code>queueLoaderError</code> event object.
            ]]></description>
<eventType><![CDATA[queueLoaderError
      ]]></eventType>
</field>
<field name='QUEUE_RESOURCE_LOADED' fullname='sandy.events:QueueEvent/QUEUE_RESOURCE_LOADED' type='String' isStatic='true' isConst='true' defaultValue='queueResourceLoaded' >
<description><![CDATA[
   Defines the value of the <code>type</code> property of a <code>queueResourceLoaded</code> event object.
            ]]></description>
<eventType><![CDATA[queueResourceLoaded
      ]]></eventType>
</field>
<field name='_loaders' fullname='sandy.events:QueueEvent/private:_loaders' type='Object' isStatic='false' isConst='false' >
</field>
<classRec name='SandyEvent' fullname='sandy.events:SandyEvent' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\events\SandyEvent.as' namespace='sandy.events' access='public' baseclass='flash.events:Event' isFinal='false' isDynamic='false' >
<description><![CDATA[
  Conatains custom Sandy events.
    ]]></description>
<author><![CDATA[Dennis Ippel
  ]]></author>
<see><![CDATA[BubbleEventBroadcaster
  ]]></see>
<version><![CDATA[ 3.1
    ]]></version>
</classRec>
<method name='SandyEvent' fullname='sandy.events:SandyEvent/SandyEvent' isStatic='false' isFinal='false' isOverride='false'  param_names='type;bubbles;cancelable' param_types='String;Boolean;Boolean' param_defaults='undefined;false;false' result_type='*'>
<description><![CDATA[
   Constructor.
      ]]></description>
<param><![CDATA[type The event type; indicates the action that caused the event.
   ]]></param>
<param><![CDATA[bubbles Specifies whether the event can bubble up the display list hierarchy.
   ]]></param>
<param><![CDATA[cancelable Specifies whether the behavior associated with the event can be prevented.
      ]]></param>
</method>
<method name='clone' fullname='sandy.events:SandyEvent/clone' isStatic='false' isFinal='false' isOverride='true'  result_type='flash.events:Event'>
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</method>
<field name='CONTAINER_CREATED' fullname='sandy.events:SandyEvent/CONTAINER_CREATED' type='String' isStatic='true' isConst='true' defaultValue='containerCreated' >
<description><![CDATA[
   Defines the value of the <code>type</code> property of a <code>containerCreated</code> event object.
      Not in use?
            ]]></description>
<eventType><![CDATA[containerCreated
            ]]></eventType>
<see><![CDATA[sandy.core.World3D
      ]]></see>
</field>
<field name='LIGHT_ADDED' fullname='sandy.events:SandyEvent/LIGHT_ADDED' type='String' isStatic='true' isConst='true' defaultValue='lightAdded' >
<description><![CDATA[
   Defines the value of the <code>type</code> property of a <code>lightAdded</code> event object.
            ]]></description>
<eventType><![CDATA[lightAdded
            ]]></eventType>
<see><![CDATA[sandy.core.Scene3D
      ]]></see>
</field>
<field name='LIGHT_COLOR_CHANGED' fullname='sandy.events:SandyEvent/LIGHT_COLOR_CHANGED' type='String' isStatic='true' isConst='true' defaultValue='lightColorChanged' >
<description><![CDATA[
   Defines the value of the <code>type</code> property of a <code>lightColorChanged</code> event object.
            ]]></description>
<eventType><![CDATA[lightColorChanged
            ]]></eventType>
<see><![CDATA[sandy.core.light.Light3D
      ]]></see>
</field>
<field name='LIGHT_UPDATED' fullname='sandy.events:SandyEvent/LIGHT_UPDATED' type='String' isStatic='true' isConst='true' defaultValue='lightUpdated' >
<description><![CDATA[
   Defines the value of the <code>type</code> property of a <code>lightUpdated</code> event object.
            ]]></description>
<eventType><![CDATA[lightUpdated
            ]]></eventType>
<see><![CDATA[sandy.core.light.Light3D
      ]]></see>
</field>
<field name='QUEUE_COMPLETE' fullname='sandy.events:SandyEvent/QUEUE_COMPLETE' type='String' isStatic='true' isConst='true' defaultValue='queueComplete' >
<description><![CDATA[
   Defines the value of the <code>type</code> property of a <code>queueComplete</code> event object.
      Deprecated, use QueueEvent.QUEUE_COMPLETE instead.
            ]]></description>
<eventType><![CDATA[queueComplete
            ]]></eventType>
<see><![CDATA[sandy.util.LoaderQueue
      ]]></see>
</field>
<field name='QUEUE_LOADER_ERROR' fullname='sandy.events:SandyEvent/QUEUE_LOADER_ERROR' type='String' isStatic='true' isConst='true' defaultValue='queueLoaderError' >
<description><![CDATA[
   Defines the value of the <code>type</code> property of a <code>queueLoaderError</code> event object.
      Deprecated, use QueueEvent.QUEUE_LOADER_ERROR instead.
            ]]></description>
<eventType><![CDATA[queueLoaderError
            ]]></eventType>
<see><![CDATA[sandy.util.LoaderQueue
      ]]></see>
</field>
<field name='SCENE_CULL' fullname='sandy.events:SandyEvent/SCENE_CULL' type='String' isStatic='true' isConst='true' defaultValue='scene_cull' >
<description><![CDATA[
   Defines the value of the <code>type</code> property of a <code>scene_cull</code> event object.
            ]]></description>
<eventType><![CDATA[scene_cull
            ]]></eventType>
<see><![CDATA[sandy.core.Scene3D
      ]]></see>
</field>
<field name='SCENE_RENDER' fullname='sandy.events:SandyEvent/SCENE_RENDER' type='String' isStatic='true' isConst='true' defaultValue='scene_render' >
<description><![CDATA[
   Defines the value of the <code>type</code> property of a <code>scene_render</code> event object.
            ]]></description>
<eventType><![CDATA[scene_render
            ]]></eventType>
<see><![CDATA[sandy.core.Scene3D
      ]]></see>
</field>
<field name='SCENE_RENDER_DISPLAYLIST' fullname='sandy.events:SandyEvent/SCENE_RENDER_DISPLAYLIST' type='String' isStatic='true' isConst='true' defaultValue='scene_render_display_list' >
<description><![CDATA[
   Defines the value of the <code>type</code> property of a <code>scene_render_display_list</code> event object.
            ]]></description>
<eventType><![CDATA[scene_render_display_list
            ]]></eventType>
<see><![CDATA[sandy.core.Scene3D
      ]]></see>
</field>
<field name='SCENE_RENDER_FINISH' fullname='sandy.events:SandyEvent/SCENE_RENDER_FINISH' type='String' isStatic='true' isConst='true' defaultValue='scene_render_finish' >
<description><![CDATA[
   Defines the value of the <code>type</code> property of a <code>scene_render_finish</code> event object.
            ]]></description>
<eventType><![CDATA[scene_render_finish
            ]]></eventType>
<see><![CDATA[sandy.core.Scene3D
      ]]></see>
</field>
<field name='SCENE_UPDATE' fullname='sandy.events:SandyEvent/SCENE_UPDATE' type='String' isStatic='true' isConst='true' defaultValue='scene_update' >
<description><![CDATA[
   Defines the value of the <code>type</code> property of a <code>scene_update</code> event object.
            ]]></description>
<eventType><![CDATA[scene_update
            ]]></eventType>
<see><![CDATA[sandy.core.Scene3D
      ]]></see>
</field>
<classRec name='Shape3DEvent' fullname='sandy.events:Shape3DEvent' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\events\Shape3DEvent.as' namespace='sandy.events' access='public' baseclass='sandy.events:BubbleEvent' isFinal='false' isDynamic='false' >
<description><![CDATA[
  This class represents the type of events broadcasted by shapes objects.
  It gives some useful information about the clicked object such as the polygon clicked, and real 3D position of the point under mouse, the UV coordinate under mouse.
  It allows some advanced interaction with the object and its texture.
    ]]></description>
<see><![CDATA[sandy.core.scenegraph.Shape3D
  ]]></see>
<version><![CDATA[ 3.1
    ]]></version>
</classRec>
<method name='Shape3DEvent' fullname='sandy.events:Shape3DEvent/Shape3DEvent' isStatic='false' isFinal='false' isOverride='false'  param_names='e;p_oShape;p_oPolygon;p_oUV;p_oPoint3d;p_oEvent' param_types='String;sandy.core.scenegraph:Shape3D;sandy.core.data:Polygon;sandy.core.data:UVCoord;sandy.core.data:Point3D;flash.events:Event' param_defaults='undefined;undefined;undefined;undefined;undefined;undefined' result_type='*'>
<description><![CDATA[
   Constructs a new Shape3DEvent instance.
      <p>Example
   <code>
     var e:Shape3DEvent = new Shape3DEvent(MyClass.onSomething, theShapeReference, thePolygonReference, theUVCoord, theReal3DIntersectionPoint);
   </code>
      ]]></description>
<param><![CDATA[e    A name for the event.
   ]]></param>
<param><![CDATA[p_oShape  The Shape3D object reference
   ]]></param>
<param><![CDATA[p_oPolygon The Polygon object reference
   ]]></param>
<param><![CDATA[p_oUV   The UVCoord object which corresponds to the UVCoord under mouse position
   ]]></param>
<param><![CDATA[p_oPoint3d The Point3D object which is the real 3D position under the mouse position
   ]]></param>
<param><![CDATA[p_oEvent  The original Flash event instance
         ]]></param>
<see><![CDATA[sandy.core.scenegraph.Scene3D
      ]]></see>
<see><![CDATA[sandy.core.data.Polygon
      ]]></see>
<see><![CDATA[sandy.core.data.UVCoord
      ]]></see>
<see><![CDATA[sandy.core.data.Point3D
   ]]></see>
</method>
<field name='event' fullname='sandy.events:Shape3DEvent/event' type='flash.events:Event' isStatic='false' isConst='false' >
<description><![CDATA[
   Original Flash event instance.
   ]]></description>
</field>
<field name='point' fullname='sandy.events:Shape3DEvent/point' type='sandy.core.data:Point3D' isStatic='false' isConst='false' >
<description><![CDATA[
   Real 3D position of the point under mouse click position.
         ]]></description>
<see><![CDATA[sandy.core.data.Point3D
   ]]></see>
</field>
<field name='polygon' fullname='sandy.events:Shape3DEvent/polygon' type='sandy.core.data:Polygon' isStatic='false' isConst='false' >
<description><![CDATA[
   Polygon that has been clicked.
         ]]></description>
<see><![CDATA[sandy.core.data.Polygon
   ]]></see>
</field>
<field name='shape' fullname='sandy.events:Shape3DEvent/shape' type='sandy.core.scenegraph:Shape3D' isStatic='false' isConst='false' >
<description><![CDATA[
   A reference to the object which has been clicked.
         ]]></description>
<see><![CDATA[sandy.core.scenegraph.Scene3D
   ]]></see>
</field>
<field name='uv' fullname='sandy.events:Shape3DEvent/uv' type='sandy.core.data:UVCoord' isStatic='false' isConst='false' >
<description><![CDATA[
   Real UV coordinate of the point under the mouse click position.
         ]]></description>
<see><![CDATA[sandy.core.data.UVCoord
   ]]></see>
</field>
<classRec name='StarFieldRenderEvent' fullname='sandy.events:StarFieldRenderEvent' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\events\StarFieldRenderEvent.as' namespace='sandy.events' access='public' baseclass='sandy.events:BubbleEvent' isFinal='false' isDynamic='false' >
<description><![CDATA[
  This class represents the type of events broadcasted by StarField objects.
  It gives you some additional control over StarField rendering process.
    ]]></description>
<see><![CDATA[sandy.core.scenegraph.StarField
  ]]></see>
<version><![CDATA[ 3.1
    ]]></version>
</classRec>
<method name='StarFieldRenderEvent' fullname='sandy.events:StarFieldRenderEvent/StarFieldRenderEvent' isStatic='false' isFinal='false' isOverride='false'  param_names='e;p_oStarField;p_oBitmapData;p_bClear' param_types='String;sandy.core.scenegraph:StarField;flash.display:BitmapData;Boolean' param_defaults='undefined;undefined;undefined;undefined' result_type='*'>
<description><![CDATA[
   Constructs a new StarFieldRenderEvent instance.
      ]]></description>
<param><![CDATA[e    A name for the event.
   ]]></param>
<param><![CDATA[p_oStarField  The StarField object reference.
   ]]></param>
<param><![CDATA[p_oBitmapData  The BitmapData object reference.
   ]]></param>
<param><![CDATA[p_bClear  Clearing flag.
      ]]></param>
<see><![CDATA[sandy.core.scenegraph.StarField
   ]]></see>
</method>
<field name='AFTER_RENDER' fullname='sandy.events:StarFieldRenderEvent/AFTER_RENDER' type='String' isStatic='true' isConst='true' defaultValue='afterRender' >
<description><![CDATA[
   Defines the value of the <code>type</code> property of a <code>afterRender</code> event object.
      ]]></description>
<eventType><![CDATA[afterRender
      ]]></eventType>
<see><![CDATA[sandy.core.scenegraph.StarField
   ]]></see>
</field>
<field name='BEFORE_RENDER' fullname='sandy.events:StarFieldRenderEvent/BEFORE_RENDER' type='String' isStatic='true' isConst='true' defaultValue='beforeRender' >
<description><![CDATA[
   Defines the value of the <code>type</code> property of a <code>beforeRender</code> event object.
      ]]></description>
<eventType><![CDATA[beforeRender
      ]]></eventType>
<see><![CDATA[sandy.core.scenegraph.StarField
   ]]></see>
</field>
<field name='bitmapData' fullname='sandy.events:StarFieldRenderEvent/bitmapData' type='flash.display:BitmapData' isStatic='false' isConst='false' defaultValue='null' >
<description><![CDATA[
   The BitmapData object reference.
   ]]></description>
</field>
<field name='clear' fullname='sandy.events:StarFieldRenderEvent/clear' type='Boolean' isStatic='false' isConst='false' >
<description><![CDATA[
   A flag indicating if BitmapData should be cleared by StarField after event.
   Setting this to false in BEFORE_RENDER event will force StarField to keep last frame image.
   ]]></description>
</field>
<interfaceRec name='IParser' fullname='sandy.parser:IParser' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\parser\IParser.as' namespace='sandy.parser' access='public' baseClasses='flash.events:IEventDispatcher' isFinal='false' isDynamic='false' >
<description><![CDATA[
  The IParser interface defines the interface that parser classes such as ColladaParser must implement.
    ]]></description>
<author><![CDATA[ Thomas Pfeiffer - kiroukou
  ]]></author>
<since><![CDATA[ 1.0
  ]]></since>
<version><![CDATA[ 3.1
  ]]></version>
<date><![CDATA[  26.07.2007
  ]]></date>
</interfaceRec>
<method name='parse' fullname='sandy.parser:IParser/sandy.parser:IParser:parse' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
   This method starts the parsing process.
   ]]></description>
</method>
<method name='standardAppearance' fullname='sandy.parser:IParser/sandy.parser:IParser:standardAppearance/set' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oAppearance' param_types='sandy.materials:Appearance' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   Creates a transformable node in the object tree of the world.
      ]]></description>
<param><![CDATA[p_oAppearance The default appearance that will be applied to the parsed object.
   ]]></param>
</method>
<classRec name='Parser3DSChunkTypes' fullname='sandy.parser:Parser3DSChunkTypes' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\parser\Parser3DSChunkTypes.as' namespace='sandy.parser' access='public' baseclass='Object' isFinal='true' isDynamic='false' >
<description><![CDATA[
  Static class that defines the chunks offsets of 3DS file.
    ]]></description>
<author><![CDATA[ Thomas Pfeiffer - kiroukou
  ]]></author>
<since><![CDATA[ 1.0
  ]]></since>
<version><![CDATA[ 3.1
  ]]></version>
<date><![CDATA[  04.08.2007
  ]]></date>
</classRec>
<field name='BACK' fullname='sandy.parser:Parser3DSChunkTypes/BACK' type='uint' isStatic='true' isConst='true' defaultValue='0x0006' >
</field>
<field name='BOGUS' fullname='sandy.parser:Parser3DSChunkTypes/BOGUS' type='uint' isStatic='true' isConst='true' defaultValue='0x0011' >
</field>
<field name='BOTTOM' fullname='sandy.parser:Parser3DSChunkTypes/BOTTOM' type='uint' isStatic='true' isConst='true' defaultValue='0x0002' >
</field>
<field name='CAMERA' fullname='sandy.parser:Parser3DSChunkTypes/CAMERA' type='uint' isStatic='true' isConst='true' defaultValue='0x0008' >
</field>
<field name='CAM_UNKNWN01' fullname='sandy.parser:Parser3DSChunkTypes/CAM_UNKNWN01' type='uint' isStatic='true' isConst='true' defaultValue='0x4710' >
</field>
<field name='CAM_UNKNWN02' fullname='sandy.parser:Parser3DSChunkTypes/CAM_UNKNWN02' type='uint' isStatic='true' isConst='true' defaultValue='0x4720' >
</field>
<field name='COL_RGB' fullname='sandy.parser:Parser3DSChunkTypes/COL_RGB' type='uint' isStatic='true' isConst='true' defaultValue='0x0010' >
</field>
<field name='COL_TRU' fullname='sandy.parser:Parser3DSChunkTypes/COL_TRU' type='uint' isStatic='true' isConst='true' defaultValue='0x0011' >
</field>
<field name='COL_UNK' fullname='sandy.parser:Parser3DSChunkTypes/COL_UNK' type='uint' isStatic='true' isConst='true' defaultValue='0x0013' >
</field>
<field name='DISABLED' fullname='sandy.parser:Parser3DSChunkTypes/DISABLED' type='uint' isStatic='true' isConst='true' defaultValue='0x0010' >
</field>
<field name='EDIT3DS' fullname='sandy.parser:Parser3DSChunkTypes/EDIT3DS' type='uint' isStatic='true' isConst='true' defaultValue='0x3D3D' >
</field>
<field name='EDIT_AMBIENT' fullname='sandy.parser:Parser3DSChunkTypes/EDIT_AMBIENT' type='uint' isStatic='true' isConst='true' defaultValue='0x2100' >
</field>
<field name='EDIT_BACKGR' fullname='sandy.parser:Parser3DSChunkTypes/EDIT_BACKGR' type='uint' isStatic='true' isConst='true' defaultValue='0x1200' >
</field>
<field name='EDIT_CONFIG1' fullname='sandy.parser:Parser3DSChunkTypes/EDIT_CONFIG1' type='uint' isStatic='true' isConst='true' defaultValue='0x0100' >
</field>
<field name='EDIT_CONFIG2' fullname='sandy.parser:Parser3DSChunkTypes/EDIT_CONFIG2' type='uint' isStatic='true' isConst='true' defaultValue='0x3E3D' >
</field>
<field name='EDIT_MATERIAL' fullname='sandy.parser:Parser3DSChunkTypes/EDIT_MATERIAL' type='uint' isStatic='true' isConst='true' defaultValue='0xAFFF' >
</field>
<field name='EDIT_OBJECT' fullname='sandy.parser:Parser3DSChunkTypes/EDIT_OBJECT' type='uint' isStatic='true' isConst='true' defaultValue='0x4000' >
</field>
<field name='EDIT_UNKNW01' fullname='sandy.parser:Parser3DSChunkTypes/EDIT_UNKNW01' type='uint' isStatic='true' isConst='true' defaultValue='0x1100' >
</field>
<field name='EDIT_UNKNW02' fullname='sandy.parser:Parser3DSChunkTypes/EDIT_UNKNW02' type='uint' isStatic='true' isConst='true' defaultValue='0x1201' >
</field>
<field name='EDIT_UNKNW03' fullname='sandy.parser:Parser3DSChunkTypes/EDIT_UNKNW03' type='uint' isStatic='true' isConst='true' defaultValue='0x1300' >
</field>
<field name='EDIT_UNKNW04' fullname='sandy.parser:Parser3DSChunkTypes/EDIT_UNKNW04' type='uint' isStatic='true' isConst='true' defaultValue='0x1400' >
</field>
<field name='EDIT_UNKNW05' fullname='sandy.parser:Parser3DSChunkTypes/EDIT_UNKNW05' type='uint' isStatic='true' isConst='true' defaultValue='0x1420' >
</field>
<field name='EDIT_UNKNW06' fullname='sandy.parser:Parser3DSChunkTypes/EDIT_UNKNW06' type='uint' isStatic='true' isConst='true' defaultValue='0x1450' >
</field>
<field name='EDIT_UNKNW07' fullname='sandy.parser:Parser3DSChunkTypes/EDIT_UNKNW07' type='uint' isStatic='true' isConst='true' defaultValue='0x1500' >
</field>
<field name='EDIT_UNKNW08' fullname='sandy.parser:Parser3DSChunkTypes/EDIT_UNKNW08' type='uint' isStatic='true' isConst='true' defaultValue='0x2200' >
</field>
<field name='EDIT_UNKNW09' fullname='sandy.parser:Parser3DSChunkTypes/EDIT_UNKNW09' type='uint' isStatic='true' isConst='true' defaultValue='0x2201' >
</field>
<field name='EDIT_UNKNW10' fullname='sandy.parser:Parser3DSChunkTypes/EDIT_UNKNW10' type='uint' isStatic='true' isConst='true' defaultValue='0x2210' >
</field>
<field name='EDIT_UNKNW11' fullname='sandy.parser:Parser3DSChunkTypes/EDIT_UNKNW11' type='uint' isStatic='true' isConst='true' defaultValue='0x2300' >
</field>
<field name='EDIT_UNKNW12' fullname='sandy.parser:Parser3DSChunkTypes/EDIT_UNKNW12' type='uint' isStatic='true' isConst='true' defaultValue='0x2302' >
</field>
<field name='EDIT_UNKNW13' fullname='sandy.parser:Parser3DSChunkTypes/EDIT_UNKNW13' type='uint' isStatic='true' isConst='true' defaultValue='0x3000' >
</field>
<field name='EDIT_UNKNW14' fullname='sandy.parser:Parser3DSChunkTypes/EDIT_UNKNW14' type='uint' isStatic='true' isConst='true' defaultValue='0xAFFF' >
</field>
<field name='EDIT_VIEW1' fullname='sandy.parser:Parser3DSChunkTypes/EDIT_VIEW1' type='uint' isStatic='true' isConst='true' defaultValue='0x7001' >
</field>
<field name='EDIT_VIEW_P1' fullname='sandy.parser:Parser3DSChunkTypes/EDIT_VIEW_P1' type='uint' isStatic='true' isConst='true' defaultValue='0x7012' >
</field>
<field name='EDIT_VIEW_P2' fullname='sandy.parser:Parser3DSChunkTypes/EDIT_VIEW_P2' type='uint' isStatic='true' isConst='true' defaultValue='0x7011' >
</field>
<field name='EDIT_VIEW_P3' fullname='sandy.parser:Parser3DSChunkTypes/EDIT_VIEW_P3' type='uint' isStatic='true' isConst='true' defaultValue='0x7020' >
</field>
<field name='FRONT' fullname='sandy.parser:Parser3DSChunkTypes/FRONT' type='uint' isStatic='true' isConst='true' defaultValue='0x0005' >
</field>
<field name='KEYF3DS' fullname='sandy.parser:Parser3DSChunkTypes/KEYF3DS' type='uint' isStatic='true' isConst='true' defaultValue='0xB000' >
</field>
<field name='KEYF_FRAMES' fullname='sandy.parser:Parser3DSChunkTypes/KEYF_FRAMES' type='uint' isStatic='true' isConst='true' defaultValue='0xB008' >
</field>
<field name='KEYF_OBJDES' fullname='sandy.parser:Parser3DSChunkTypes/KEYF_OBJDES' type='uint' isStatic='true' isConst='true' defaultValue='0xB002' >
</field>
<field name='KEYF_UNKNWN01' fullname='sandy.parser:Parser3DSChunkTypes/KEYF_UNKNWN01' type='uint' isStatic='true' isConst='true' defaultValue='0xB009' >
</field>
<field name='KEYF_UNKNWN02' fullname='sandy.parser:Parser3DSChunkTypes/KEYF_UNKNWN02' type='uint' isStatic='true' isConst='true' defaultValue='0xB00A' >
</field>
<field name='LEFT' fullname='sandy.parser:Parser3DSChunkTypes/LEFT' type='uint' isStatic='true' isConst='true' defaultValue='0x0003' >
</field>
<field name='LIGHT' fullname='sandy.parser:Parser3DSChunkTypes/LIGHT' type='uint' isStatic='true' isConst='true' defaultValue='0x0009' >
</field>
<field name='LIT_OFF' fullname='sandy.parser:Parser3DSChunkTypes/LIT_OFF' type='uint' isStatic='true' isConst='true' defaultValue='0x4620' >
</field>
<field name='LIT_SPOT' fullname='sandy.parser:Parser3DSChunkTypes/LIT_SPOT' type='uint' isStatic='true' isConst='true' defaultValue='0x4610' >
</field>
<field name='LIT_UNKNWN01' fullname='sandy.parser:Parser3DSChunkTypes/LIT_UNKNWN01' type='uint' isStatic='true' isConst='true' defaultValue='0x465A' >
</field>
<field name='MAIN3DS' fullname='sandy.parser:Parser3DSChunkTypes/MAIN3DS' type='uint' isStatic='true' isConst='true' defaultValue='0x4D4D' >
</field>
<field name='MAT_NAME' fullname='sandy.parser:Parser3DSChunkTypes/MAT_NAME' type='uint' isStatic='true' isConst='true' defaultValue='0xA000' >
</field>
<field name='MAT_TEXFLNM' fullname='sandy.parser:Parser3DSChunkTypes/MAT_TEXFLNM' type='uint' isStatic='true' isConst='true' defaultValue='0xA300' >
</field>
<field name='MAT_TEXMAP' fullname='sandy.parser:Parser3DSChunkTypes/MAT_TEXMAP' type='uint' isStatic='true' isConst='true' defaultValue='0xA200' >
</field>
<field name='NODE_HDR' fullname='sandy.parser:Parser3DSChunkTypes/NODE_HDR' type='uint' isStatic='true' isConst='true' defaultValue='0xB010' >
</field>
<field name='NODE_ID' fullname='sandy.parser:Parser3DSChunkTypes/NODE_ID' type='uint' isStatic='true' isConst='true' defaultValue='0xB030' >
</field>
<field name='OBJ_CAMERA' fullname='sandy.parser:Parser3DSChunkTypes/OBJ_CAMERA' type='uint' isStatic='true' isConst='true' defaultValue='0x4700' >
</field>
<field name='OBJ_LIGHT' fullname='sandy.parser:Parser3DSChunkTypes/OBJ_LIGHT' type='uint' isStatic='true' isConst='true' defaultValue='0x4600' >
</field>
<field name='OBJ_TRIMESH' fullname='sandy.parser:Parser3DSChunkTypes/OBJ_TRIMESH' type='uint' isStatic='true' isConst='true' defaultValue='0x4100' >
</field>
<field name='OBJ_UNKNWN01' fullname='sandy.parser:Parser3DSChunkTypes/OBJ_UNKNWN01' type='uint' isStatic='true' isConst='true' defaultValue='0x4010' >
</field>
<field name='OBJ_UNKNWN02' fullname='sandy.parser:Parser3DSChunkTypes/OBJ_UNKNWN02' type='uint' isStatic='true' isConst='true' defaultValue='0x4012' >
</field>
<field name='PIVOT' fullname='sandy.parser:Parser3DSChunkTypes/PIVOT' type='uint' isStatic='true' isConst='true' defaultValue='0xB013' >
</field>
<field name='POS_TRACK_TAG' fullname='sandy.parser:Parser3DSChunkTypes/POS_TRACK_TAG' type='uint' isStatic='true' isConst='true' defaultValue='0xB020' >
</field>
<field name='RIGHT' fullname='sandy.parser:Parser3DSChunkTypes/RIGHT' type='uint' isStatic='true' isConst='true' defaultValue='0x0004' >
</field>
<field name='ROT_TRACK_TAG' fullname='sandy.parser:Parser3DSChunkTypes/ROT_TRACK_TAG' type='uint' isStatic='true' isConst='true' defaultValue='0xB021' >
</field>
<field name='SCL_TRACK_TAG' fullname='sandy.parser:Parser3DSChunkTypes/SCL_TRACK_TAG' type='uint' isStatic='true' isConst='true' defaultValue='0xB022' >
</field>
<field name='TOP' fullname='sandy.parser:Parser3DSChunkTypes/TOP' type='uint' isStatic='true' isConst='true' defaultValue='0x0001' >
</field>
<field name='TRI_FACEL1' fullname='sandy.parser:Parser3DSChunkTypes/TRI_FACEL1' type='uint' isStatic='true' isConst='true' defaultValue='0x4120' >
</field>
<field name='TRI_FACEL2' fullname='sandy.parser:Parser3DSChunkTypes/TRI_FACEL2' type='uint' isStatic='true' isConst='true' defaultValue='0x4111' >
</field>
<field name='TRI_LOCAL' fullname='sandy.parser:Parser3DSChunkTypes/TRI_LOCAL' type='uint' isStatic='true' isConst='true' defaultValue='0x4160' >
</field>
<field name='TRI_MATERIAL' fullname='sandy.parser:Parser3DSChunkTypes/TRI_MATERIAL' type='uint' isStatic='true' isConst='true' defaultValue='0x4130' >
</field>
<field name='TRI_SMOOTH' fullname='sandy.parser:Parser3DSChunkTypes/TRI_SMOOTH' type='uint' isStatic='true' isConst='true' defaultValue='0x4150' >
</field>
<field name='TRI_TEXCOORD' fullname='sandy.parser:Parser3DSChunkTypes/TRI_TEXCOORD' type='uint' isStatic='true' isConst='true' defaultValue='0x4140' >
</field>
<field name='TRI_VERTEXL' fullname='sandy.parser:Parser3DSChunkTypes/TRI_VERTEXL' type='uint' isStatic='true' isConst='true' defaultValue='0x4110' >
</field>
<field name='TRI_VISIBLE' fullname='sandy.parser:Parser3DSChunkTypes/TRI_VISIBLE' type='uint' isStatic='true' isConst='true' defaultValue='0x4165' >
</field>
<field name='USER' fullname='sandy.parser:Parser3DSChunkTypes/USER' type='uint' isStatic='true' isConst='true' defaultValue='0x0007' >
</field>
<classRec name='ParserEvent' fullname='sandy.parser:ParserEvent' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\parser\ParserEvent.as' namespace='sandy.parser' access='public' baseclass='flash.events:Event' isFinal='true' isDynamic='false' >
<description><![CDATA[
  Events that are used by the parser classes.
  
  ]]></description>
<author><![CDATA[ Thomas Pfeiffer - kiroukou
  ]]></author>
<version><![CDATA[ 3.1
  ]]></version>
<date><![CDATA[  16.03.2007
  ]]></date>
</classRec>
<method name='ParserEvent' fullname='sandy.parser:ParserEvent/ParserEvent' isStatic='false' isFinal='false' isOverride='false'  param_names='p_sType' param_types='String' param_defaults='undefined' result_type='*'>
<description><![CDATA[
   The ParserEvent constructor
   
   ]]></description>
<param><![CDATA[p_sType  The event type string
   ]]></param>
</method>
<field name='FAIL' fullname='sandy.parser:ParserEvent/FAIL' type='String' isStatic='true' isConst='true' defaultValue='onFailEVENT' >
<description><![CDATA[
   Defines the value of the <code>type</code> property of a <code>onFailEVENT</code> event object.
            ]]></description>
<eventType><![CDATA[onFailEVENT
      ]]></eventType>
</field>
<field name='INIT' fullname='sandy.parser:ParserEvent/INIT' type='String' isStatic='true' isConst='true' defaultValue='onInitEVENT' >
<description><![CDATA[
   Defines the value of the <code>type</code> property of a <code>onInitEVENT</code> event object.
            ]]></description>
<eventType><![CDATA[onInitEVENT
      ]]></eventType>
</field>
<field name='LOAD' fullname='sandy.parser:ParserEvent/LOAD' type='String' isStatic='true' isConst='true' defaultValue='onLoadEVENT' >
<description><![CDATA[
   Defines the value of the <code>type</code> property of a <code>onLoadEVENT</code> event object.
            ]]></description>
<eventType><![CDATA[onLoadEVENT
      ]]></eventType>
</field>
<field name='PARSING' fullname='sandy.parser:ParserEvent/PARSING' type='String' isStatic='true' isConst='true' defaultValue='onParsingEVENT' >
<description><![CDATA[
   Defines the value of the <code>type</code> property of a <code>onParsingEVENT</code> event object.
            ]]></description>
<eventType><![CDATA[onParsingEVENT
      ]]></eventType>
</field>
<field name='PROGRESS' fullname='sandy.parser:ParserEvent/PROGRESS' type='String' isStatic='true' isConst='true' defaultValue='onProgressEVENT' >
<description><![CDATA[
   Defines the value of the <code>type</code> property of a <code>onProgressEVENT</code> event object.
            ]]></description>
<eventType><![CDATA[onProgressEVENT
      ]]></eventType>
</field>
<field name='group' fullname='sandy.parser:ParserEvent/group' type='sandy.core.scenegraph:Group' isStatic='false' isConst='false' >
<description><![CDATA[
   The group the object will be assigned to.
   ]]></description>
</field>
<field name='percent' fullname='sandy.parser:ParserEvent/percent' type='Number' isStatic='false' isConst='false' >
<description><![CDATA[
   The percent of the loading that is complete.
   ]]></description>
</field>
<classRec name='AParser' fullname='sandy.parser:AParser' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\parser\AParser.as' namespace='sandy.parser' access='public' baseclass='flash.events:EventDispatcher' interfaces='sandy.parser:IParser' isFinal='false' isDynamic='false' >
<description><![CDATA[
  ABSTRACT CLASS - super class for all parser objects.
    <p>This class should not be directly instatiated, but sub classed.<br/>
  The AParser class is responsible for creating the root Group, loading files
  and handling the corresponding events.</p>
    ]]></description>
<author><![CDATA[ Thomas Pfeiffer - kiroukou
  ]]></author>
<since><![CDATA[ 1.0
  ]]></since>
<version><![CDATA[ 3.1
  ]]></version>
<date><![CDATA[  26.07.2007
  ]]></date>
</classRec>
<method name='AParser' fullname='sandy.parser:AParser/AParser' isStatic='false' isFinal='false' isOverride='false'  param_names='p_sFile;p_nScale;p_sTextureExtension' param_types=';Number;String' param_defaults='undefined;1;null' result_type='*'>
<description><![CDATA[
   Creates a parser object. Creates a root Group, default appearance
   and sets up an URLLoader.
      ]]></description>
<param><![CDATA[p_sFile  Must be either a text string containing the location
         to a file or an embedded object.
   ]]></param>
<param><![CDATA[p_nScale  The scale amount.
   ]]></param>
<param><![CDATA[p_sTextureExtension Overrides texture extension.
   ]]></param>
</method>
<method name='_io_error' fullname='sandy.parser:AParser/private:_io_error' isStatic='false' isFinal='false' isOverride='false'  param_names='e' param_types='flash.events:IOErrorEvent' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   Called when an I/O error occurs.
      ]]></description>
<param><![CDATA[e The error event.
   ]]></param>
</method>
<method name='applyTextureToShape' fullname='sandy.parser:AParser/protected:applyTextureToShape' isStatic='false' isFinal='false' isOverride='false'  param_names='shape;texture' param_types='Object;String' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='changeExt' fullname='sandy.parser:AParser/protected:changeExt' isStatic='false' isFinal='false' isOverride='false'  param_names='s' param_types='String' param_defaults='undefined' result_type='String'>
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='dispatchInitEvent' fullname='sandy.parser:AParser/protected:dispatchInitEvent' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='onProgress' fullname='sandy.parser:AParser/protected:onProgress' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oEvt' param_types='flash.events:ProgressEvent' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='onTexturesloadComplete' fullname='sandy.parser:AParser/private:onTexturesloadComplete' isStatic='false' isFinal='false' isOverride='false'  param_names='e' param_types='sandy.events:QueueEvent' param_defaults='undefined' result_type='void'>
</method>
<method name='onTexturesloadError' fullname='sandy.parser:AParser/private:onTexturesloadError' isStatic='false' isFinal='false' isOverride='false'  param_names='e' param_types='flash.events:Event' param_defaults='null' result_type='void'>
</method>
<method name='parse' fullname='sandy.parser:AParser/parse' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
   Load the file that needs to be parsed. When done, call the parseData method.
   ]]></description>
</method>
<method name='parseData' fullname='sandy.parser:AParser/protected:parseData' isStatic='false' isFinal='false' isOverride='false'  param_names='e' param_types='flash.events:Event' param_defaults='null' result_type='void'>
<description><![CDATA[
   ]]></description>
<param><![CDATA[e  The event object.
   ]]></param>
<private><![CDATA[]]></private>
</method>
<method name='standardAppearance' fullname='sandy.parser:AParser/standardAppearance/set' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oAppearance' param_types='sandy.materials:Appearance' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   Set the standard appearance for all the parsed objects.
      ]]></description>
<param><![CDATA[p_oAppearance  The standard appearance.
   ]]></param>
</method>
<field name='RELATIVE_TEXTURE_PATH' fullname='sandy.parser:AParser/RELATIVE_TEXTURE_PATH' type='String' isStatic='false' isConst='false' defaultValue='.' >
<description><![CDATA[
   Default path for images.
   ]]></description>
</field>
<field name='m_aShapes' fullname='sandy.parser:AParser/private:m_aShapes' type='Array' isStatic='false' isConst='false' >
</field>
<field name='m_aTextures' fullname='sandy.parser:AParser/private:m_aTextures' type='Array' isStatic='false' isConst='false' >
</field>
<field name='m_nScale' fullname='sandy.parser:AParser/protected:m_nScale' type='Number' isStatic='false' isConst='false' >
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='m_oFile' fullname='sandy.parser:AParser/protected:m_oFile' type='Object' isStatic='false' isConst='false' >
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='m_oFileLoader' fullname='sandy.parser:AParser/protected:m_oFileLoader' type='flash.net:URLLoader' isStatic='false' isConst='false' >
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='m_oGroup' fullname='sandy.parser:AParser/protected:m_oGroup' type='sandy.core.scenegraph:Group' isStatic='false' isConst='false' >
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='m_oLoader' fullname='sandy.parser:AParser/protected:m_oLoader' type='flash.net:URLLoader' isStatic='false' isConst='true' defaultValue='' >
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='m_oQueue' fullname='sandy.parser:AParser/private:m_oQueue' type='sandy.util:LoaderQueue' isStatic='false' isConst='false' >
</field>
<field name='m_oStandardAppearance' fullname='sandy.parser:AParser/protected:m_oStandardAppearance' type='sandy.materials:Appearance' isStatic='false' isConst='false' >
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='m_sDataFormat' fullname='sandy.parser:AParser/protected:m_sDataFormat' type='String' isStatic='false' isConst='false' >
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='m_sTextureExtension' fullname='sandy.parser:AParser/private:m_sTextureExtension' type='String' isStatic='false' isConst='false' >
</field>
<field name='m_sUrl' fullname='sandy.parser:AParser/private:m_sUrl' type='String' isStatic='false' isConst='false' >
</field>
<classRec name='ParserStack' fullname='sandy.parser:ParserStack' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\parser\ParserStack.as' namespace='sandy.parser' access='public' baseclass='flash.events:EventDispatcher' isFinal='false' isDynamic='false' >
<description><![CDATA[
     ParserStack utility class.
     <p>An utility class that acts as a parser stack. You can a set of parser objects, and it process to the loading/parsing automatially and sequentially.</p>
          ]]></description>
<author><![CDATA[     Thomas Pfeiffer - kiroukou
     ]]></author>
<since><![CDATA[      3.0
  ]]></since>
<version><![CDATA[ 3.1
     ]]></version>
<date><![CDATA[       12.02.2008
     ]]></date>
<metadata>
	<Event owner='sandy.parser:ParserStack' name='parserstack_complete' type='sandy.parser.ParserStack' >
<description><![CDATA[
 Dispatched when the parsing process is complete.
  ]]></description>
<eventType><![CDATA[sandy.parser.ParserStack.COMPLETE
 ]]></eventType>
	</Event>
</metadata>
<metadata>
	<Event owner='sandy.parser:ParserStack' name='parserstack_error' type='sandy.parser.ParserStack' >
<description><![CDATA[
 Dispatched when an error occurs in the parsing process.
  ]]></description>
<eventType><![CDATA[sandy.parser.ParserStack.ERROR
 ]]></eventType>
	</Event>
</metadata>
<metadata>
	<Event owner='sandy.parser:ParserStack' name='parserstack_progress' type='sandy.parser.ParserStack' >
<description><![CDATA[
 Dispatched when data is received as the parsing progresses.
  ]]></description>
<eventType><![CDATA[sandy.parser.ParserStack.PROGRESS
 ]]></eventType>
	</Event>
</metadata>
</classRec>
<method name='ParserStack' fullname='sandy.parser:ParserStack/ParserStack' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
   Constructor.
   ]]></description>
</method>
<method name='add' fullname='sandy.parser:ParserStack/add' isStatic='false' isFinal='false' isOverride='false'  param_names='p_sName;p_oParser' param_types='String;sandy.parser:IParser' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
   Add a parser to the list.
   ]]></description>
<param><![CDATA[p_sName the parser name to reference with
   ]]></param>
<param><![CDATA[p_oParser The parser instance
   ]]></param>
</method>
<method name='clear' fullname='sandy.parser:ParserStack/clear' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
   Clears the stack.
   ]]></description>
</method>
<method name='getGroupByName' fullname='sandy.parser:ParserStack/getGroupByName' isStatic='false' isFinal='false' isOverride='false'  param_names='p_sName' param_types='String' param_defaults='undefined' result_type='sandy.core.scenegraph:Group'>
<description><![CDATA[
   Get the parser group object associated with the parser name.
   Returns null if no parser is associated with that name
   ]]></description>
</method>
<method name='getParserByName' fullname='sandy.parser:ParserStack/getParserByName' isStatic='false' isFinal='false' isOverride='false'  param_names='p_sName' param_types='String' param_defaults='undefined' result_type='sandy.parser:IParser'>
<description><![CDATA[
   Retrieve the parser you stored by the associated name.
   If no parser with that name is found, null is returned
   ]]></description>
</method>
<method name='goNext' fullname='sandy.parser:ParserStack/private:goNext' isStatic='false' isFinal='false' isOverride='false'  param_names='pEvt' param_types='sandy.parser:ParserEvent' param_defaults='null' result_type='void'>
</method>
<method name='onFail' fullname='sandy.parser:ParserStack/private:onFail' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oEvent' param_types='sandy.parser:ParserEvent' param_defaults='undefined' result_type='void'>
</method>
<method name='onFinish' fullname='sandy.parser:ParserStack/private:onFinish' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oEvent' param_types='sandy.parser:ParserEvent' param_defaults='undefined' result_type='void'>
</method>
<method name='onProgress' fullname='sandy.parser:ParserStack/private:onProgress' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oEvent' param_types='sandy.parser:ParserEvent' param_defaults='undefined' result_type='void'>
</method>
<method name='start' fullname='sandy.parser:ParserStack/start' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
   Launch the loading/parsing process.
   ]]></description>
</method>
<field name='COMPLETE' fullname='sandy.parser:ParserStack/COMPLETE' type='String' isStatic='true' isConst='true' defaultValue='parserstack_complete' >
<description><![CDATA[
   Defines the value of the <code>type</code> property of a <code>parserstack_complete</code> event object.
            ]]></description>
<eventType><![CDATA[parserstack_complete
   ]]></eventType>
</field>
<field name='ERROR' fullname='sandy.parser:ParserStack/ERROR' type='String' isStatic='true' isConst='true' defaultValue='parserstack_error' >
<description><![CDATA[
   Defines the value of the <code>type</code> property of a <code>parserstack_error</code> event object.
            ]]></description>
<eventType><![CDATA[parserstack_error
   ]]></eventType>
</field>
<field name='PROGRESS' fullname='sandy.parser:ParserStack/PROGRESS' type='String' isStatic='true' isConst='true' defaultValue='parserstack_progress' >
<description><![CDATA[
   Defines the value of the <code>type</code> property of a <code>parserstack_progress</code> event object.
            ]]></description>
<eventType><![CDATA[parserstack_progress
   ]]></eventType>
</field>
<field name='m_aList' fullname='sandy.parser:ParserStack/private:m_aList' type='Array' isStatic='false' isConst='false' defaultValue='' >
</field>
<field name='m_nId' fullname='sandy.parser:ParserStack/private:m_nId' type='int' isStatic='false' isConst='false' defaultValue='0' >
</field>
<field name='m_oGroupMap' fullname='sandy.parser:ParserStack/private:m_oGroupMap' type='flash.utils:Dictionary' isStatic='false' isConst='false' defaultValue='' >
</field>
<field name='m_oMap' fullname='sandy.parser:ParserStack/private:m_oMap' type='flash.utils:Dictionary' isStatic='false' isConst='false' defaultValue='' >
</field>
<field name='m_oNameMap' fullname='sandy.parser:ParserStack/private:m_oNameMap' type='flash.utils:Dictionary' isStatic='false' isConst='false' defaultValue='' >
</field>
<field name='m_oParser' fullname='sandy.parser:ParserStack/private:m_oParser' type='sandy.parser:AParser' isStatic='false' isConst='false' >
</field>
<field name='progress' fullname='sandy.parser:ParserStack/progress' type='Number' isStatic='false' isConst='false' defaultValue='0' >
<description><![CDATA[
   The percent of the loading that is complete.
   ]]></description>
</field>
<classRec name='Parser3DS' fullname='sandy.parser:Parser3DS' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\parser\Parser3DS.as' namespace='sandy.parser' access='public' baseclass='sandy.parser:AParser' interfaces='sandy.parser:IParser' isFinal='true' isDynamic='false' >
<description><![CDATA[
  Transforms a 3DS file into Sandy geometries.
  <p>Creates a Group as rootnode which appends all geometries it finds.
    ]]></description>
<author><![CDATA[ Thomas Pfeiffer - kiroukou
  ]]></author>
<example><![CDATA[To parse a 3DS file at runtime:
    <listing version="3.1">
      var parser:IParser = Parser.create( "/path/to/my/3dsfile.3ds", Parser.MAX_3DS );
  </listing>
    ]]></example>
<since><![CDATA[ 1.0
  ]]></since>
<version><![CDATA[ 3.1
  ]]></version>
<date><![CDATA[  26.07.2007
    ]]></date>
</classRec>
<method name='Parser3DS' fullname='sandy.parser:Parser3DS/Parser3DS' isStatic='false' isFinal='false' isOverride='false'  param_names='p_sUrl;p_nScale;p_sTextureExtension' param_types='String;Number;String' param_defaults='undefined;1;null' result_type='*'>
<description><![CDATA[
   Creates a new Parser3DS instance.
      ]]></description>
<param><![CDATA[p_sUrl  A String pointing to the location of the 3DS file
   ]]></param>
<param><![CDATA[p_nScale  The scale factor
   ]]></param>
<param><![CDATA[p_sTextureExtension Overrides texture extension. You might want to use it for models that
   specify BMP textures.
   ]]></param>
</method>
<method name='_applyMatrixToShape' fullname='sandy.parser:Parser3DS/private:_applyMatrixToShape' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oShape;p_oMatrix' param_types='sandy.core.scenegraph:Shape3D;sandy.core.data:Matrix4' param_defaults='undefined;undefined' result_type='void'>
</method>
<method name='parseData' fullname='sandy.parser:Parser3DS/protected:parseData' isStatic='false' isFinal='false' isOverride='true'  param_names='e' param_types='flash.events:Event' param_defaults='null' result_type='void'>
<description><![CDATA[
   ]]></description>
<param><![CDATA[e    The Event object
   ]]></param>
<private><![CDATA[]]></private>
</method>
<method name='readByte' fullname='sandy.parser:Parser3DS/private:readByte' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
   Reads a byte from a ByteArray
      ]]></description>
<return><![CDATA[ A byte
   ]]></return>
</method>
<method name='readChar' fullname='sandy.parser:Parser3DS/private:readChar' isStatic='false' isFinal='false' isOverride='false'  result_type='uint'>
<description><![CDATA[
   Reads a character (unsigned byte) from a ByteArray
      ]]></description>
<return><![CDATA[A character
   ]]></return>
</method>
<method name='readInt' fullname='sandy.parser:Parser3DS/private:readInt' isStatic='false' isFinal='false' isOverride='false'  result_type='uint'>
<description><![CDATA[
   Reads an integer from a ByteArray
      ]]></description>
<return><![CDATA[An integer
   ]]></return>
</method>
<method name='readPoint3D' fullname='sandy.parser:Parser3DS/private:readPoint3D' isStatic='false' isFinal='false' isOverride='false'  result_type='sandy.core.data:Point3D'>
<description><![CDATA[
   Reads a Point3D from a ByteArray
      ]]></description>
<return><![CDATA[A Point3D containing the x, y, z values
   ]]></return>
</method>
<method name='readString' fullname='sandy.parser:Parser3DS/private:readString' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[
   Reads a string from a ByteArray
      ]]></description>
<return><![CDATA[ A String
   ]]></return>
</method>
<field name='_animation' fullname='sandy.parser:Parser3DS/private:_animation' type='Array' isStatic='false' isConst='false' >
</field>
<field name='_rot_m' fullname='sandy.parser:Parser3DS/private:_rot_m' type='Array' isStatic='false' isConst='false' >
</field>
<field name='currentMaterialName' fullname='sandy.parser:Parser3DS/private:currentMaterialName' type='String' isStatic='false' isConst='false' >
</field>
<field name='currentMeshMaterialName' fullname='sandy.parser:Parser3DS/private:currentMeshMaterialName' type='String' isStatic='false' isConst='false' >
</field>
<field name='currentMeshMaterialsMap' fullname='sandy.parser:Parser3DS/private:currentMeshMaterialsMap' type='Array' isStatic='false' isConst='false' >
</field>
<field name='currentObjectName' fullname='sandy.parser:Parser3DS/private:currentObjectName' type='String' isStatic='false' isConst='false' >
</field>
<field name='data' fullname='sandy.parser:Parser3DS/private:data' type='flash.utils:ByteArray' isStatic='false' isConst='false' >
</field>
<field name='endFrame' fullname='sandy.parser:Parser3DS/private:endFrame' type='uint' isStatic='false' isConst='false' >
</field>
<field name='lastRotation' fullname='sandy.parser:Parser3DS/private:lastRotation' type='sandy.core.data:Quaternion' isStatic='false' isConst='false' >
</field>
<field name='startFrame' fullname='sandy.parser:Parser3DS/private:startFrame' type='uint' isStatic='false' isConst='false' >
</field>
<field name='textureFileNames' fullname='sandy.parser:Parser3DS/private:textureFileNames' type='Array' isStatic='false' isConst='false' >
</field>
<classRec name='Parser' fullname='sandy.parser:Parser' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\parser\Parser.as' namespace='sandy.parser' access='public' baseclass='Object' isFinal='true' isDynamic='false' >
<description><![CDATA[
  The Parser factory class creates instances of parser classes.
  The specific parser can be specified in the create method's second parameter.
  
  ]]></description>
<author><![CDATA[ Thomas Pfeiffer - kiroukou
  ]]></author>
<example><![CDATA[To parse a 3DS file at runtime:
    <listing version="3.1">
      var parser:IParser = Parser.create( "/path/to/my/3dsfile.3ds", Parser.MAX_3DS );
  </listing>
  
  ]]></example>
<version><![CDATA[ 3.1
  ]]></version>
<date><![CDATA[  04.08.2007
    ]]></date>
<metadata>
	<Event owner='sandy.parser:Parser' name='onParsingEVENT' type='sandy.parser.ParserEvent' >
<description><![CDATA[
 Dispatched when a parser reads the next line of data in a file.
  ]]></description>
<eventType><![CDATA[sandy.parser.ParserEvent.PARSING
 ]]></eventType>
	</Event>
</metadata>
<metadata>
	<Event owner='sandy.parser:Parser' name='onProgressEVENT' type='sandy.parser.ParserEvent' >
<description><![CDATA[
 Dispatched when data is received as the parsing progresses.
  ]]></description>
<eventType><![CDATA[sandy.parser.ParserEvent.PROGRESS
 ]]></eventType>
	</Event>
</metadata>
<metadata>
	<Event owner='sandy.parser:Parser' name='onLoadEVENT' type='sandy.parser.ParserEvent' >
<description><![CDATA[
 Dispatched when the file starts loading.
  ]]></description>
<eventType><![CDATA[sandy.parser.ParserEvent.LOAD
 ]]></eventType>
	</Event>
</metadata>
<metadata>
	<Event owner='sandy.parser:Parser' name='onInitEVENT' type='sandy.parser.ParserEvent' >
<description><![CDATA[
 Dispatched when parsing is complete.
  ]]></description>
<eventType><![CDATA[sandy.parser.ParserEvent.INIT
 ]]></eventType>
	</Event>
</metadata>
<metadata>
	<Event owner='sandy.parser:Parser' name='onFailEVENT' type='sandy.parser.ParserEvent' >
<description><![CDATA[
 Dispatched when parsing fails.
  ]]></description>
<eventType><![CDATA[sandy.parser.ParserEvent.FAIL
 ]]></eventType>
	</Event>
</metadata>
</classRec>
<method name='create' fullname='sandy.parser:Parser/create' isStatic='true' isFinal='false' isOverride='false'  param_names='p_sFile;p_sParserType;p_nScale;p_sTextureExtension' param_types=';String;Number;String' param_defaults='undefined;null;1;null' result_type='sandy.parser:IParser'>
<description><![CDATA[
   The create method chooses which parser to use. This can be done automatically
   by looking at the file extension or by passing the parser type String as the
   second parameter.
   
   ]]></description>
<example><![CDATA[To parse a 3DS file at runtime:
      <listing version="3.1">
       var parser:IParser = Parser.create( "/path/to/my/3dsfile.3ds", Parser.3DS );
   </listing>
   
   ]]></example>
<param><![CDATA[p_sFile   Can be either a string pointing to the location of the
          file or an instance of an embedded file
   ]]></param>
<param><![CDATA[p_sParserType  The parser type string
   ]]></param>
<param><![CDATA[p_nScale   The scale factor
   ]]></param>
<param><![CDATA[p_sTextureExtension Overrides texture extension.
   ]]></param>
<return><![CDATA[    The parser to be used
   ]]></return>
</method>
<field name='ASE' fullname='sandy.parser:Parser/ASE' type='String' isStatic='true' isConst='true' defaultValue='ASE' >
<description><![CDATA[
   Specifies that the ASE (ASCII Scene Export) parser should be used.
   ]]></description>
</field>
<field name='COLLADA' fullname='sandy.parser:Parser/COLLADA' type='String' isStatic='true' isConst='true' defaultValue='DAE' >
<description><![CDATA[
   Specifies that the COLLADA (COLLAborative Design Activity ) parser should be used.
   ]]></description>
</field>
<field name='MAX_3DS' fullname='sandy.parser:Parser/MAX_3DS' type='String' isStatic='true' isConst='true' defaultValue='3DS' >
<description><![CDATA[
   Specifies that the 3DS (3D Studio) parser should be used.
   ]]></description>
</field>
<field name='MD2' fullname='sandy.parser:Parser/MD2' type='String' isStatic='true' isConst='true' defaultValue='MD2' >
<description><![CDATA[
   Specifies that the MD2 (Quake II model) parser should be used.
   ]]></description>
</field>
<classRec name='ColladaParser' fullname='sandy.parser:ColladaParser' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\parser\ColladaParser.as' namespace='sandy.parser' access='public' baseclass='sandy.parser:AParser' interfaces='sandy.parser:IParser' isFinal='false' isDynamic='false' >
<description><![CDATA[
  Transforms a COLLADA XML document into Sandy geometries.
  <p>Creates a Group as rootnode which appends all geometries it finds.
  Recommended settings for the COLLADA exporter:</p>
  <ul>
  <li>Relative paths</li>
  <li>Triangulate</li>
  <li>Normals</li>
  </ul>
    ]]></description>
<author><![CDATA[ Dennis Ippel - ippeldv
  ]]></author>
<example><![CDATA[To parse a COLLADA object at runtime:
    <listing version="3.1">
      var parser:IParser = Parser.create( "/path/to/my/colladafile.dae", Parser.COLLADA );
  </listing>
    ]]></example>
<example><![CDATA[To parse an embedded COLLADA object:
    <listing version="3.1">
      [Embed( source="/path/to/my/colladafile.dae", mimeType="application/octet-stream" )]
      private var MyCollada:Class;
        ...
        var parser:IParser = Parser.create( new MyCollada(), Parser.COLLADA );
  </listing>
  ]]></example>
<since><![CDATA[ 1.0
  ]]></since>
<version><![CDATA[ 3.1
  ]]></version>
<date><![CDATA[  26.07.2007
    ]]></date>
</classRec>
<method name='ColladaParser' fullname='sandy.parser:ColladaParser/ColladaParser' isStatic='false' isFinal='false' isOverride='false'  param_names='p_sUrl;p_nScale;p_sTextureExtension' param_types=';Number;String' param_defaults='undefined;1;null' result_type='*'>
<description><![CDATA[
   Creates a new COLLADA parser instance.
      ]]></description>
<param><![CDATA[p_sUrl  Can be either a string pointing to the location of the
         COLLADA file or an instance of an embedded COLLADA file.
   ]]></param>
<param><![CDATA[p_nScale  The scale factor.
   ]]></param>
<param><![CDATA[p_sTextureExtension Overrides texture extension. You might want to use it for models that
   specify BMP or PCX textures.
   ]]></param>
</method>
<method name='convertTriangleArray' fullname='sandy.parser:ColladaParser/private:convertTriangleArray' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oInput;p_aTriangles;p_nTriangleCount' param_types='XMLList;Array;int' param_defaults='undefined;undefined;undefined' result_type='Array'>
<description><![CDATA[
   The <triangles> element provides the information needed to bind vertex
   attributes together and then organize those vertices into individual
   triangles. This method binds the individual values to the given
   input semantics (can be VERTEX, TEXCOORD, NORMAL, ... )
      ]]></description>
<param><![CDATA[p_oInput    An XMLList containing the input semantic elements
   ]]></param>
<param><![CDATA[p_aTriangles   An array containing the vertex attributes for a
           given number of triangles
   ]]></param>
<param><![CDATA[p_nTriangleCount  The number of triangles
   ]]></param>
<return><![CDATA[      An array containing objects that hold vertex attributes
           for each input semantic
   ]]></return>
</method>
<method name='formatPoint3D' fullname='sandy.parser:ColladaParser/private:formatPoint3D' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oVect' param_types='sandy.core.data:Point3D' param_defaults='undefined' result_type='void'>
</method>
<method name='getAppearance' fullname='sandy.parser:ColladaParser/private:getAppearance' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oNode' param_types='XML' param_defaults='undefined' result_type='sandy.materials:Appearance'>
<description><![CDATA[
   Reads material information. If texture maps are used on the
   original object and the parser cannot find these files, then
   WireframeMaterial will be used by default.
      ]]></description>
<param><![CDATA[p_oNode  The XML node containing material information
   ]]></param>
<return><![CDATA[    The parsed appearance
   ]]></return>
</method>
<method name='getFloatArray' fullname='sandy.parser:ColladaParser/private:getFloatArray' isStatic='false' isFinal='false' isOverride='false'  param_names='p_sSourceID;p_oGeometry' param_types='String;XMLList' param_defaults='undefined;undefined' result_type='Array'>
<description><![CDATA[
   Takes a space separated string from an XML node and turns it into a Point3D array
   ]]></description>
<param><![CDATA[p_sSourceID  The COLLADA node ID
   ]]></param>
<param><![CDATA[p_oGeometry  And XMLList containing space separated values
   ]]></param>
<return><![CDATA[     An array containing parsed Point3Ds
   ]]></return>
</method>
<method name='getGeometry' fullname='sandy.parser:ColladaParser/private:getGeometry' isStatic='false' isFinal='false' isOverride='false'  param_names='p_sGeometryID;p_oMaterials' param_types='String;Object' param_defaults='undefined;undefined' result_type='sandy.core.scenegraph:Geometry3D'>
<description><![CDATA[
   Parses the geometry XML of a certain node.
      ]]></description>
<param><![CDATA[p_sGeometryID  The COLLADA node ID
   ]]></param>
<param><![CDATA[p_oMaterials  An object array containing all the loaded materials
   ]]></param>
<return><![CDATA[     The parsed Geometry3D
   ]]></return>
</method>
<method name='imageQueueCompleteHandler' fullname='sandy.parser:ColladaParser/private:imageQueueCompleteHandler' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oEvent' param_types='sandy.events:QueueEvent' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   The event handler that is fired when the image loading queue has finished
   loading. Bitmapdata is transfered to a material array and the parseScene
   method is called.
      ]]></description>
<param><![CDATA[p_oEvent  Event object containing LoaderQueue information
   ]]></param>
</method>
<method name='loadImages' fullname='sandy.parser:ColladaParser/private:loadImages' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oLibImages' param_types='XMLList' param_defaults='undefined' result_type='Object'>
<description><![CDATA[
   Extracts the location of the images and used it to load the textures.
   If the images aren't found at the specified path, RELATIVE_TEXTURE_PATH
   will be used.
      ]]></description>
<param><![CDATA[p_oLibImages  An XMLList containing information about the images
   ]]></param>
<return><![CDATA[     An object array containg the object ID, filename
          and loader data
   ]]></return>
</method>
<method name='parseData' fullname='sandy.parser:ColladaParser/protected:parseData' isStatic='false' isFinal='false' isOverride='true'  param_names='e' param_types='flash.events:Event' param_defaults='null' result_type='void'>
<description><![CDATA[
   ]]></description>
<param><![CDATA[e    The Event object
   ]]></param>
<private><![CDATA[]]></private>
</method>
<method name='parseNode' fullname='sandy.parser:ColladaParser/private:parseNode' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oNode' param_types='XML' param_defaults='undefined' result_type='sandy.core.scenegraph:Node'>
<description><![CDATA[
   Reads the geometry and materials. Also performs scaling, translation
   and rotation operations.
   ]]></description>
<param><![CDATA[p_oNode  XML node containing a node from the 3D scene
   ]]></param>
<return><![CDATA[    A parsed Shape3D
   ]]></return>
</method>
<method name='parseScene' fullname='sandy.parser:ColladaParser/private:parseScene' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oScene' param_types='XML' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   Parses the 3D scene
   ]]></description>
<param><![CDATA[p_oScene  COLLADA XML's scene node
   ]]></param>
</method>
<method name='stringToArray' fullname='sandy.parser:ColladaParser/private:stringToArray' isStatic='false' isFinal='false' isOverride='false'  param_names='p_sValues' param_types='String' param_defaults='undefined' result_type='Array'>
<description><![CDATA[
   Converts a space separated string to an array
      ]]></description>
<param><![CDATA[p_sValues  A string containing space separated values
   ]]></param>
<return><![CDATA[    The resulting array
   ]]></return>
</method>
<method name='stringToMatrix' fullname='sandy.parser:ColladaParser/private:stringToMatrix' isStatic='false' isFinal='false' isOverride='false'  param_names='p_sValues' param_types='String' param_defaults='undefined' result_type='sandy.core.data:Matrix4'>
<description><![CDATA[
   Converts a space separated string to a matrix
      ]]></description>
<param><![CDATA[p_sValues  A string containing space separated values
   ]]></param>
<return><![CDATA[    The resulting matrix
   ]]></return>
</method>
<method name='stringToPoint3D' fullname='sandy.parser:ColladaParser/private:stringToPoint3D' isStatic='false' isFinal='false' isOverride='false'  param_names='p_sValues' param_types='String' param_defaults='undefined' result_type='sandy.core.data:Point3D'>
<description><![CDATA[
   Converts a string to a Point3D
      ]]></description>
<param><![CDATA[p_sValues  A string containing space separated values
   ]]></param>
<return><![CDATA[    The resulting Point3D
   ]]></return>
</method>
<field name='m_bYUp' fullname='sandy.parser:ColladaParser/private:m_bYUp' type='Boolean' isStatic='false' isConst='false' >
</field>
<field name='m_oCollada' fullname='sandy.parser:ColladaParser/private:m_oCollada' type='XML' isStatic='false' isConst='false' >
</field>
<field name='m_oMaterials' fullname='sandy.parser:ColladaParser/private:m_oMaterials' type='Object' isStatic='false' isConst='false' >
</field>
<classRec name='MD2Parser' fullname='sandy.parser:MD2Parser' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\parser\MD2Parser.as' namespace='sandy.parser' access='public' baseclass='sandy.parser:AParser' interfaces='sandy.parser:IParser' isFinal='true' isDynamic='false' >
<description><![CDATA[
  Transforms an MD2 file into Sandy MD2 primitive.
  <p>Creates a Group as rootnode with MD2 primitive as its only child.
    ]]></description>
<author><![CDATA[ makc
  ]]></author>
<example><![CDATA[To parse an MD2 file at runtime:
    <listing version="3.1">
      var parser:IParser = Parser.create( "/path/to/my/md2file.md2", Parser.MD2 );
  </listing>
    ]]></example>
<example><![CDATA[To parse an embedded MD2 object:
    <listing version="3.1">
      [Embed( source="/path/to/my/md2file.md2", mimeType="application/octet-stream" )]
      private var MyMD2:Class;
        ...
        var parser:IParser = Parser.create( new MyMD2(), Parser.MD2 );
  </listing>
  ]]></example>
<version><![CDATA[ 3.1
  ]]></version>
<date><![CDATA[  03.06.2008
    ]]></date>
</classRec>
<method name='MD2Parser' fullname='sandy.parser:MD2Parser/MD2Parser' isStatic='false' isFinal='false' isOverride='false'  param_names='p_sUrl;p_nScale;p_sTextureExtension' param_types=';Number;String' param_defaults='undefined;1;null' result_type='*'>
<description><![CDATA[
   Creates a new MD2Parser instance
      ]]></description>
<param><![CDATA[p_sUrl  This can be either a String containing an URL or a
         an embedded object
   ]]></param>
<param><![CDATA[p_nScale  The scale factor
   ]]></param>
<param><![CDATA[p_sTextureExtension Overrides texture extension. You might want to use it for models that
   specify PCX textures.
   ]]></param>
</method>
<method name='parseData' fullname='sandy.parser:MD2Parser/protected:parseData' isStatic='false' isFinal='false' isOverride='true'  param_names='e' param_types='flash.events:Event' param_defaults='null' result_type='void'>
<description><![CDATA[
   ]]></description>
<param><![CDATA[e    The Event object
   ]]></param>
<private><![CDATA[]]></private>
</method>
<classRec name='ASEParser' fullname='sandy.parser:ASEParser' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\parser\ASEParser.as' namespace='sandy.parser' access='public' baseclass='sandy.parser:AParser' interfaces='sandy.parser:IParser' isFinal='true' isDynamic='false' >
<description><![CDATA[
  Transforms an ASE file into Sandy geometries.
  <p>Creates a Group as rootnode which appends all geometries it finds.
    ]]></description>
<author><![CDATA[ Thomas Pfeiffer - kiroukou
  ]]></author>
<example><![CDATA[To parse an ASE file at runtime:
    <listing version="3.1">
      var parser:IParser = Parser.create( "/path/to/my/asefile.ase", Parser.ASE );
  </listing>
    ]]></example>
<example><![CDATA[To parse an embedded ASE object:
    <listing version="3.1">
      [Embed( source="/path/to/my/asefile.ase", mimeType="application/octet-stream" )]
      private var MyASE:Class;
        ...
        var parser:IParser = Parser.create( new MyASE(), Parser.ASE );
  </listing>
  ]]></example>
<since><![CDATA[ 1.0
  ]]></since>
<version><![CDATA[ 3.1
  ]]></version>
<date><![CDATA[  26.07.2007
    ]]></date>
</classRec>
<method name='ASEParser' fullname='sandy.parser:ASEParser/ASEParser' isStatic='false' isFinal='false' isOverride='false'  param_names='p_sUrl;p_nScale;p_sTextureExtension' param_types=';Number;String' param_defaults='undefined;1;null' result_type='*'>
<description><![CDATA[
   Creates a new ASEParser instance
      ]]></description>
<param><![CDATA[p_sUrl  This can be either a String containing an URL or a
         an embedded object
   ]]></param>
<param><![CDATA[p_nScale  The scale factor
   ]]></param>
<param><![CDATA[p_sTextureExtension Overrides texture extension. You might want to use it for models that
   specify PSD or TGA textures.
   ]]></param>
</method>
<method name='parseData' fullname='sandy.parser:ASEParser/protected:parseData' isStatic='false' isFinal='false' isOverride='true'  param_names='e' param_types='flash.events:Event' param_defaults='null' result_type='void'>
<description><![CDATA[
   ]]></description>
<param><![CDATA[e    The Event object
   ]]></param>
<private><![CDATA[]]></private>
</method>
<classRec name='PhongAttributesLightMap' fullname='sandy.materials.attributes:PhongAttributesLightMap' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\materials\attributes\PhongAttributesLightMap.as' namespace='sandy.materials.attributes' access='public' baseclass='Object' isFinal='true' isDynamic='false' >
<description><![CDATA[
  A lightmap used for some of the shaders.
    ]]></description>
<version><![CDATA[ 3.1
  ]]></version>
</classRec>
<field name='alphas' fullname='sandy.materials.attributes:PhongAttributesLightMap/alphas' type='Array' isStatic='false' isConst='false' defaultValue='unknown' >
<description><![CDATA[
   An array of an array which contains the alphas of the strata. The values of the inner array must be between 0 and 1.
   ]]></description>
</field>
<field name='colors' fullname='sandy.materials.attributes:PhongAttributesLightMap/colors' type='Array' isStatic='false' isConst='false' defaultValue='unknown' >
<description><![CDATA[
   An array of an array which contains the colors of the strata.
   ]]></description>
</field>
<field name='ratios' fullname='sandy.materials.attributes:PhongAttributesLightMap/ratios' type='Array' isStatic='false' isConst='false' defaultValue='unknown' >
<description><![CDATA[
   An array of an array which contains the ratios (length) of each strata.
   ]]></description>
</field>
<classRec name='MaterialAttributes' fullname='sandy.materials.attributes:MaterialAttributes' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\materials\attributes\MaterialAttributes.as' namespace='sandy.materials.attributes' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
  The MaterialAttributes class is used to apply one or more attributes to a Shape3D object.
  
  ]]></description>
<see><![CDATA[sandy.core.scenegraph.Shape3D
  ]]></see>
<version><![CDATA[ 3.1
    ]]></version>
</classRec>
<method name='MaterialAttributes' fullname='sandy.materials.attributes:MaterialAttributes/MaterialAttributes' isStatic='false' isFinal='false' isOverride='false'  param_names='args' param_types='restParam' param_defaults='undefined' result_type='*'>
<description><![CDATA[
   Creates a new LightAttributes object.
   ]]></description>
</method>
<method name='begin' fullname='sandy.materials.attributes:MaterialAttributes/begin' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oScene' param_types='sandy.core:Scene3D' param_defaults='undefined' result_type='void'>
<description><![CDATA[
  Method called before the display list rendering. This is the common place for this attribute to precompute things.
    ]]></description>
<param><![CDATA[p_oScene The scene.
    ]]></param>
<see><![CDATA[#finish()
  ]]></see>
<see><![CDATA[sandy.core.Scene3D
  ]]></see>
</method>
<method name='draw' fullname='sandy.materials.attributes:MaterialAttributes/draw' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oGraphics;p_oPolygon;p_oMaterial;p_oScene' param_types='flash.display:Graphics;sandy.core.data:Polygon;sandy.materials:Material;sandy.core:Scene3D' param_defaults='undefined;undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
  Draws all attributes to the graphics object.
    ]]></description>
<param><![CDATA[p_oGraphics The Graphics object to draw attributes to.
  ]]></param>
<param><![CDATA[p_oPolygon  The polygon which is going to be drawn.
  ]]></param>
<param><![CDATA[p_oMaterial The refering material.
  ]]></param>
<param><![CDATA[p_oScene  The scene.
    ]]></param>
<see><![CDATA[sandy.core.data.Polygon
  ]]></see>
<see><![CDATA[sandy.materials.Material
  ]]></see>
<see><![CDATA[sandy.core.Scene3D
  ]]></see>
</method>
<method name='drawOnSprite' fullname='sandy.materials.attributes:MaterialAttributes/drawOnSprite' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oSprite;p_oMaterial;p_oScene' param_types='sandy.core.scenegraph:Sprite2D;sandy.materials:Material;sandy.core:Scene3D' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
  Applies attributes to a sprite.
    ]]></description>
<param><![CDATA[p_oSprite  The Sprite2D object to draw attributes to.
  ]]></param>
<param><![CDATA[p_oMaterial The refering material.
  ]]></param>
<param><![CDATA[p_oScene  The scene.
    ]]></param>
<see><![CDATA[sandy.core.scenegraph.Sprite2D
  ]]></see>
<see><![CDATA[sandy.materials.Material
  ]]></see>
<see><![CDATA[sandy.core.Scene3D
  ]]></see>
</method>
<method name='finish' fullname='sandy.materials.attributes:MaterialAttributes/finish' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oScene' param_types='sandy.core:Scene3D' param_defaults='undefined' result_type='void'>
<description><![CDATA[
  Method called right after the display list rendering. This is the place to remove and dispose memory if necessary.
    ]]></description>
<param><![CDATA[p_oScene The scene.
    ]]></param>
<see><![CDATA[#begin()
  ]]></see>
<see><![CDATA[sandy.core.Scene3D
  ]]></see>
</method>
<method name='init' fullname='sandy.materials.attributes:MaterialAttributes/init' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oPolygon' param_types='sandy.core.data:Polygon' param_defaults='undefined' result_type='void'>
<description><![CDATA[
  Allows all attributes to proceed to an initialization to know when the polyon isn't lined to the material.
    ]]></description>
<param><![CDATA[p_oPolygon The polygon.
    ]]></param>
<see><![CDATA[#unlink()
  ]]></see>
<see><![CDATA[sandy.core.data.Polygon
  ]]></see>
</method>
<method name='unlink' fullname='sandy.materials.attributes:MaterialAttributes/unlink' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oPolygon' param_types='sandy.core.data:Polygon' param_defaults='undefined' result_type='void'>
<description><![CDATA[
  Remove all initializations (opposite of init method) from all attributes.
    ]]></description>
<param><![CDATA[p_oPolygon The polygon.
    ]]></param>
<see><![CDATA[#init()
  ]]></see>
<see><![CDATA[sandy.core.data.Polygon
  ]]></see>
</method>
<method name='flags' fullname='sandy.materials.attributes:MaterialAttributes/flags/get' isStatic='false' isFinal='false' isOverride='false'  result_type='uint'>
<description><![CDATA[
  Returns flags for attributes.
    ]]></description>
<see><![CDATA[sandy.core.SandyFlags
  ]]></see>
</method>
<field name='attributes' fullname='sandy.materials.attributes:MaterialAttributes/attributes' type='Array' isStatic='false' isConst='false' defaultValue='' >
<description><![CDATA[
   List of attributes.
   ]]></description>
</field>
<interfaceRec name='IAttributes' fullname='sandy.materials.attributes:IAttributes' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\materials\attributes\IAttributes.as' namespace='sandy.materials.attributes' access='public' baseClasses='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
 Interface for all the elements that represent a material attribute property.
 This interface is important to make attributes really flexible and allow users to extend it.
 ]]></description>
</interfaceRec>
<method name='begin' fullname='sandy.materials.attributes:IAttributes/sandy.materials.attributes:IAttributes:begin' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oScene' param_types='sandy.core:Scene3D' param_defaults='undefined' result_type='void'>
<description><![CDATA[
  ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='draw' fullname='sandy.materials.attributes:IAttributes/sandy.materials.attributes:IAttributes:draw' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oGraphics;p_oPolygon;p_oMaterial;p_oScene' param_types='flash.display:Graphics;sandy.core.data:Polygon;sandy.materials:Material;sandy.core:Scene3D' param_defaults='undefined;undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
  ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='drawOnSprite' fullname='sandy.materials.attributes:IAttributes/sandy.materials.attributes:IAttributes:drawOnSprite' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oSprite;p_oMaterial;p_oScene' param_types='sandy.core.scenegraph:Sprite2D;sandy.materials:Material;sandy.core:Scene3D' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
  ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='finish' fullname='sandy.materials.attributes:IAttributes/sandy.materials.attributes:IAttributes:finish' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oScene' param_types='sandy.core:Scene3D' param_defaults='undefined' result_type='void'>
<description><![CDATA[
  ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='init' fullname='sandy.materials.attributes:IAttributes/sandy.materials.attributes:IAttributes:init' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oPolygon' param_types='sandy.core.data:Polygon' param_defaults='undefined' result_type='void'>
<description><![CDATA[
  ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='unlink' fullname='sandy.materials.attributes:IAttributes/sandy.materials.attributes:IAttributes:unlink' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oPolygon' param_types='sandy.core.data:Polygon' param_defaults='undefined' result_type='void'>
<description><![CDATA[
  ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='flags' fullname='sandy.materials.attributes:IAttributes/sandy.materials.attributes:IAttributes:flags/get' isStatic='false' isFinal='false' isOverride='false'  result_type='uint'>
<description><![CDATA[
  ]]></description>
<private><![CDATA[]]></private>
</method>
<classRec name='ALightAttributes' fullname='sandy.materials.attributes:ALightAttributes' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\materials\attributes\ALightAttributes.as' namespace='sandy.materials.attributes' access='public' baseclass='Object' interfaces='sandy.materials.attributes:IAttributes' isFinal='false' isDynamic='false' >
<description><![CDATA[
  ABSTRACT CLASS - super class for all light attributes.
    <p>This class should not be directly instatiated, but sub classed.<br/>
  The ALightAttributes class implements Blinn flavor of Phong reflection model.</p>
    ]]></description>
<author><![CDATA[ makc
  ]]></author>
<version><![CDATA[ 3.1
  ]]></version>
<date><![CDATA[  13.12.2007
  ]]></date>
</classRec>
<method name='applyColorToDisplayObject' fullname='sandy.materials.attributes:ALightAttributes/private:applyColorToDisplayObject' isStatic='false' isFinal='false' isOverride='false'  param_names='s;c;b' param_types='flash.display:DisplayObject;uint;Number' param_defaults='undefined;undefined;undefined' result_type='void'>
</method>
<method name='begin' fullname='sandy.materials.attributes:ALightAttributes/begin' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oScene' param_types='sandy.core:Scene3D' param_defaults='undefined' result_type='void'>
<description><![CDATA[
  ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='calculate' fullname='sandy.materials.attributes:ALightAttributes/protected:calculate' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oNormal;p_bFrontside;p_bIgnoreSpecular' param_types='sandy.core.data:Point3D;Boolean;Boolean' param_defaults='undefined;undefined;false' result_type='Number'>
<description><![CDATA[
   Calculates the reflection for given normal.
   ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='draw' fullname='sandy.materials.attributes:ALightAttributes/draw' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oGraphics;p_oPolygon;p_oMaterial;p_oScene' param_types='flash.display:Graphics;sandy.core.data:Polygon;sandy.materials:Material;sandy.core:Scene3D' param_defaults='undefined;undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
  Draws light on shape.
  ]]></description>
</method>
<method name='drawOnSprite' fullname='sandy.materials.attributes:ALightAttributes/drawOnSprite' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oSprite;p_oMaterial;p_oScene' param_types='sandy.core.scenegraph:Sprite2D;sandy.materials:Material;sandy.core:Scene3D' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
  Draws light on sprite.
  ]]></description>
</method>
<method name='finish' fullname='sandy.materials.attributes:ALightAttributes/finish' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oScene' param_types='sandy.core:Scene3D' param_defaults='undefined' result_type='void'>
<description><![CDATA[
  ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='init' fullname='sandy.materials.attributes:ALightAttributes/init' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oPolygon' param_types='sandy.core.data:Polygon' param_defaults='undefined' result_type='void'>
<description><![CDATA[
  ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='onPropertyChange' fullname='sandy.materials.attributes:ALightAttributes/protected:onPropertyChange' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
   Override this to respond to property changes.
   ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='unlink' fullname='sandy.materials.attributes:ALightAttributes/unlink' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oPolygon' param_types='sandy.core.data:Polygon' param_defaults='undefined' result_type='void'>
<description><![CDATA[
  ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='ambient' fullname='sandy.materials.attributes:ALightAttributes/ambient/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
<description><![CDATA[
   Ambient reflection factor.
      <p>Note that since geometry of sprites is unknown, this is going to
   be the only lighting setting affecting them, so you would typically
   need to set it to bigger value than you would for shapes.</p>
   ]]></description>
<default><![CDATA[0.3
   ]]></default>
</method>
<method name='diffuse' fullname='sandy.materials.attributes:ALightAttributes/diffuse/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
<description><![CDATA[
   Diffuse reflection factor.
   ]]></description>
<default><![CDATA[1.0
   ]]></default>
</method>
<method name='flags' fullname='sandy.materials.attributes:ALightAttributes/flags/get' isStatic='false' isFinal='false' isOverride='false'  result_type='uint'>
<description><![CDATA[
  Flags for the attribute.
  ]]></description>
</method>
<method name='gloss' fullname='sandy.materials.attributes:ALightAttributes/gloss/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
<description><![CDATA[
   Specular exponent.
   ]]></description>
<default><![CDATA[5.0
   ]]></default>
</method>
<method name='specular' fullname='sandy.materials.attributes:ALightAttributes/specular/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
<description><![CDATA[
   Specular reflection factor.
   ]]></description>
<default><![CDATA[0.0
   ]]></default>
</method>
<method name='ambient' fullname='sandy.materials.attributes:ALightAttributes/ambient/set' isStatic='false' isFinal='false' isOverride='false'  param_names='p_nAmbient' param_types='Number' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='diffuse' fullname='sandy.materials.attributes:ALightAttributes/diffuse/set' isStatic='false' isFinal='false' isOverride='false'  param_names='p_nDiffuse' param_types='Number' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='gloss' fullname='sandy.materials.attributes:ALightAttributes/gloss/set' isStatic='false' isFinal='false' isOverride='false'  param_names='p_nGloss' param_types='Number' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='specular' fullname='sandy.materials.attributes:ALightAttributes/specular/set' isStatic='false' isFinal='false' isOverride='false'  param_names='p_nSpecular' param_types='Number' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</method>
<field name='_ambient' fullname='sandy.materials.attributes:ALightAttributes/private:_ambient' type='Number' isStatic='false' isConst='false' defaultValue='0.3' >
</field>
<field name='_diffuse' fullname='sandy.materials.attributes:ALightAttributes/private:_diffuse' type='Number' isStatic='false' isConst='false' defaultValue='1.0' >
</field>
<field name='_gloss' fullname='sandy.materials.attributes:ALightAttributes/private:_gloss' type='Number' isStatic='false' isConst='false' defaultValue='5.0' >
</field>
<field name='_scenes' fullname='sandy.materials.attributes:ALightAttributes/private:_scenes' type='flash.utils:Dictionary' isStatic='false' isConst='false' defaultValue='' >
</field>
<field name='_specular' fullname='sandy.materials.attributes:ALightAttributes/private:_specular' type='Number' isStatic='false' isConst='false' defaultValue='0.0' >
</field>
<field name='m_nFlags' fullname='sandy.materials.attributes:ALightAttributes/protected:m_nFlags' type='uint' isStatic='false' isConst='false' defaultValue='0' >
<description><![CDATA[
  ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='m_nI' fullname='sandy.materials.attributes:ALightAttributes/protected:m_nI' type='Number' isStatic='false' isConst='false' >
<description><![CDATA[
   Latest light power.
   ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='m_oCurrentH' fullname='sandy.materials.attributes:ALightAttributes/protected:m_oCurrentH' type='sandy.core.data:Point3D' isStatic='false' isConst='false' defaultValue='' >
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='m_oCurrentL' fullname='sandy.materials.attributes:ALightAttributes/protected:m_oCurrentL' type='sandy.core.data:Point3D' isStatic='false' isConst='false' defaultValue='' >
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='m_oCurrentShape' fullname='sandy.materials.attributes:ALightAttributes/protected:m_oCurrentShape' type='sandy.core.scenegraph:Shape3D' isStatic='false' isConst='false' >
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='m_oCurrentV' fullname='sandy.materials.attributes:ALightAttributes/protected:m_oCurrentV' type='sandy.core.data:Point3D' isStatic='false' isConst='false' defaultValue='' >
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='m_oH' fullname='sandy.materials.attributes:ALightAttributes/protected:m_oH' type='sandy.core.data:Point3D' isStatic='false' isConst='true' defaultValue='' >
<description><![CDATA[
   Latest Blinn halfway Point3D between camera and light.
   ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='m_oL' fullname='sandy.materials.attributes:ALightAttributes/protected:m_oL' type='sandy.core.data:Point3D' isStatic='false' isConst='false' >
<description><![CDATA[
   Latest light direction Point3D.
   ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='m_oV' fullname='sandy.materials.attributes:ALightAttributes/protected:m_oV' type='sandy.core.data:Point3D' isStatic='false' isConst='false' >
<description><![CDATA[
   Latest camera direction Point3D.
   ]]></description>
<private><![CDATA[]]></private>
</field>
<classRec name='AAttributes' fullname='sandy.materials.attributes:AAttributes' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\materials\attributes\AAttributes.as' namespace='sandy.materials.attributes' access='public' baseclass='Object' interfaces='sandy.materials.attributes:IAttributes' isFinal='false' isDynamic='false' >
<description><![CDATA[
  ABSTRACT CLASS - super class for attributes that do not need to implement all manager hooks.
    <p>This purpose of this class is to save some code. Hooks are still available using "override" keyword.</p>
    ]]></description>
<author><![CDATA[ makc
  ]]></author>
<version><![CDATA[ 3.1
  ]]></version>
<date><![CDATA[  18.01.2008
  ]]></date>
</classRec>
<method name='begin' fullname='sandy.materials.attributes:AAttributes/begin' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oScene' param_types='sandy.core:Scene3D' param_defaults='undefined' result_type='void'>
<description><![CDATA[
  Method called before the display list rendering. This is the common place for this attribute to precompute things.
    ]]></description>
<param><![CDATA[p_oScene The scene.
    ]]></param>
<see><![CDATA[#finish()
  ]]></see>
<see><![CDATA[sandy.core.Scene3D
  ]]></see>
</method>
<method name='draw' fullname='sandy.materials.attributes:AAttributes/draw' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oGraphics;p_oPolygon;p_oMaterial;p_oScene' param_types='flash.display:Graphics;sandy.core.data:Polygon;sandy.materials:Material;sandy.core:Scene3D' param_defaults='undefined;undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
  Draws attribute to the graphics object.
    ]]></description>
<param><![CDATA[p_oGraphics The Graphics object to draw attributes to.
  ]]></param>
<param><![CDATA[p_oPolygon  The polygon which is going to be drawn.
  ]]></param>
<param><![CDATA[p_oMaterial The refering material.
  ]]></param>
<param><![CDATA[p_oScene  The scene.
    ]]></param>
<see><![CDATA[sandy.core.data.Polygon
  ]]></see>
<see><![CDATA[sandy.materials.Material
  ]]></see>
<see><![CDATA[sandy.core.Scene3D
  ]]></see>
</method>
<method name='drawOnSprite' fullname='sandy.materials.attributes:AAttributes/drawOnSprite' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oSprite;p_oMaterial;p_oScene' param_types='sandy.core.scenegraph:Sprite2D;sandy.materials:Material;sandy.core:Scene3D' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
  Applies attribute to a sprite.
    ]]></description>
<param><![CDATA[p_oSprite  The Sprite2D object to draw attributes to.
  ]]></param>
<param><![CDATA[p_oMaterial The refering material.
  ]]></param>
<param><![CDATA[p_oScene  The scene.
    ]]></param>
<see><![CDATA[sandy.core.scenegraph.Sprite2D
  ]]></see>
<see><![CDATA[sandy.materials.Material
  ]]></see>
<see><![CDATA[sandy.core.Scene3D
  ]]></see>
</method>
<method name='finish' fullname='sandy.materials.attributes:AAttributes/finish' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oScene' param_types='sandy.core:Scene3D' param_defaults='undefined' result_type='void'>
<description><![CDATA[
  Method called right after the display list rendering. This is the place to remove and dispose memory if necessary.
    ]]></description>
<param><![CDATA[p_oScene The scene.
    ]]></param>
<see><![CDATA[#begin()
  ]]></see>
<see><![CDATA[sandy.core.Scene3D
  ]]></see>
</method>
<method name='init' fullname='sandy.materials.attributes:AAttributes/init' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oPolygon' param_types='sandy.core.data:Polygon' param_defaults='undefined' result_type='void'>
<description><![CDATA[
  Allows to proceed to an initialization to know when the polyon isn't lined to the material.
    ]]></description>
<param><![CDATA[p_oPolygon The polygon.
    ]]></param>
<see><![CDATA[#unlink()
  ]]></see>
<see><![CDATA[sandy.core.data.Polygon
  ]]></see>
</method>
<method name='unlink' fullname='sandy.materials.attributes:AAttributes/unlink' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oPolygon' param_types='sandy.core.data:Polygon' param_defaults='undefined' result_type='void'>
<description><![CDATA[
  Remove all the initialization (opposite of init).
    ]]></description>
<param><![CDATA[p_oPolygon The polygon.
    ]]></param>
<see><![CDATA[#init()
  ]]></see>
<see><![CDATA[sandy.core.data.Polygon
  ]]></see>
</method>
<method name='flags' fullname='sandy.materials.attributes:AAttributes/flags/get' isStatic='false' isFinal='false' isOverride='false'  result_type='uint'>
<description><![CDATA[
  Returns the specific flags of this attribute.
    ]]></description>
<see><![CDATA[sandy.core.SandyFlags
  ]]></see>
</method>
<field name='m_nFlags' fullname='sandy.materials.attributes:AAttributes/protected:m_nFlags' type='uint' isStatic='false' isConst='false' defaultValue='0' >
<description><![CDATA[
  ]]></description>
<private><![CDATA[]]></private>
</field>
<classRec name='LightAttributes' fullname='sandy.materials.attributes:LightAttributes' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\materials\attributes\LightAttributes.as' namespace='sandy.materials.attributes' access='public' baseclass='sandy.materials.attributes:ALightAttributes' isFinal='true' isDynamic='false' >
<description><![CDATA[
  Realize a flat shading effect when associated to a material.
    <p>To make this material attribute use by the Material object, the material must have :myMAterial.lightingEnable = true.<br />
  This attributes contains some parameters</p>
  
  ]]></description>
<author><![CDATA[ Thomas Pfeiffer - kiroukou
  ]]></author>
<version><![CDATA[ 3.1
  ]]></version>
<date><![CDATA[  26.07.2007
  ]]></date>
</classRec>
<method name='LightAttributes' fullname='sandy.materials.attributes:LightAttributes/LightAttributes' isStatic='false' isFinal='false' isOverride='false'  param_names='p_bBright;p_nAmbient' param_types='Boolean;Number' param_defaults='false;0.3' result_type='*'>
<description><![CDATA[
   Creates a new LightAttributes object.
      ]]></description>
<param><![CDATA[p_bBright  The brightness (value for useBright).
   ]]></param>
<param><![CDATA[p_nAmbient The ambient light value. A value between O and 1 is expected.
   ]]></param>
</method>
<method name='draw' fullname='sandy.materials.attributes:LightAttributes/draw' isStatic='false' isFinal='false' isOverride='true'  param_names='p_oGraphics;p_oPolygon;p_oMaterial;p_oScene' param_types='flash.display:Graphics;sandy.core.data:Polygon;sandy.materials:Material;sandy.core:Scene3D' param_defaults='undefined;undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
  ]]></description>
<private><![CDATA[]]></private>
</method>
<field name='useBright' fullname='sandy.materials.attributes:LightAttributes/useBright' type='Boolean' isStatic='false' isConst='false' defaultValue='false' >
<description><![CDATA[
   Flag for lighting mode.
   <p>If true, the lit objects use full light range from black to white. If false (the default) they range from black to their normal appearance.</p>
   ]]></description>
</field>
<classRec name='CelShadeAttributes' fullname='sandy.materials.attributes:CelShadeAttributes' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\materials\attributes\CelShadeAttributes.as' namespace='sandy.materials.attributes' access='public' baseclass='sandy.materials.attributes:ALightAttributes' isFinal='true' isDynamic='false' >
<description><![CDATA[
  Realize a Cell shading on a material.
  <b>Note:</b> this class ignores all properties inherited from ALightAttributes!
    ]]></description>
<author><![CDATA[ rafajafar + makc :)
  ]]></author>
</classRec>
<method name='CelShadeAttributes' fullname='sandy.materials.attributes:CelShadeAttributes/CelShadeAttributes' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oLightMap' param_types='sandy.materials.attributes:PhongAttributesLightMap' param_defaults='null' result_type='*'>
<description><![CDATA[
   Create the CelShadeAttributes object.
      ]]></description>
<param><![CDATA[p_oLightMap A lightmap that the object will use (default map has four shades of gray).
      ]]></param>
<see><![CDATA[PhongAttributesLightMap
   ]]></see>
</method>
<method name='draw' fullname='sandy.materials.attributes:CelShadeAttributes/draw' isStatic='false' isFinal='false' isOverride='true'  param_names='p_oGraphics;p_oPolygon;p_oMaterial;p_oScene' param_types='flash.display:Graphics;sandy.core.data:Polygon;sandy.materials:Material;sandy.core:Scene3D' param_defaults='undefined;undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
  ]]></description>
<private><![CDATA[]]></private>
</method>
<field name='aN' fullname='sandy.materials.attributes:CelShadeAttributes/private:aN' type='Array' isStatic='false' isConst='false' defaultValue='unknown' >
</field>
<field name='aNP' fullname='sandy.materials.attributes:CelShadeAttributes/private:aNP' type='Array' isStatic='false' isConst='false' defaultValue='unknown' >
</field>
<field name='dv' fullname='sandy.materials.attributes:CelShadeAttributes/private:dv' type='sandy.core.data:Point3D' isStatic='false' isConst='false' defaultValue='' >
</field>
<field name='e1' fullname='sandy.materials.attributes:CelShadeAttributes/private:e1' type='sandy.core.data:Point3D' isStatic='false' isConst='false' defaultValue='' >
</field>
<field name='e2' fullname='sandy.materials.attributes:CelShadeAttributes/private:e2' type='sandy.core.data:Point3D' isStatic='false' isConst='false' defaultValue='' >
</field>
<field name='lightmap' fullname='sandy.materials.attributes:CelShadeAttributes/lightmap' type='sandy.materials.attributes:PhongAttributesLightMap' isStatic='false' isConst='false' >
<description><![CDATA[
   Used if a lightmap needs to be overridden.
   ]]></description>
</field>
<field name='matrix' fullname='sandy.materials.attributes:CelShadeAttributes/private:matrix' type='flash.geom:Matrix' isStatic='false' isConst='false' defaultValue='' >
</field>
<field name='matrix2' fullname='sandy.materials.attributes:CelShadeAttributes/private:matrix2' type='flash.geom:Matrix' isStatic='false' isConst='false' defaultValue='' >
</field>
<field name='spherize' fullname='sandy.materials.attributes:CelShadeAttributes/spherize' type='Number' isStatic='false' isConst='false' defaultValue='0' >
<description><![CDATA[
   Non-zero value adds sphere normals to actual normals for light rendering.
   Use this with flat surfaces or cylinders.
   ]]></description>
</field>
<classRec name='PhongAttributes' fullname='sandy.materials.attributes:PhongAttributes' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\materials\attributes\PhongAttributes.as' namespace='sandy.materials.attributes' access='public' baseclass='sandy.materials.attributes:ALightAttributes' isFinal='true' isDynamic='false' >
<description><![CDATA[
  Realize a Phong shading on a material.
  <p>In true Phong shading, normals are supposed to be interpolated across the surface;
  here scaled normal projections are interpolated in the light map space. The downside of
  this method is that in case of low poly models interpolation results are inaccurate -
  in this case you can improve the result using GouraudAttributes for ambient and diffuse,
  and then this attribute for specular reflection.</p>
    ]]></description>
<author><![CDATA[ Makc
  ]]></author>
<version><![CDATA[ 3.1
  ]]></version>
<date><![CDATA[  15.12.2007
  ]]></date>
</classRec>
<method name='PhongAttributes' fullname='sandy.materials.attributes:PhongAttributes/PhongAttributes' isStatic='false' isFinal='false' isOverride='false'  param_names='p_bBright;p_nAmbient;p_nQuality;p_nSamples' param_types='Boolean;Number;int;int' param_defaults='false;0.0;15;4' result_type='*'>
<description><![CDATA[
   Create the PhongAttributes object.
   ]]></description>
<param><![CDATA[p_bBright The brightness (value for useBright).
   ]]></param>
<param><![CDATA[p_nAmbient The ambient light value. A value between 0 and 1 is expected.
   ]]></param>
<param><![CDATA[p_nQuality Quality of light response approximation. A value between 2 and 15 is expected.
   ]]></param>
<param><![CDATA[p_nSamples A number of calculated samples per anchor. Positive value is expected.
   ]]></param>
</method>
<method name='begin' fullname='sandy.materials.attributes:PhongAttributes/begin' isStatic='false' isFinal='false' isOverride='true'  param_names='p_oScene' param_types='sandy.core:Scene3D' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='computeLightMap' fullname='sandy.materials.attributes:PhongAttributes/computeLightMap' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oLight;p_nQuality;p_nSamples' param_types='sandy.core.light:Light3D;int;int' param_defaults='undefined;4;4' result_type='void'>
<description><![CDATA[
   Compute the light map.
   <p>Normally you should not need to call this function, as it is done for you automatically
   when it is needed. You might call it to compute light map in advance, though.</p>
   
   ]]></description>
<param><![CDATA[p_oLight Light3D object to make the light map for.
   ]]></param>
<param><![CDATA[p_nQuality Quality of light response approximation. A value between 2 and 15 is expected
   (Flash radial gradient is used internally light map, thus we can only roughly approximate exact
   lighting).
   ]]></param>
<param><![CDATA[p_nSamples A number of calculated samples per anchor. Positive value is expected (greater
   values will produce a little bit more accurate interpolation with non-equally spaced anchors).
      ]]></param>
<see><![CDATA[sandy.core.light.Light3D
   ]]></see>
</method>
<method name='draw' fullname='sandy.materials.attributes:PhongAttributes/draw' isStatic='false' isFinal='false' isOverride='true'  param_names='p_oGraphics;p_oPolygon;p_oMaterial;p_oScene' param_types='flash.display:Graphics;sandy.core.data:Polygon;sandy.materials:Material;sandy.core:Scene3D' param_defaults='undefined;undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='onPropertyChange' fullname='sandy.materials.attributes:PhongAttributes/protected:onPropertyChange' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='watchForUpdatedLights' fullname='sandy.materials.attributes:PhongAttributes/private:watchForUpdatedLights' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oEvent' param_types='sandy.events:SandyEvent' param_defaults='undefined' result_type='void'>
</method>
<method name='useBright' fullname='sandy.materials.attributes:PhongAttributes/useBright/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
   Flag for lightening mode.
   <p>If true (the default), the lit objects use full light range from black to white.<br />
   If false they just range from black to their normal appearance; additionally, current
   implementation does not render specular reflection in this case.</p>
   ]]></description>
</method>
<method name='useBright' fullname='sandy.materials.attributes:PhongAttributes/useBright/set' isStatic='false' isFinal='false' isOverride='false'  param_names='p_bUseBright' param_types='Boolean' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</method>
<field name='_useBright' fullname='sandy.materials.attributes:PhongAttributes/private:_useBright' type='Boolean' isStatic='false' isConst='false' defaultValue='true' >
</field>
<field name='aN' fullname='sandy.materials.attributes:PhongAttributes/private:aN' type='Array' isStatic='false' isConst='false' defaultValue='unknown' >
</field>
<field name='aN0' fullname='sandy.materials.attributes:PhongAttributes/private:aN0' type='Array' isStatic='false' isConst='false' defaultValue='unknown' >
</field>
<field name='aNP' fullname='sandy.materials.attributes:PhongAttributes/private:aNP' type='Array' isStatic='false' isConst='false' defaultValue='unknown' >
</field>
<field name='dv' fullname='sandy.materials.attributes:PhongAttributes/private:dv' type='sandy.core.data:Point3D' isStatic='false' isConst='false' defaultValue='' >
</field>
<field name='e1' fullname='sandy.materials.attributes:PhongAttributes/private:e1' type='sandy.core.data:Point3D' isStatic='false' isConst='false' defaultValue='' >
</field>
<field name='e2' fullname='sandy.materials.attributes:PhongAttributes/private:e2' type='sandy.core.data:Point3D' isStatic='false' isConst='false' defaultValue='' >
</field>
<field name='m_nQuality' fullname='sandy.materials.attributes:PhongAttributes/private:m_nQuality' type='int' isStatic='false' isConst='false' >
</field>
<field name='m_nSamples' fullname='sandy.materials.attributes:PhongAttributes/private:m_nSamples' type='int' isStatic='false' isConst='false' >
</field>
<field name='m_oCurrentLightMap' fullname='sandy.materials.attributes:PhongAttributes/private:m_oCurrentLightMap' type='sandy.materials.attributes:PhongAttributesLightMap' isStatic='false' isConst='false' >
</field>
<field name='m_oLightMaps' fullname='sandy.materials.attributes:PhongAttributes/private:m_oLightMaps' type='flash.utils:Dictionary' isStatic='false' isConst='false' defaultValue='' >
</field>
<field name='matrix' fullname='sandy.materials.attributes:PhongAttributes/private:matrix' type='flash.geom:Matrix' isStatic='false' isConst='false' defaultValue='' >
</field>
<field name='matrix2' fullname='sandy.materials.attributes:PhongAttributes/private:matrix2' type='flash.geom:Matrix' isStatic='false' isConst='false' defaultValue='' >
</field>
<field name='onlySpecular' fullname='sandy.materials.attributes:PhongAttributes/onlySpecular' type='Boolean' isStatic='false' isConst='false' defaultValue='false' >
<description><![CDATA[
   Flag for rendering mode.
   <p>If true, only specular highlight is rendered, when useBright is also true.<br />
   If false (the default) ambient and diffuse reflections will also be rendered.</p>
   ]]></description>
</field>
<field name='spherize' fullname='sandy.materials.attributes:PhongAttributes/spherize' type='Number' isStatic='false' isConst='false' defaultValue='0' >
<description><![CDATA[
   Non-zero value adds sphere normals to actual normals for light rendering.
   Use this with flat surfaces or cylinders.
   ]]></description>
</field>
<classRec name='OutlineAttributes' fullname='sandy.materials.attributes:OutlineAttributes' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\materials\attributes\OutlineAttributes.as' namespace='sandy.materials.attributes' access='public' baseclass='sandy.materials.attributes:AAttributes' isFinal='true' isDynamic='false' >
<description><![CDATA[
  Holds all outline attributes data for a material.
    <p>Each material can have an outline attribute to outline the whole 3D shape.<br/>
  The OutlineAttributes class stores all the information to draw this outline shape</p>
  
  ]]></description>
<author><![CDATA[ Thomas Pfeiffer - kiroukou
  ]]></author>
<version><![CDATA[ 3.1
  ]]></version>
<date><![CDATA[  09.09.2007
  ]]></date>
</classRec>
<method name='OutlineAttributes' fullname='sandy.materials.attributes:OutlineAttributes/OutlineAttributes' isStatic='false' isFinal='false' isOverride='false'  param_names='p_nThickness;p_nColor;p_nAlpha' param_types='uint;uint;Number' param_defaults='1;0;1' result_type='*'>
<description><![CDATA[
   Creates a new OutlineAttributes object.
      ]]></description>
<param><![CDATA[p_nThickness The line thickness.
   ]]></param>
<param><![CDATA[p_nColor  The line color.
   ]]></param>
<param><![CDATA[p_nAlpha  The alpha transparency value of the material.
   ]]></param>
</method>
<method name='draw' fullname='sandy.materials.attributes:OutlineAttributes/draw' isStatic='false' isFinal='false' isOverride='true'  param_names='p_oGraphics;p_oPolygon;p_oMaterial;p_oScene' param_types='flash.display:Graphics;sandy.core.data:Polygon;sandy.materials:Material;sandy.core:Scene3D' param_defaults='undefined;undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='drawOnSprite' fullname='sandy.materials.attributes:OutlineAttributes/drawOnSprite' isStatic='false' isFinal='false' isOverride='true'  param_names='p_oSprite;p_oMaterial;p_oScene' param_types='sandy.core.scenegraph:Sprite2D;sandy.materials:Material;sandy.core:Scene3D' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='init' fullname='sandy.materials.attributes:OutlineAttributes/init' isStatic='false' isFinal='false' isOverride='true'  param_names='p_oPolygon' param_types='sandy.core.data:Polygon' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='unlink' fullname='sandy.materials.attributes:OutlineAttributes/unlink' isStatic='false' isFinal='false' isOverride='true'  param_names='p_oPolygon' param_types='sandy.core.data:Polygon' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='alpha' fullname='sandy.materials.attributes:OutlineAttributes/alpha/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
<description><![CDATA[
   Indicates the alpha transparency value of the outline. Valid values are 0 (fully transparent) to 1 (fully opaque).
      ]]></description>
<default><![CDATA[1.0
   ]]></default>
</method>
<method name='angleThreshold' fullname='sandy.materials.attributes:OutlineAttributes/angleThreshold/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
<description><![CDATA[
   The angle threshold. Attribute will additionally draw edges between faces that form greater angle than this value.
   ]]></description>
</method>
<method name='color' fullname='sandy.materials.attributes:OutlineAttributes/color/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
<description><![CDATA[
   The line color.
   ]]></description>
</method>
<method name='thickness' fullname='sandy.materials.attributes:OutlineAttributes/thickness/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
<description><![CDATA[
   The line thickness.
   ]]></description>
</method>
<method name='alpha' fullname='sandy.materials.attributes:OutlineAttributes/alpha/set' isStatic='false' isFinal='false' isOverride='false'  param_names='p_nValue' param_types='Number' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='angleThreshold' fullname='sandy.materials.attributes:OutlineAttributes/angleThreshold/set' isStatic='false' isFinal='false' isOverride='false'  param_names='p_nValue' param_types='Number' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='color' fullname='sandy.materials.attributes:OutlineAttributes/color/set' isStatic='false' isFinal='false' isOverride='false'  param_names='p_nValue' param_types='Number' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='thickness' fullname='sandy.materials.attributes:OutlineAttributes/thickness/set' isStatic='false' isFinal='false' isOverride='false'  param_names='p_nValue' param_types='Number' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</method>
<field name='SHAPE_MAP' fullname='sandy.materials.attributes:OutlineAttributes/private:SHAPE_MAP' type='flash.utils:Dictionary' isStatic='false' isConst='true' defaultValue='' >
</field>
<field name='m_nAlpha' fullname='sandy.materials.attributes:OutlineAttributes/private:m_nAlpha' type='Number' isStatic='false' isConst='false' >
</field>
<field name='m_nAngleThreshold' fullname='sandy.materials.attributes:OutlineAttributes/private:m_nAngleThreshold' type='Number' isStatic='false' isConst='false' defaultValue='181' >
</field>
<field name='m_nColor' fullname='sandy.materials.attributes:OutlineAttributes/private:m_nColor' type='Number' isStatic='false' isConst='false' >
</field>
<field name='m_nThickness' fullname='sandy.materials.attributes:OutlineAttributes/private:m_nThickness' type='Number' isStatic='false' isConst='false' >
</field>
<field name='modified' fullname='sandy.materials.attributes:OutlineAttributes/modified' type='Boolean' isStatic='false' isConst='false' >
<description><![CDATA[
   Whether the attribute has been modified since it's last render.
   ]]></description>
</field>
<classRec name='GouraudAttributes' fullname='sandy.materials.attributes:GouraudAttributes' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\materials\attributes\GouraudAttributes.as' namespace='sandy.materials.attributes' access='public' baseclass='sandy.materials.attributes:ALightAttributes' isFinal='true' isDynamic='false' >
<description><![CDATA[
  Realize a Gouraud shading on a material.
    <p>To make this material attribute use by the Material object, the material must have :myMAterial.lighteningEnable = true.<br />
  This attributes contains some parameters</p>
  
  ]]></description>
<author><![CDATA[ Thomas Pfeiffer - kiroukou
  ]]></author>
<author><![CDATA[ Makc for effect improvment 
  ]]></author>
<version><![CDATA[ 3.1
  ]]></version>
<date><![CDATA[  13.11.2007
  ]]></date>
</classRec>
<method name='GouraudAttributes' fullname='sandy.materials.attributes:GouraudAttributes/GouraudAttributes' isStatic='false' isFinal='false' isOverride='false'  param_names='p_bBright;p_nAmbient' param_types='Boolean;Number' param_defaults='false;0.0' result_type='*'>
<description><![CDATA[
   Create the GouraudAttribute object.
   ]]></description>
<param><![CDATA[p_bBright The brightness (value for useBright).
   ]]></param>
<param><![CDATA[p_nAmbient The ambient light value. A value between O and 1 is expected.
   ]]></param>
</method>
<method name='draw' fullname='sandy.materials.attributes:GouraudAttributes/draw' isStatic='false' isFinal='false' isOverride='true'  param_names='p_oGraphics;p_oPolygon;p_oMaterial;p_oScene' param_types='flash.display:Graphics;sandy.core.data:Polygon;sandy.materials:Material;sandy.core:Scene3D' param_defaults='undefined;undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
  ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='makeLightMap' fullname='sandy.materials.attributes:GouraudAttributes/private:makeLightMap' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='useBright' fullname='sandy.materials.attributes:GouraudAttributes/useBright/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
   Flag for lightening mode.
   <p>If true, the lit objects use full light range from black to white. If false (the default) they just range from black to their normal appearance.</p>
   ]]></description>
</method>
<method name='useBright' fullname='sandy.materials.attributes:GouraudAttributes/useBright/set' isStatic='false' isFinal='false' isOverride='false'  param_names='p_bUseBright' param_types='Boolean' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</method>
<field name='_useBright' fullname='sandy.materials.attributes:GouraudAttributes/private:_useBright' type='Boolean' isStatic='false' isConst='false' defaultValue='true' >
</field>
<field name='m1' fullname='sandy.materials.attributes:GouraudAttributes/private:m1' type='flash.geom:Matrix' isStatic='false' isConst='false' defaultValue='' >
</field>
<field name='m2' fullname='sandy.materials.attributes:GouraudAttributes/private:m2' type='flash.geom:Matrix' isStatic='false' isConst='false' defaultValue='' >
</field>
<field name='m_aAlphas' fullname='sandy.materials.attributes:GouraudAttributes/private:m_aAlphas' type='Array' isStatic='false' isConst='false' >
</field>
<field name='m_aColors' fullname='sandy.materials.attributes:GouraudAttributes/private:m_aColors' type='Array' isStatic='false' isConst='false' >
</field>
<field name='m_aRatios' fullname='sandy.materials.attributes:GouraudAttributes/private:m_aRatios' type='Array' isStatic='false' isConst='false' >
</field>
<field name='m_oVertex' fullname='sandy.materials.attributes:GouraudAttributes/private:m_oVertex' type='sandy.core.data:Vertex' isStatic='false' isConst='false' >
</field>
<field name='v0L' fullname='sandy.materials.attributes:GouraudAttributes/private:v0L' type='Number' isStatic='false' isConst='false' >
</field>
<classRec name='LineAttributes' fullname='sandy.materials.attributes:LineAttributes' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\materials\attributes\LineAttributes.as' namespace='sandy.materials.attributes' access='public' baseclass='sandy.materials.attributes:AAttributes' isFinal='false' isDynamic='false' >
<description><![CDATA[
  Holds all line attribute data for a material.
    <p>Some materials have line attributes to outline the faces of a 3D shape.<br/>
  In these cases a LineAttributes object holds all line attribute data</p>
  
  ]]></description>
<author><![CDATA[ Thomas Pfeiffer - kiroukou
  ]]></author>
<version><![CDATA[ 3.1
  ]]></version>
<date><![CDATA[  26.07.2007
  ]]></date>
</classRec>
<method name='LineAttributes' fullname='sandy.materials.attributes:LineAttributes/LineAttributes' isStatic='false' isFinal='false' isOverride='false'  param_names='p_nThickness;p_nColor;p_nAlpha' param_types='uint;uint;Number' param_defaults='1;0;1' result_type='*'>
<description><![CDATA[
   Creates a new LineAttributes object.
      ]]></description>
<param><![CDATA[p_nThickness The line thickness.
   ]]></param>
<param><![CDATA[p_nColor  The line color.
   ]]></param>
<param><![CDATA[p_nAlpha  The alpha transparency value of the material.
   ]]></param>
</method>
<method name='draw' fullname='sandy.materials.attributes:LineAttributes/draw' isStatic='false' isFinal='false' isOverride='true'  param_names='p_oGraphics;p_oPolygon;p_oMaterial;p_oScene' param_types='flash.display:Graphics;sandy.core.data:Polygon;sandy.materials:Material;sandy.core:Scene3D' param_defaults='undefined;undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
  ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='alpha' fullname='sandy.materials.attributes:LineAttributes/alpha/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
<description><![CDATA[
   Indicates the alpha transparency value of the line. Valid values are 0 (fully transparent) to 1 (fully opaque).
      ]]></description>
<default><![CDATA[1.0
   ]]></default>
</method>
<method name='color' fullname='sandy.materials.attributes:LineAttributes/color/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
<description><![CDATA[
   The line color.
   ]]></description>
</method>
<method name='thickness' fullname='sandy.materials.attributes:LineAttributes/thickness/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
<description><![CDATA[
   The line thickness.
   ]]></description>
</method>
<method name='alpha' fullname='sandy.materials.attributes:LineAttributes/alpha/set' isStatic='false' isFinal='false' isOverride='false'  param_names='p_nValue' param_types='Number' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='color' fullname='sandy.materials.attributes:LineAttributes/color/set' isStatic='false' isFinal='false' isOverride='false'  param_names='p_nValue' param_types='Number' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='thickness' fullname='sandy.materials.attributes:LineAttributes/thickness/set' isStatic='false' isFinal='false' isOverride='false'  param_names='p_nValue' param_types='Number' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</method>
<field name='m_nAlpha' fullname='sandy.materials.attributes:LineAttributes/private:m_nAlpha' type='Number' isStatic='false' isConst='false' >
</field>
<field name='m_nColor' fullname='sandy.materials.attributes:LineAttributes/private:m_nColor' type='Number' isStatic='false' isConst='false' >
</field>
<field name='m_nThickness' fullname='sandy.materials.attributes:LineAttributes/private:m_nThickness' type='Number' isStatic='false' isConst='false' >
</field>
<field name='modified' fullname='sandy.materials.attributes:LineAttributes/modified' type='Boolean' isStatic='false' isConst='false' >
<description><![CDATA[
   Whether the attribute has been modified since it's last render.
   ]]></description>
</field>
<classRec name='CylinderEnvMap' fullname='sandy.materials.attributes:CylinderEnvMap' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\materials\attributes\CylinderEnvMap.as' namespace='sandy.materials.attributes' access='public' baseclass='sandy.materials.attributes:AAttributes' isFinal='false' isDynamic='false' >
<description><![CDATA[
  Applies cylindric environment map.
    ]]></description>
<author><![CDATA[ makc
  ]]></author>
<version><![CDATA[ 3.1
  ]]></version>
</classRec>
<method name='CylinderEnvMap' fullname='sandy.materials.attributes:CylinderEnvMap/CylinderEnvMap' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oBitmapMaterial' param_types='sandy.materials:BitmapMaterial' param_defaults='undefined' result_type='*'>
<description><![CDATA[
   Create the CylinderEnvMap object.
      ]]></description>
<param><![CDATA[p_oBitmapMaterial A bitmap-based material to use for environment map.
   ]]></param>
</method>
<method name='begin' fullname='sandy.materials.attributes:CylinderEnvMap/begin' isStatic='false' isFinal='false' isOverride='true'  param_names='p_oScene' param_types='sandy.core:Scene3D' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='computeMapping' fullname='sandy.materials.attributes:CylinderEnvMap/protected:computeMapping' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='draw' fullname='sandy.materials.attributes:CylinderEnvMap/draw' isStatic='false' isFinal='false' isOverride='true'  param_names='p_oGraphics;p_oPolygon;p_oMaterial;p_oScene' param_types='flash.display:Graphics;sandy.core.data:Polygon;sandy.materials:Material;sandy.core:Scene3D' param_defaults='undefined;undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
  ]]></description>
<private><![CDATA[]]></private>
</method>
<field name='aN' fullname='sandy.materials.attributes:CylinderEnvMap/protected:aN' type='Array' isStatic='false' isConst='false' defaultValue='unknown' >
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='aNP' fullname='sandy.materials.attributes:CylinderEnvMap/protected:aNP' type='Array' isStatic='false' isConst='false' defaultValue='unknown' >
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='m_aPoints' fullname='sandy.materials.attributes:CylinderEnvMap/protected:m_aPoints' type='Array' isStatic='false' isConst='false' >
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='m_oVertices' fullname='sandy.materials.attributes:CylinderEnvMap/private:m_oVertices' type='flash.utils:Dictionary' isStatic='false' isConst='false' >
</field>
<field name='mapMaterial' fullname='sandy.materials.attributes:CylinderEnvMap/mapMaterial' type='sandy.materials:BitmapMaterial' isStatic='false' isConst='false' >
<description><![CDATA[
   A bitmap-based material to use for environment map.
   ]]></description>
</field>
<field name='matrix' fullname='sandy.materials.attributes:CylinderEnvMap/private:matrix' type='flash.geom:Matrix' isStatic='false' isConst='false' defaultValue='' >
</field>
<field name='matrix2' fullname='sandy.materials.attributes:CylinderEnvMap/private:matrix2' type='flash.geom:Matrix' isStatic='false' isConst='false' defaultValue='' >
</field>
<field name='spherize' fullname='sandy.materials.attributes:CylinderEnvMap/spherize' type='Number' isStatic='false' isConst='false' defaultValue='0' >
<description><![CDATA[
   Non-zero value adds sphere normals to actual normals for mapping.
   Use this with flat surfaces or cylinders.
   ]]></description>
</field>
<classRec name='VertexNormalAttributes' fullname='sandy.materials.attributes:VertexNormalAttributes' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\materials\attributes\VertexNormalAttributes.as' namespace='sandy.materials.attributes' access='public' baseclass='sandy.materials.attributes:LineAttributes' isFinal='true' isDynamic='false' >
<description><![CDATA[
  Display the vertex normals of a given object.
    <p>Developed originally for a debug purpose, this class allows you to create some
  special effects, displaying the normal of each vertex.</p>
  
  ]]></description>
<author><![CDATA[ Thomas Pfeiffer - kiroukou
  ]]></author>
<version><![CDATA[ 3.1
  ]]></version>
<date><![CDATA[  26.07.2007
  ]]></date>
</classRec>
<method name='VertexNormalAttributes' fullname='sandy.materials.attributes:VertexNormalAttributes/VertexNormalAttributes' isStatic='false' isFinal='false' isOverride='false'  param_names='p_nLength;p_nThickness;p_nColor;p_nAlpha' param_types='Number;uint;uint;Number' param_defaults='10;1;0;1' result_type='*'>
<description><![CDATA[
   Creates a new VertexNormalAttributes object.
      ]]></description>
<param><![CDATA[p_nLength  The length of the segment.
   ]]></param>
<param><![CDATA[p_nThickness The line thickness.
   ]]></param>
<param><![CDATA[p_nColor  The line color.
   ]]></param>
<param><![CDATA[p_nAlpha  The alpha transparency value of the material.
   ]]></param>
</method>
<method name='begin' fullname='sandy.materials.attributes:VertexNormalAttributes/begin' isStatic='false' isFinal='false' isOverride='true'  param_names='p_oScene' param_types='sandy.core:Scene3D' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='draw' fullname='sandy.materials.attributes:VertexNormalAttributes/draw' isStatic='false' isFinal='false' isOverride='true'  param_names='p_oGraphics;p_oPolygon;p_oMaterial;p_oScene' param_types='flash.display:Graphics;sandy.core.data:Polygon;sandy.materials:Material;sandy.core:Scene3D' param_defaults='undefined;undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='length' fullname='sandy.materials.attributes:VertexNormalAttributes/length/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
<description><![CDATA[
   The line length.
   ]]></description>
</method>
<method name='length' fullname='sandy.materials.attributes:VertexNormalAttributes/length/set' isStatic='false' isFinal='false' isOverride='false'  param_names='p_nValue' param_types='Number' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</method>
<field name='m_nLength' fullname='sandy.materials.attributes:VertexNormalAttributes/private:m_nLength' type='Number' isStatic='false' isConst='false' >
</field>
<classRec name='MediumAttributes' fullname='sandy.materials.attributes:MediumAttributes' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\materials\attributes\MediumAttributes.as' namespace='sandy.materials.attributes' access='public' baseclass='sandy.materials.attributes:AAttributes' isFinal='true' isDynamic='false' >
<description><![CDATA[
  This attribute provides very basic simulation of partially opaque medium.
  You can use this attribute to achieve wide range of effects (e.g., fog, Rayleigh scattering, light attached to camera, etc).
  
  ]]></description>
<author><![CDATA[ makc
  ]]></author>
<version><![CDATA[ 3.1
  ]]></version>
<date><![CDATA[  01.12.2007
  ]]></date>
</classRec>
<method name='MediumAttributes' fullname='sandy.materials.attributes:MediumAttributes/MediumAttributes' isStatic='false' isFinal='false' isOverride='false'  param_names='p_nColor;p_oFadeFrom;p_oFadeTo;p_nBlurAmount' param_types='uint;sandy.core.data:Point3D;sandy.core.data:Point3D;Number' param_defaults='0xFFFFFFFF;null;null;0' result_type='*'>
<description><![CDATA[
   Creates a new MediumAttributes object.
      ]]></description>
<param><![CDATA[p_nColor  Medium color
   ]]></param>
<param><![CDATA[p_oFadeTo  Attenuation Point3D (500 pixels beyond the screen by default).
   ]]></param>
<param><![CDATA[p_oFadeFrom Transparent point (at the screen by default).
   ]]></param>
<param><![CDATA[p_nBlurAmount Maximum amount of blur to add
      ]]></param>
<see><![CDATA[sandy.core.data.Point3D
   ]]></see>
</method>
<method name='blurDisplayObjectBy' fullname='sandy.materials.attributes:MediumAttributes/private:blurDisplayObjectBy' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oDisplayObject;p_nBlurAmount' param_types='flash.display:DisplayObject;Number' param_defaults='undefined;undefined' result_type='void'>
</method>
<method name='draw' fullname='sandy.materials.attributes:MediumAttributes/draw' isStatic='false' isFinal='false' isOverride='true'  param_names='p_oGraphics;p_oPolygon;p_oMaterial;p_oScene' param_types='flash.display:Graphics;sandy.core.data:Polygon;sandy.materials:Material;sandy.core:Scene3D' param_defaults='undefined;undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='drawOnSprite' fullname='sandy.materials.attributes:MediumAttributes/drawOnSprite' isStatic='false' isFinal='false' isOverride='true'  param_names='p_oSprite;p_oMaterial;p_oScene' param_types='sandy.core.scenegraph:Sprite2D;sandy.materials:Material;sandy.core:Scene3D' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='prepareBlurAmount' fullname='sandy.materials.attributes:MediumAttributes/private:prepareBlurAmount' isStatic='false' isFinal='false' isOverride='false'  param_names='p_nBlurAmount' param_types='Number' param_defaults='undefined' result_type='Number'>
</method>
<method name='ratioFromWorldPoint3D' fullname='sandy.materials.attributes:MediumAttributes/private:ratioFromWorldPoint3D' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oW' param_types='sandy.core.data:Point3D' param_defaults='undefined' result_type='Number'>
</method>
<method name='color' fullname='sandy.materials.attributes:MediumAttributes/color/get' isStatic='false' isFinal='false' isOverride='false'  result_type='uint'>
<description><![CDATA[
   Medium color (32-bit value) at the point given by fadeFrom + fadeTo.
   If this value is transparent, color gradient will be extrapolated beyond that point.
   ]]></description>
</method>
<method name='fadeTo' fullname='sandy.materials.attributes:MediumAttributes/fadeTo/get' isStatic='false' isFinal='false' isOverride='false'  result_type='sandy.core.data:Point3D'>
<description><![CDATA[
   Attenuation Point3D. This is the Point3D from transparent point to opaque point.
      ]]></description>
<see><![CDATA[sandy.core.data.Point3D
   ]]></see>
</method>
<method name='color' fullname='sandy.materials.attributes:MediumAttributes/color/set' isStatic='false' isFinal='false' isOverride='false'  param_names='p_nColor' param_types='uint' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='fadeTo' fullname='sandy.materials.attributes:MediumAttributes/fadeTo/set' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oW' param_types='sandy.core.data:Point3D' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</method>
<field name='_a' fullname='sandy.materials.attributes:MediumAttributes/private:_a' type='Number' isStatic='false' isConst='false' >
</field>
<field name='_c' fullname='sandy.materials.attributes:MediumAttributes/private:_c' type='uint' isStatic='false' isConst='false' >
</field>
<field name='_fadeTo' fullname='sandy.materials.attributes:MediumAttributes/private:_fadeTo' type='sandy.core.data:Point3D' isStatic='false' isConst='false' >
</field>
<field name='_fadeToN2' fullname='sandy.materials.attributes:MediumAttributes/private:_fadeToN2' type='Number' isStatic='false' isConst='false' >
</field>
<field name='_m' fullname='sandy.materials.attributes:MediumAttributes/private:_m' type='flash.geom:Matrix' isStatic='false' isConst='false' defaultValue='' >
</field>
<field name='blurAmount' fullname='sandy.materials.attributes:MediumAttributes/blurAmount' type='Number' isStatic='false' isConst='false' >
<description><![CDATA[
   Maximum amount of blur to add. <b>Warning:</b> this feature is very expensive when shape useSingleContainer is false.
   ]]></description>
</field>
<field name='fadeFrom' fullname='sandy.materials.attributes:MediumAttributes/fadeFrom' type='sandy.core.data:Point3D' isStatic='false' isConst='false' >
<description><![CDATA[
   Transparent point in wx, wy and wz coordinates.
      ]]></description>
<see><![CDATA[sandy.core.data.Point3D
   ]]></see>
</field>
<field name='m_bWasNotBlurred' fullname='sandy.materials.attributes:MediumAttributes/private:m_bWasNotBlurred' type='Boolean' isStatic='false' isConst='false' defaultValue='true' >
</field>
<classRec name='Geometry3D' fullname='sandy.core.scenegraph:Geometry3D' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\core\scenegraph\Geometry3D.as' namespace='sandy.core.scenegraph' access='public' baseclass='Object' isFinal='true' isDynamic='false' >
<description><![CDATA[
   The Geometry3D class holds a complete description of the geometry of a Shape3D.
     It contains points, faces, normals and uv coordinates.
   
   NOTE:  For best performance, Geometry should be created in offline mode,
    especially all faces, as createFace() validates all points 
    if these points exist in points array.
  
   NOTE:  This object is going to work well _ONLY_ if arrays 
    wont be changed directlly [ie. push()] but _ONLY_ via accessor methods:
    createFace, createFaceByIds, addFace, addFaces.
    In the future we can make these Arrays PRIVATE but then the only 
    way to make them safe is to deliver additionall accessors like 
    getPoint(index:int), getFace(index:int) what could potentially slow 
    affect performance of this structure (well, we need to test it, and 
    if there is no problem, make arrays private and provide accessors for 
    _SINGLE_ array's elements to make them safe ). 
    <p>[<b>ToDo</b>: Revise this and adopt tp ASDoc]</p>
  
  ]]></description>
<author><![CDATA[Mirek Mencel
  ]]></author>
<author><![CDATA[Thomas PFEIFFER
  ]]></author>
<version><![CDATA[ 3.1
  ]]></version>
<date><![CDATA[07.04.2007
  ]]></date>
</classRec>
<method name='Geometry3D' fullname='sandy.core.scenegraph:Geometry3D/Geometry3D' isStatic='false' isFinal='false' isOverride='false'  param_names='p_points' param_types='Array' param_defaults='null' result_type='*'>
<description><![CDATA[
   Creates a 3D geometry.
   
   ]]></description>
<param><![CDATA[p_points Not used in this version
   ]]></param>
</method>
<method name='clone' fullname='sandy.core.scenegraph:Geometry3D/clone' isStatic='false' isFinal='false' isOverride='false'  result_type='sandy.core.scenegraph:Geometry3D'>
<description><![CDATA[
  Returns a clone of this Geometry3D.
   
  <p>NOTE: Because polygons also stores instance-specific data like Appearance
  on the Geometry level, we are considering it only as a set of connections between points, 
  so only coordinates and normals are copied in the clone process.
  
  ]]></description>
<return><![CDATA[A copy of this geometry
  ]]></return>
</method>
<method name='dispose' fullname='sandy.core.scenegraph:Geometry3D/dispose' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
   Dispose all the geometry ressources.
   Arrays data is removed, arrays are set to null value to make garbage collection possible
   ]]></description>
</method>
<method name='generateFaceNormals' fullname='sandy.core.scenegraph:Geometry3D/generateFaceNormals' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='generateVertexNormals' fullname='sandy.core.scenegraph:Geometry3D/generateVertexNormals' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='getNextFaceID' fullname='sandy.core.scenegraph:Geometry3D/getNextFaceID' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
   Returns the next unused face id.
      <p>This is the next free index in the faces list, and used by setFaceVertexIds</p>
      ]]></description>
<return><![CDATA[ The index
   ]]></return>
</method>
<method name='getNextFaceNormalID' fullname='sandy.core.scenegraph:Geometry3D/getNextFaceNormalID' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
   Returns the next unused normal id.
      <p>This is the next free index in the normal list, and used by setFaceNormal</p>
      ]]></description>
<return><![CDATA[ The normal id
   ]]></return>
</method>
<method name='getNextFaceUVCoordID' fullname='sandy.core.scenegraph:Geometry3D/getNextFaceUVCoordID' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
   Returns the next unused face UV coordinates id.
      <p>This is the next free index in the UV coordinate id list, and used by setFaceUVCoords</p>
      ]]></description>
<return><![CDATA[ The index
   ]]></return>
</method>
<method name='getNextUVCoordID' fullname='sandy.core.scenegraph:Geometry3D/getNextUVCoordID' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
   Returns the next unused UV coordinates id.
   
   <p>This is the next free index in the UV coordinates list, and used by setUVCoords</p>
      ]]></description>
<return><![CDATA[ The index
   ]]></return>
</method>
<method name='getNextVertexID' fullname='sandy.core.scenegraph:Geometry3D/getNextVertexID' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
   Returns the next unused vertex id.
      <p>this is the next free index in the verex list, and used by setVertex</p>
      ]]></description>
<return><![CDATA[ The vertex id
   ]]></return>
</method>
<method name='getNextVertexNormalID' fullname='sandy.core.scenegraph:Geometry3D/getNextVertexNormalID' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
   Returns the next unused vertex normal id.
      <p>This is the next free index in the vertex normal list, and used by setVertexNormal</p>
      ]]></description>
<return><![CDATA[ The vertex normal id
   ]]></return>
</method>
<method name='getVertexId' fullname='sandy.core.scenegraph:Geometry3D/getVertexId' isStatic='false' isFinal='false' isOverride='false'  param_names='p_point' param_types='sandy.core.data:Vertex' param_defaults='undefined' result_type='int'>
<description><![CDATA[
   Returns the index of a specified point in the vertex list.
      ]]></description>
<return><![CDATA[ The index
   ]]></return>
</method>
<method name='init' fullname='sandy.core.scenegraph:Geometry3D/init' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
  Not used in this version.
  ]]></description>
</method>
<method name='isEdgeExist' fullname='sandy.core.scenegraph:Geometry3D/private:isEdgeExist' isStatic='false' isFinal='false' isOverride='false'  param_names='p_nVertexId1;p_nVertexId2' param_types='uint;uint' param_defaults='undefined;undefined' result_type='Boolean'>
</method>
<method name='setFaceNormal' fullname='sandy.core.scenegraph:Geometry3D/setFaceNormal' isStatic='false' isFinal='false' isOverride='false'  param_names='p_nNormalID;p_nX;p_nY;p_nZ' param_types='int;Number;Number;Number' param_defaults='undefined;undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
   Adds new normal at the specified index of the face normal list.
   
   ]]></description>
<param><![CDATA[p_nNormalID Index at which to save the normal
   ]]></param>
<param><![CDATA[p_nX  The x component of the normal
   ]]></param>
<param><![CDATA[p_nY  The y component of the normal
   ]]></param>
<param><![CDATA[p_nZ  The z component of the normal
   ]]></param>
<return><![CDATA[  The next free index or -1 it the index is already occupied   
   ]]></return>
</method>
<method name='setFaceUVCoordsIds' fullname='sandy.core.scenegraph:Geometry3D/setFaceUVCoordsIds' isStatic='false' isFinal='false' isOverride='false'  param_names='p_nFaceID;arguments' param_types='int;restParam' param_defaults='undefined;undefined' result_type='int'>
<description><![CDATA[
   Set the ID's of face UV coordinates.
      ]]></description>
<param><![CDATA[p_nFaceID The id of the face
   ]]></param>
<param><![CDATA[...rest  An array of data containing the ID's of the UV coords list for the face
   ]]></param>
<return><![CDATA[  The next free index or -1 it the index is already occupied
   ]]></return>
</method>
<method name='setFaceVertexIds' fullname='sandy.core.scenegraph:Geometry3D/setFaceVertexIds' isStatic='false' isFinal='false' isOverride='false'  param_names='p_nFaceID;arguments' param_types='int;restParam' param_defaults='undefined;undefined' result_type='int'>
<description><![CDATA[
   Sets the ID's of the face vertices.
   
   ]]></description>
<param><![CDATA[p_nFaceID Id of the face
   ]]></param>
<return><![CDATA[  The next free index or -1 it the index is already occupied
   ]]></return>
<param...rest><![CDATA[ An array of data containing the ID's of the vertex list for the face
   ]]></param...rest>
</method>
<method name='setUVCoords' fullname='sandy.core.scenegraph:Geometry3D/setUVCoords' isStatic='false' isFinal='false' isOverride='false'  param_names='p_nID;p_UValue;p_nVValue' param_types='int;Number;Number' param_defaults='undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
   Adds UV coordinates for single face.
   
   [<b>ToDo</b>: Explain this ]
   ]]></description>
<param><![CDATA[p_nID  The id of the face
   ]]></param>
<param><![CDATA[p_UValue The u component of the UV coordinate
   ]]></param>
<param><![CDATA[p_nVValue The v component of the UV coordinate
   ]]></param>
<return><![CDATA[  The next free index or -1 it the index is already occupied
   ]]></return>
</method>
<method name='setVertex' fullname='sandy.core.scenegraph:Geometry3D/setVertex' isStatic='false' isFinal='false' isOverride='false'  param_names='p_nVertexID;p_nX;p_nY;p_nZ' param_types='int;Number;Number;Number' param_defaults='undefined;undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
   Adds new point at the specified index of the vertex list.
   
   ]]></description>
<param><![CDATA[p_nVertexID Index at which to save the vertex
   ]]></param>
<param><![CDATA[p_nX  x coordinate of the vertex
   ]]></param>
<param><![CDATA[p_nY  y coordinate of the vertex
   ]]></param>
<param><![CDATA[p_nZ  z coordinate of the vertex
   ]]></param>
<return><![CDATA[  The next free index or -1 it the index is already occupied   
   ]]></return>
</method>
<method name='setVertexNormal' fullname='sandy.core.scenegraph:Geometry3D/setVertexNormal' isStatic='false' isFinal='false' isOverride='false'  param_names='p_nNormalID;p_nX;p_nY;p_nZ' param_types='int;Number;Number;Number' param_defaults='undefined;undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
   Add new point the specified index of the vertex normal list.
   
   ]]></description>
<param><![CDATA[p_nNormalID Index at which to save the vertex normal
   ]]></param>
<param><![CDATA[p_nX  x coordinate of the vertex normal
   ]]></param>
<param><![CDATA[p_nY  y coordinate of the vertex normal
   ]]></param>
<param><![CDATA[p_nZ  z coordinate of the vertex normal
   ]]></param>
<return><![CDATA[  The next free index or -1 it the index is already occupied
   ]]></return>
</method>
<method name='toString' fullname='sandy.core.scenegraph:Geometry3D/toString' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[
   Returns a string representation of this geometry.
      <p>The string contins the lengths of the arrays of data defining this geometry.</p>
   <p>[<b>ToDo</b>: Decide if this is the best representation ]</p>
      ]]></description>
<return><![CDATA[The string representation
   ]]></return>
</method>
<field name='EDGES_DICO' fullname='sandy.core.scenegraph:Geometry3D/private:EDGES_DICO' type='flash.utils:Dictionary' isStatic='false' isConst='false' defaultValue='' >
</field>
<field name='aEdges' fullname='sandy.core.scenegraph:Geometry3D/aEdges' type='Array' isStatic='false' isConst='false' defaultValue='' >
</field>
<field name='aFaceEdges' fullname='sandy.core.scenegraph:Geometry3D/aFaceEdges' type='Array' isStatic='false' isConst='false' defaultValue='' >
</field>
<field name='aFacesNormals' fullname='sandy.core.scenegraph:Geometry3D/aFacesNormals' type='Array' isStatic='false' isConst='false' defaultValue='' >
<description><![CDATA[ Array ov normals ]]></description>
</field>
<field name='aFacesUVCoordsID' fullname='sandy.core.scenegraph:Geometry3D/aFacesUVCoordsID' type='Array' isStatic='false' isConst='false' defaultValue='' >
</field>
<field name='aFacesVertexID' fullname='sandy.core.scenegraph:Geometry3D/aFacesVertexID' type='Array' isStatic='false' isConst='false' defaultValue='' >
<description><![CDATA[ Array of faces composed from vertices ]]></description>
</field>
<field name='aUVCoords' fullname='sandy.core.scenegraph:Geometry3D/aUVCoords' type='Array' isStatic='false' isConst='false' defaultValue='' >
<description><![CDATA[ UV Coords for faces ]]></description>
</field>
<field name='aVertex' fullname='sandy.core.scenegraph:Geometry3D/aVertex' type='Array' isStatic='false' isConst='false' defaultValue='' >
<description><![CDATA[ Array of vertices ]]></description>
</field>
<field name='aVertexNormals' fullname='sandy.core.scenegraph:Geometry3D/aVertexNormals' type='Array' isStatic='false' isConst='false' defaultValue='' >
</field>
<field name='m_aVertexFaces' fullname='sandy.core.scenegraph:Geometry3D/private:m_aVertexFaces' type='Array' isStatic='false' isConst='false' defaultValue='' >
</field>
<field name='m_nLastFaceId' fullname='sandy.core.scenegraph:Geometry3D/private:m_nLastFaceId' type='int' isStatic='false' isConst='false' defaultValue='0' >
</field>
<field name='m_nLastFaceUVId' fullname='sandy.core.scenegraph:Geometry3D/private:m_nLastFaceUVId' type='int' isStatic='false' isConst='false' defaultValue='0' >
</field>
<field name='m_nLastNormalId' fullname='sandy.core.scenegraph:Geometry3D/private:m_nLastNormalId' type='int' isStatic='false' isConst='false' defaultValue='0' >
</field>
<field name='m_nLastUVId' fullname='sandy.core.scenegraph:Geometry3D/private:m_nLastUVId' type='int' isStatic='false' isConst='false' defaultValue='0' >
</field>
<field name='m_nLastVertexId' fullname='sandy.core.scenegraph:Geometry3D/private:m_nLastVertexId' type='int' isStatic='false' isConst='false' defaultValue='0' >
</field>
<field name='m_nLastVertexNormalId' fullname='sandy.core.scenegraph:Geometry3D/private:m_nLastVertexNormalId' type='int' isStatic='false' isConst='false' defaultValue='0' >
</field>
<interfaceRec name='INodeOperation' fullname='sandy.core.scenegraph:INodeOperation' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\core\scenegraph\INodeOperation.as' namespace='sandy.core.scenegraph' access='public' baseClasses='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
  Interface for node operations.
    <p>Implements the visitor design pattern: 
  Using the visitor design pattern, you can define a new operation on Node
  and its subclasses without having to change the classes and without having
  to take care of traversing the node tree.</p>
  
  ]]></description>
<author><![CDATA[ flexrails
  ]]></author>
<example><![CDATA[  <listing version="3.1">
      var mySpecialOperation:SpecialOperation = new SpecialOperation;
  
      mySpecialOperation.someParameter = 0.8;
      someTreeNode.perform(mySpecialOperation);
      trace(mySpecialOperation.someResult);
  
      mySpecialOperation.someParameter = 0.2;
      someOtherTreeNode.perform(mySpecialOperation);
      trace(mySpecialOperation.someResult);
  </listing>
  
  ]]></example>
<version><![CDATA[ 3.1
  ]]></version>
<date><![CDATA[  22.03.2008
  ]]></date>
</interfaceRec>
<method name='performOnEntry' fullname='sandy.core.scenegraph:INodeOperation/sandy.core.scenegraph:INodeOperation:performOnEntry' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oNode' param_types='sandy.core.scenegraph:Node' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   Operation to be performed on node entry
   
   ]]></description>
<param><![CDATA[ p_oNode The node the entry operation is to be performed on
   ]]></param>
</method>
<method name='performOnExit' fullname='sandy.core.scenegraph:INodeOperation/sandy.core.scenegraph:INodeOperation:performOnExit' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oNode' param_types='sandy.core.scenegraph:Node' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   Operation to be performed on node exit
   
   ]]></description>
<param><![CDATA[ p_oNode The node the exit operation is to be performed on
   ]]></param>
</method>
<classRec name='Node' fullname='sandy.core.scenegraph:Node' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\core\scenegraph\Node.as' namespace='sandy.core.scenegraph' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
  ABSTRACT CLASS - Base class for all nodes in the object tree.
    <p>The base class for all Group and object nodes,
  that handles all basic operations on a tree node.</p>
    ]]></description>
<author><![CDATA[ Thomas Pfeiffer - kiroukou
  ]]></author>
<version><![CDATA[ 3.1
  ]]></version>
<date><![CDATA[  16.03.2007
  ]]></date>
</classRec>
<method name='Node' fullname='sandy.core.scenegraph:Node/Node' isStatic='false' isFinal='false' isOverride='false'  param_names='p_sName' param_types='String' param_defaults='' result_type='*'>
<description><![CDATA[
   Creates a node in the object tree of the world.
      <p>This constructor should normally not be called directly, only from a sub class.</p>
      ]]></description>
<param><![CDATA[p_sName A string identifier for this object.
   ]]></param>
</method>
<method name='_updateFlags' fullname='sandy.core.scenegraph:Node/private:_updateFlags' isStatic='false' isFinal='false' isOverride='false'  param_names='pEvt' param_types='flash.events:Event' param_defaults='null' result_type='void'>
</method>
<method name='addChild' fullname='sandy.core.scenegraph:Node/addChild' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oChild' param_types='sandy.core.scenegraph:Node' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   Adds a new child to this node.
      <p>A node can have several children, and when you add a child to a node,
   it is automatically connected to the parent node through its parent property.</p>
      ]]></description>
<param><![CDATA[p_oChild The child node to add
   ]]></param>
</method>
<method name='addEventListener' fullname='sandy.core.scenegraph:Node/addEventListener' isStatic='false' isFinal='false' isOverride='false'  param_names='p_sEvt;p_oL' param_types='String' param_defaults='undefined;undefined' result_type='Boolean'>
<description><![CDATA[
   Adds a listener for the specified event.
      ]]></description>
<param><![CDATA[p_sEvt Name of the Event.
   ]]></param>
<param><![CDATA[p_oL Listener object.
   ]]></param>
</method>
<method name='cull' fullname='sandy.core.scenegraph:Node/cull' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oFrustum;p_oViewMatrix;p_bChanged' param_types='sandy.view:Frustum;sandy.core.data:Matrix4;Boolean' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
   Tests this node against the frustum volume to get its visibility.
      <p>If the node and its children aren't in the frustum, the node is set to cull
   and will not be displayed.<br/>
   <p>The method also updates the bounding volumes, to make a more accurate culling system possible.<br/>
   First the bounding sphere is updated, and if intersecting, the bounding box is updated to perform a more
   precise culling.</p>
   <p><b>[MANDATORY] The update method must be called first!</b></p>
      ]]></description>
<param><![CDATA[p_oScene The current scene which is rendered
   ]]></param>
<param><![CDATA[p_oFrustum The frustum of the current camera.
   ]]></param>
<param><![CDATA[p_oViewMatrix The matrix which maps object local coordinates into camera coordinates.
   ]]></param>
<param><![CDATA[p_bChanged Flag which specifies if parent transformation have changed to enable the matrix cache system when set to false.
      ]]></param>
</method>
<method name='destroy' fullname='sandy.core.scenegraph:Node/destroy' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
   Delete this node and all its child nodes.
      <p>This node nad all its child nodes are deleted, including all data they are storing.<br/>
   The method makes recursive calls to the destroy method of the child nodes.
   ]]></description>
</method>
<method name='getChildByName' fullname='sandy.core.scenegraph:Node/getChildByName' isStatic='false' isFinal='false' isOverride='false'  param_names='p_sName;p_bRecurs' param_types='String;Boolean' param_defaults='undefined;false' result_type='sandy.core.scenegraph:Node'>
<description><![CDATA[
   Returns the child node with the specified name.
      ]]></description>
<param><![CDATA[p_sName The name of the child you want to retrieve
   ]]></param>
<param><![CDATA[p_bRecurs  Set to true if you want to search the the children for the requested node
      ]]></param>
<return><![CDATA[ The requested node or null if no child with this name was found
   ]]></return>
</method>
<method name='hasParent' fullname='sandy.core.scenegraph:Node/hasParent' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
   Tests if this node has a parent.
      ]]></description>
<return><![CDATA[ true if this node has a parent, false otherwise.
   ]]></return>
</method>
<method name='isParent' fullname='sandy.core.scenegraph:Node/isParent' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oNode' param_types='sandy.core.scenegraph:Node' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
   Tests if the node passed in the argument is parent of this node.
      ]]></description>
<param><![CDATA[p_oNode  The node you are testing
   ]]></param>
<return><![CDATA[ true if the node in the argument is the parent of this node, false otherwise.
   ]]></return>
</method>
<method name='perform' fullname='sandy.core.scenegraph:Node/perform' isStatic='false' isFinal='false' isOverride='false'  param_names='p_iOperation' param_types='sandy.core.scenegraph:INodeOperation' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   Performs an operation on this node and all of its children.
   
   <p>Traverses the subtree made up of this node and all of its children.
   While traversing the subtree, individual operations are performed 
   on entry and exit of each node of the subtree.</p>
   <p>Implements the visitor design pattern: 
   Using the visitor design pattern, you can define a new operation on Node
   and its subclasses without having to change the classes and without having
   to take care of traversing the node tree.</p>
   
   ]]></description>
<example><![CDATA[   <listing version="3.1">
       var mySpecialOperation:SpecialOperation = new SpecialOperation;
   
       mySpecialOperation.someParameter = 0.8;
       someTreeNode.perform(mySpecialOperation);
       trace(mySpecialOperation.someResult);
   
       mySpecialOperation.someParameter = 0.2;
       someOtherTreeNode.perform(mySpecialOperation);
       trace(mySpecialOperation.someResult);
   </listing>
   
   ]]></example>
<param><![CDATA[ p_iOperation   The operation to be performed on the node subtree
   ]]></param>
</method>
<method name='remove' fullname='sandy.core.scenegraph:Node/remove' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
   Removes this node from the node tree, saving its child nodes.
      <p>NOTE that remove method only remove the current node and NOT its children!<br />
   To remove the current node and all its children please refer to the destroy method.</p>
   <p>The child nodes of this node becomes child nodes of this node's parent.</p>
   ]]></description>
</method>
<method name='removeChildByName' fullname='sandy.core.scenegraph:Node/removeChildByName' isStatic='false' isFinal='false' isOverride='false'  param_names='p_sName' param_types='String' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
   Removes the child node with the specified name.
      <p>All children of the node you want to remove are lost.<br/>
   The link between them and the rest of the tree is broken, and they will not be rendered anymore!</p>
   <p>The object itself and its children are still in memory!<br/>
   If you want to free them completely, call child.destroy()</p>
      ]]></description>
<param><![CDATA[p_sName The name of the node you want to remove.
   ]]></param>
<return><![CDATA[  true if the node was removed from node tree, false otherwise.
   ]]></return>
</method>
<method name='removeEventListener' fullname='sandy.core.scenegraph:Node/removeEventListener' isStatic='false' isFinal='false' isOverride='false'  param_names='p_sEvt;p_oL' param_types='String' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
   Removes a listener for the specified event.
      ]]></description>
<param><![CDATA[p_sEvt Name of the Event.
   ]]></param>
<param><![CDATA[oL Listener object.
   ]]></param>
</method>
<method name='swapParent' fullname='sandy.core.scenegraph:Node/swapParent' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oNewParent' param_types='sandy.core.scenegraph:Node' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   Moves this node to another parent node.
      <p>This node is removed from its current parent node, and added as a child of the specified node</p>
      ]]></description>
<param><![CDATA[p_oNewParent The node to become parent of this node
   ]]></param>
</method>
<method name='toString' fullname='sandy.core.scenegraph:Node/toString' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[
   Returns a string representation of this object
      ]]></description>
<return><![CDATA[The fully qualified name of this class
   ]]></return>
</method>
<method name='update' fullname='sandy.core.scenegraph:Node/update' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oModelMatrix;p_bChanged' param_types='sandy.core.data:Matrix4;Boolean' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
   Updates this node.
      <p>For a node with transformation, this method update the transformation taking into account the matrix cache system.</p>
      ]]></description>
<param><![CDATA[p_oScene The current scene
   ]]></param>
<param><![CDATA[p_oModelMatrix
   ]]></param>
<param><![CDATA[p_bChanged
   ]]></param>
</method>
<method name='updateBoundingVolumes' fullname='sandy.core.scenegraph:Node/updateBoundingVolumes' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
   Updates the bounding volumes of this object.
   NO IMPLEMENTATION RIGHT NOW.
   MIGHT BE USED IN THE FUTURE
   ]]></description>
</method>
<method name='broadcaster' fullname='sandy.core.scenegraph:Node/broadcaster/get' isStatic='false' isFinal='false' isOverride='false'  result_type='sandy.events:BubbleEventBroadcaster'>
<description><![CDATA[
   The broadcaster
      <p>The broadcaster is used to send events to listeners.<br />
   This property is a BubbleEventBroadcaster.</p>
      ]]></description>
<return><![CDATA[The instance of the current node broadcaster.
   ]]></return>
</method>
<method name='changed' fullname='sandy.core.scenegraph:Node/changed/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
   This property set the cache status of the current node.
   IMPORTANT Currently this property IS IN USE FOR CACHE SYSTEM
   ]]></description>
</method>
<method name='parent' fullname='sandy.core.scenegraph:Node/parent/get' isStatic='false' isFinal='false' isOverride='false'  result_type='sandy.core.scenegraph:Node'>
<description><![CDATA[
   The parent node of this node.
      <p>The reference is null if this nod has no parent (for exemple for a root node).</p>
   ]]></description>
</method>
<method name='scene' fullname='sandy.core.scenegraph:Node/scene/get' isStatic='false' isFinal='false' isOverride='false'  result_type='sandy.core:Scene3D'>
</method>
<method name='visible' fullname='sandy.core.scenegraph:Node/visible/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
</method>
<method name='appearance' fullname='sandy.core.scenegraph:Node/appearance/set' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oApp' param_types='sandy.materials:Appearance' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   Set that appearance to all the children of that node
   ]]></description>
</method>
<method name='changed' fullname='sandy.core.scenegraph:Node/changed/set' isStatic='false' isFinal='false' isOverride='false'  param_names='pVal' param_types='Boolean' param_defaults='undefined' result_type='void'>
</method>
<method name='enableBackFaceCulling' fullname='sandy.core.scenegraph:Node/enableBackFaceCulling/set' isStatic='false' isFinal='false' isOverride='false'  param_names='b' param_types='Boolean' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   Change the backface culling state to all the shapes objects in the children list
   ]]></description>
</method>
<method name='enableClipping' fullname='sandy.core.scenegraph:Node/enableClipping/set' isStatic='false' isFinal='false' isOverride='false'  param_names='p_bUseClipping' param_types='Boolean' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   Apply clipping to all the children of that node
   ]]></description>
<param><![CDATA[p_bUseClipping if true, the clipping will be used on that object and all its children if any
   ]]></param>
</method>
<method name='enableEvents' fullname='sandy.core.scenegraph:Node/enableEvents/set' isStatic='false' isFinal='false' isOverride='false'  param_names='b' param_types='Boolean' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   Enable event handling to all the children objects that can broadcast bubbling events
   ]]></description>
</method>
<method name='enableInteractivity' fullname='sandy.core.scenegraph:Node/enableInteractivity/set' isStatic='false' isFinal='false' isOverride='false'  param_names='p_bState' param_types='Boolean' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   Change the interactivity of all the children
   ]]></description>
</method>
<method name='parent' fullname='sandy.core.scenegraph:Node/parent/set' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oNode' param_types='sandy.core.scenegraph:Node' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='scene' fullname='sandy.core.scenegraph:Node/scene/set' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oScene' param_types='sandy.core:Scene3D' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   Reference to the scene is it linked to.
   Initialized at null.
   ]]></description>
</method>
<method name='useSingleContainer' fullname='sandy.core.scenegraph:Node/useSingleContainer/set' isStatic='false' isFinal='false' isOverride='false'  param_names='p_bUseSingleContainer' param_types='Boolean' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   Make all the Shape3D and descendants children react to this value.
   ]]></description>
<param><![CDATA[p_bUseSingleContainer if true, the whole objects will use a container to display the geometry into, otherwise, a specific container will be given to each polygon 
   ]]></param>
</method>
<method name='visible' fullname='sandy.core.scenegraph:Node/visible/set' isStatic='false' isFinal='false' isOverride='false'  param_names='p_bVisibility' param_types='Boolean' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   Specify the visibility of this node.
   If true, the node is visible, if fase, it will not be displayed.
   ]]></description>
</method>
<field name='_ID_' fullname='sandy.core.scenegraph:Node/private:_ID_' type='uint' isStatic='true' isConst='false' defaultValue='0' >
</field>
<field name='_parent' fullname='sandy.core.scenegraph:Node/private:_parent' type='sandy.core.scenegraph:Node' isStatic='false' isConst='false' >
</field>
<field name='boundingBox' fullname='sandy.core.scenegraph:Node/boundingBox' type='sandy.bounds:BBox' isStatic='false' isConst='false' defaultValue='' >
<description><![CDATA[
   The bounding box of this node
   IMPORTANT: Do not modify it unless you perfectly know what you are doing
   ]]></description>
</field>
<field name='boundingSphere' fullname='sandy.core.scenegraph:Node/boundingSphere' type='sandy.bounds:BSphere' isStatic='false' isConst='false' defaultValue='' >
<description><![CDATA[
   The bounding sphere of this node
   IMPORTANT: Do not modify it unless you perfectly know what you are doing
   ]]></description>
</field>
<field name='children' fullname='sandy.core.scenegraph:Node/children' type='Array' isStatic='false' isConst='false' defaultValue='' >
<description><![CDATA[
   The children of this node are stored inside this array.
   IMPORTANT: Use this property mainly as READ ONLY. To add, delete or search a specific child, you can use the specific method to do that
   ]]></description>
</field>
<field name='culled' fullname='sandy.core.scenegraph:Node/culled' type='sandy.view:CullingState' isStatic='false' isConst='false' defaultValue='unknown' >
<description><![CDATA[
   This property represent the culling state of the current node.
   This state is defined during the culling phasis as it refers to the position of the object against the viewing frustum.
   ]]></description>
</field>
<field name='id' fullname='sandy.core.scenegraph:Node/id' type='uint' isStatic='false' isConst='true' defaultValue='unknown' >
<description><![CDATA[
   The unique id of this node in the node graph.
   <p>This value is very useful to retrieve a specific node.</p>
   ]]></description>
</field>
<field name='m_bChanged' fullname='sandy.core.scenegraph:Node/protected:m_bChanged' type='Boolean' isStatic='false' isConst='false' >
</field>
<field name='m_bVisible' fullname='sandy.core.scenegraph:Node/protected:m_bVisible' type='Boolean' isStatic='false' isConst='false' defaultValue='true' >
</field>
<field name='m_oEB' fullname='sandy.core.scenegraph:Node/protected:m_oEB' type='sandy.events:BubbleEventBroadcaster' isStatic='false' isConst='false' >
</field>
<field name='m_oScene' fullname='sandy.core.scenegraph:Node/protected:m_oScene' type='sandy.core:Scene3D' isStatic='false' isConst='false' defaultValue='null' >
</field>
<field name='modelMatrix' fullname='sandy.core.scenegraph:Node/modelMatrix' type='sandy.core.data:Matrix4' isStatic='false' isConst='false' defaultValue='' >
<description><![CDATA[
    Cached matrix corresponding to the transformation to the 0,0,0 frame system
   ]]></description>
</field>
<field name='name' fullname='sandy.core.scenegraph:Node/name' type='String' isStatic='false' isConst='false' >
<description><![CDATA[
   Name of this node.
   If no name is specified, the unique ID of the node will be used
   ]]></description>
</field>
<field name='viewMatrix' fullname='sandy.core.scenegraph:Node/viewMatrix' type='sandy.core.data:Matrix4' isStatic='false' isConst='false' defaultValue='' >
<description><![CDATA[
   Cached matrix corresponding to the transformation to the camera frame system
   ]]></description>
</field>
<interfaceRec name='Renderable' fullname='sandy.core.scenegraph:Renderable' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\core\scenegraph\Renderable.as' namespace='sandy.core.scenegraph' access='public' baseClasses='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
  Interface which specifies the element can be rendererd by a Sandy3D Camera3D object.
  ]]></description>
<author><![CDATA[thomas
  ]]></author>
</interfaceRec>
<method name='render' fullname='sandy.core.scenegraph:Renderable/sandy.core.scenegraph:Renderable:render' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oCamera' param_types='sandy.core.scenegraph:Camera3D' param_defaults='undefined' result_type='void'>
</method>
<classRec name='ATransformable' fullname='sandy.core.scenegraph:ATransformable' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\core\scenegraph\ATransformable.as' namespace='sandy.core.scenegraph' access='public' baseclass='sandy.core.scenegraph:Node' isFinal='false' isDynamic='false' >
<description><![CDATA[
  ABSTRACT CLASS - super class for all movable objects in the object tree.
    <p> This class should not be directly instatiated, but sub classed.<br/>
  The Atransformable class is resposible for scaling, rotation and translation of objects in 3D space.</p>
    <p>Rotations and translations are performed in one of three coordinate systems or reference frames:<br/>
  - The local frame which is the objects own coordinate system<br />
  - The parent frame which is the coordinate system of the object's parent, normally a TransformGroup<br/>
  - The world frame which is the coordinate system of the world, the global system.</p>
  <p>Positions, directions, translations and rotations of an ATransformable object are performed in its parent frame.<br />
  Tilt, pan and roll, are rotations around the local axes, and moveForward, moveUpwards and moveSideways are translations along local axes.</p>
      ]]></description>
<author><![CDATA[ Thomas Pfeiffer - kiroukou
  ]]></author>
<version><![CDATA[ 3.1
  ]]></version>
<date><![CDATA[  16.03.2007
  ]]></date>
</classRec>
<method name='ATransformable' fullname='sandy.core.scenegraph:ATransformable/ATransformable' isStatic='false' isFinal='false' isOverride='false'  param_names='p_sName' param_types='String' param_defaults='' result_type='*'>
<description><![CDATA[
   Creates a transformable node in the object tree of the world.
      <p>This constructor should normally not be called directly, but from a sub class.</p>
      ]]></description>
<param><![CDATA[p_sName A string identifier for this object
   ]]></param>
</method>
<method name='getLookAt' fullname='sandy.core.scenegraph:ATransformable/getLookAt' isStatic='false' isFinal='false' isOverride='false'  result_type='sandy.core.data:Point3D'>
<description><![CDATA[
   getLookAt - obtain last value set via lookAt() method; may not be valid if other camera movement has occurred since then.
   ]]></description>
</method>
<method name='getPosition' fullname='sandy.core.scenegraph:ATransformable/getPosition' isStatic='false' isFinal='false' isOverride='false'  param_names='p_sMode' param_types='String' param_defaults='local' result_type='sandy.core.data:Point3D'>
<description><![CDATA[
   Returns the position of this group or object.
      <p>Choose which coordinate system the returned position refers to, by passing a mode string:<br/>
   The position is returned as a Point3D in one of the following:<br/>
   If "local", the position is coordinates of the parent frame.
   If "absolute" the position is in world coordinates
   If "camera" the position is relative to the camera's coordinate system.
   Default value is "local"
      ]]></description>
<return><![CDATA[ The position of the group or object
   ]]></return>
</method>
<method name='initFrame' fullname='sandy.core.scenegraph:ATransformable/initFrame' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
   Initiates the local coordinate system for this object.
      <p>The local coordinate system for this object is set parallell the parent system.</p>
   ]]></description>
</method>
<method name='lookAt' fullname='sandy.core.scenegraph:ATransformable/lookAt' isStatic='false' isFinal='false' isOverride='false'  param_names='p_nX;p_nY;p_nZ' param_types='Number;Number;Number' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
   Makes this object "look at" the specified position in the parent frame.
      <p>Useful for following a moving object or a static object while this object is moving.<br/>
   Normally used when this object is a camera</p>
      ]]></description>
<param><![CDATA[p_nX Number The x position to look at
   ]]></param>
<param><![CDATA[p_nY Number The y position to look at
   ]]></param>
<param><![CDATA[p_nZ Number The z position to look at
   ]]></param>
</method>
<method name='lookAtPoint' fullname='sandy.core.scenegraph:ATransformable/lookAtPoint' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oTarget' param_types='sandy.core.data:Point3D' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   The position in the parent frame this object should "look at".
      <p>Useful for following a moving object or a static object while this object is moving.<br/>
   Normally used when this object is a camera</p>
   ]]></description>
</method>
<method name='moveForward' fullname='sandy.core.scenegraph:ATransformable/moveForward' isStatic='false' isFinal='false' isOverride='false'  param_names='p_nD' param_types='Number' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   Translates this object along its forward Point3D ( local z ) in the parent frame.
      <p>If you imagine yourself in the world, it would be a step forward<br/>
   in the direction you look, not always horizontally!</p>
      ]]></description>
<param><![CDATA[p_nD How far to move
   ]]></param>
</method>
<method name='moveHorizontally' fullname='sandy.core.scenegraph:ATransformable/moveHorizontally' isStatic='false' isFinal='false' isOverride='false'  param_names='p_nD' param_types='Number' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   Translates this object parallel to its parent zx plane and in its forward direction.
      <p>If you imagine yourself in the world, it would be a step in the forward direction,
   but without changing your altitude ( constant global z ).</p>
      ]]></description>
<param><![CDATA[p_nD How far to move
   ]]></param>
</method>
<method name='moveLateraly' fullname='sandy.core.scenegraph:ATransformable/moveLateraly' isStatic='false' isFinal='false' isOverride='false'  param_names='p_nD' param_types='Number' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   Translates this object laterally in its parent frame.
      <p>This is a translation in the parent's x direction.</p>
      ]]></description>
<param><![CDATA[p_nD How far to move
   ]]></param>
</method>
<method name='moveSideways' fullname='sandy.core.scenegraph:ATransformable/moveSideways' isStatic='false' isFinal='false' isOverride='false'  param_names='p_nD' param_types='Number' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   Translates this object along its side Point3D ( local x ) in the parent frame.
      <p>If you imagine yourself in the world, it would be a step to your right or to your left</p>
      ]]></description>
<param><![CDATA[p_nD How far to move
   ]]></param>
</method>
<method name='moveUpwards' fullname='sandy.core.scenegraph:ATransformable/moveUpwards' isStatic='false' isFinal='false' isOverride='false'  param_names='p_nD' param_types='Number' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   Translates this object along its up Point3D ( local y ) in the parent frame.
      <p>If you imagine yourself in the world, it would be a step up or down<br/>
   in the direction of your body, not always vertically!</p>
      ]]></description>
<param><![CDATA[p_nD How far to move
   ]]></param>
</method>
<method name='moveVertically' fullname='sandy.core.scenegraph:ATransformable/moveVertically' isStatic='false' isFinal='false' isOverride='false'  param_names='p_nD' param_types='Number' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   Translates this object vertically in ots parent frame.
      <p>If you imagine yourself in the world, it would be a strictly vertical step,
   ( in the global y direction )</p>
      ]]></description>
<param><![CDATA[p_nD How far to move
   ]]></param>
</method>
<method name='resetCoords' fullname='sandy.core.scenegraph:ATransformable/resetCoords' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
   Resets the coordinate system for this object. Useful for returning to known state.
   ]]></description>
</method>
<method name='rotateAxis' fullname='sandy.core.scenegraph:ATransformable/rotateAxis' isStatic='false' isFinal='false' isOverride='false'  param_names='p_nX;p_nY;p_nZ;p_nAngle' param_types='Number;Number;Number;Number' param_defaults='undefined;undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
   Rotate this object around the specified axis in the parent frame by the specified angle.
      <p>NOTE : The axis will be normalized automatically.</p>
      ]]></description>
<param><![CDATA[p_nX  The x coordinate of the axis
   ]]></param>
<param><![CDATA[p_nY  The y coordinate of the axis
   ]]></param>
<param><![CDATA[p_nZ  The z coordinate of the axis
   ]]></param>
<param><![CDATA[p_nAngle The angle of rotation in degrees.
   ]]></param>
</method>
<method name='setPosition' fullname='sandy.core.scenegraph:ATransformable/setPosition' isStatic='false' isFinal='false' isOverride='false'  param_names='p_nX;p_nY;p_nZ' param_types='Number;Number;Number' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
   Sets the position of this object in coordinates of its parent frame.
      ]]></description>
<param><![CDATA[p_nX  The x coordinate
   ]]></param>
<param><![CDATA[p_nY  The y coordiante
   ]]></param>
<param><![CDATA[p_nZ  The z coordiante
   ]]></param>
</method>
<method name='toString' fullname='sandy.core.scenegraph:ATransformable/toString' isStatic='false' isFinal='false' isOverride='true'  result_type='String'>
<description><![CDATA[
   Returns a string representation of this object
      ]]></description>
<return><![CDATA[The fully qualified name of this class
   ]]></return>
</method>
<method name='translate' fullname='sandy.core.scenegraph:ATransformable/translate' isStatic='false' isFinal='false' isOverride='false'  param_names='p_nX;p_nY;p_nZ' param_types='Number;Number;Number' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
   Translate this object from it's current position with the specified offsets.
      ]]></description>
<param><![CDATA[p_nX  Offset that will be added to the x coordinate of the object
   ]]></param>
<param><![CDATA[p_nY  Offset that will be added to the y coordinate of the object
   ]]></param>
<param><![CDATA[p_nZ  Offset that will be added to the z coordinate of the object
   ]]></param>
</method>
<method name='update' fullname='sandy.core.scenegraph:ATransformable/update' isStatic='false' isFinal='false' isOverride='true'  param_names='p_oModelMatrix;p_bChanged' param_types='sandy.core.data:Matrix4;Boolean' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
   Updates this node or object.
      <p>For node's with transformation, this method updates the transformation taking into account the matrix cache system.<br/>
   <b>FIXME<b>: Transformable nodes shall upate their transform if necessary before calling this method.</p>
      ]]></description>
<param><![CDATA[p_oScene The current scene
   ]]></param>
<param><![CDATA[p_oModelMatrix The matrix which represents the parent model matrix. Basically it stores the rotation/translation/scale of all the nodes above the current one.
   ]]></param>
<param><![CDATA[p_bChanged A boolean value which specify if the state has changed since the previous rendering. If false, we save some matrix multiplication process.
   ]]></param>
</method>
<method name='updateTransform' fullname='sandy.core.scenegraph:ATransformable/updateTransform' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
   Updates the transform matrix of the current object/node before it is rendered.
   ]]></description>
</method>
<method name='matrix' fullname='sandy.core.scenegraph:ATransformable/matrix/get' isStatic='false' isFinal='false' isOverride='false'  result_type='sandy.core.data:Matrix4'>
</method>
<method name='out' fullname='sandy.core.scenegraph:ATransformable/out/get' isStatic='false' isFinal='false' isOverride='false'  result_type='sandy.core.data:Point3D'>
<description><![CDATA[
   Forward direction ( local z ) in parent coordinates.
   ]]></description>
</method>
<method name='pan' fullname='sandy.core.scenegraph:ATransformable/pan/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='roll' fullname='sandy.core.scenegraph:ATransformable/roll/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='rotateX' fullname='sandy.core.scenegraph:ATransformable/rotateX/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='rotateY' fullname='sandy.core.scenegraph:ATransformable/rotateY/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='rotateZ' fullname='sandy.core.scenegraph:ATransformable/rotateZ/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='scaleX' fullname='sandy.core.scenegraph:ATransformable/scaleX/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
<description><![CDATA[
   x scale of this object.
      <p>A value of 1 scales to the original x scale, a value of 2 doubles the x scale.<br/>
   NOTE : This value does not affect the camera object.</p>
   ]]></description>
</method>
<method name='scaleY' fullname='sandy.core.scenegraph:ATransformable/scaleY/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
<description><![CDATA[
   y scale of this object.
      <p>A value of 1 scales to the original y scale, a value of 2 doubles the y scale.<br/>
   NOTE : This value does not affect the camera object.</p>
   ]]></description>
</method>
<method name='scaleZ' fullname='sandy.core.scenegraph:ATransformable/scaleZ/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
<description><![CDATA[
   z scale of this object.
      <p>A value of 1 scales to the original z scale, a value of 2 doubles the z scale.<br/>
   NOTE : This value does not affect the camera object.</p>
   ]]></description>
</method>
<method name='side' fullname='sandy.core.scenegraph:ATransformable/side/get' isStatic='false' isFinal='false' isOverride='false'  result_type='sandy.core.data:Point3D'>
<description><![CDATA[
   Side direction ( local x ) in parent coordinates.
   ]]></description>
</method>
<method name='tilt' fullname='sandy.core.scenegraph:ATransformable/tilt/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
<description><![CDATA[
   Getter for the tilt value
   ]]></description>
</method>
<method name='up' fullname='sandy.core.scenegraph:ATransformable/up/get' isStatic='false' isFinal='false' isOverride='false'  result_type='sandy.core.data:Point3D'>
<description><![CDATA[
   Up direction ( local y ) in parent coordinates.
   ]]></description>
</method>
<method name='x' fullname='sandy.core.scenegraph:ATransformable/x/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
<description><![CDATA[
   x position of this object in its parent frame.
   ]]></description>
</method>
<method name='y' fullname='sandy.core.scenegraph:ATransformable/y/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
<description><![CDATA[
   y position of this object in its parent frame.
   ]]></description>
</method>
<method name='z' fullname='sandy.core.scenegraph:ATransformable/z/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
<description><![CDATA[
   z position of the node in its parent frame.
   ]]></description>
</method>
<method name='matrix' fullname='sandy.core.scenegraph:ATransformable/matrix/set' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oMatrix' param_types='sandy.core.data:Matrix4' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   This property allows you to directly set the matrix you want to a transformable object.
   But be careful with its use. It modifies the rotation AND the position.
   WARNING : Please remove any scale from this matrix. This is not managed yet.
   WARNING : Please think about call initFrame before changing this frame. Without calling this method first, the frame will stay local, and the transformation will be applied
   locally.
   ]]></description>
<param><![CDATA[p_oMatrix The new local matrix for this node
   ]]></param>
</method>
<method name='pan' fullname='sandy.core.scenegraph:ATransformable/pan/set' isStatic='false' isFinal='false' isOverride='false'  param_names='p_nAngle' param_types='Number' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   Pans this object around the local y axis.
      <p>The pan angle interval is 0 to 360 degrees<br/>
   Directions within the parent frame are: North = 0, East = 90, South = 180 nad West = 270 degrees.</p>
      ]]></description>
<param><![CDATA[p_nAngle  The pan angle in degrees.
   ]]></param>
</method>
<method name='roll' fullname='sandy.core.scenegraph:ATransformable/roll/set' isStatic='false' isFinal='false' isOverride='false'  param_names='p_nAngle' param_types='Number' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   Rolls this object around the local z axis.
      <p>The roll angle interval is -180 to +180 degrees<br/>
   At 0 degrees the local x axis is aligned with the horizon of its parent<br/>
   Full roll right = 180 and full roll left = -180 degrees ( upside down ).</p>
      ]]></description>
<param><![CDATA[p_nAngle  The roll angle in degrees.
   ]]></param>
</method>
<method name='rotateX' fullname='sandy.core.scenegraph:ATransformable/rotateX/set' isStatic='false' isFinal='false' isOverride='false'  param_names='p_nAngle' param_types='Number' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   Rotates this object around an axis parallel to the parent's x axis.
      <p>The object rotates a specified angle ( degrees ) around an axis through the
   objects reference point, paralell to the x axis of the parent frame.</p>
   ]]></description>
</method>
<method name='rotateY' fullname='sandy.core.scenegraph:ATransformable/rotateY/set' isStatic='false' isFinal='false' isOverride='false'  param_names='p_nAngle' param_types='Number' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   Rotates this object around an axis parallel to the parent's y axis.
      <p>The object rotates a specified angle ( degrees ) around an axis through the
   objects reference point, parallel to the y axis of the parent frame.</p>
   ]]></description>
</method>
<method name='rotateZ' fullname='sandy.core.scenegraph:ATransformable/rotateZ/set' isStatic='false' isFinal='false' isOverride='false'  param_names='p_nAngle' param_types='Number' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   Rotates this object around an axis paralell to the parent's z axis.
      <p>The object rotates a specified angle ( degrees ) around an axis through the
   objects reference point, paralell to the z axis of the parent frame.</p>
   ]]></description>
</method>
<method name='scaleX' fullname='sandy.core.scenegraph:ATransformable/scaleX/set' isStatic='false' isFinal='false' isOverride='false'  param_names='p_nScaleX' param_types='Number' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='scaleY' fullname='sandy.core.scenegraph:ATransformable/scaleY/set' isStatic='false' isFinal='false' isOverride='false'  param_names='p_nScaleY' param_types='Number' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='scaleZ' fullname='sandy.core.scenegraph:ATransformable/scaleZ/set' isStatic='false' isFinal='false' isOverride='false'  param_names='p_nScaleZ' param_types='Number' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='tilt' fullname='sandy.core.scenegraph:ATransformable/tilt/set' isStatic='false' isFinal='false' isOverride='false'  param_names='p_nAngle' param_types='Number' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   Tilts this object around the local x axis.
      <p>The tilt angle interval is -90 to +90 degrees<br/>
   At 0 degrees the local z axis is paralell to the zx plane of its parent coordinate system.<br/>
   Straight up = +90 and stright down = -90 degrees.</p>
      ]]></description>
<param><![CDATA[p_nAngle  The tilt angle in degrees.
   ]]></param>
</method>
<method name='x' fullname='sandy.core.scenegraph:ATransformable/x/set' isStatic='false' isFinal='false' isOverride='false'  param_names='p_nX' param_types='Number' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='y' fullname='sandy.core.scenegraph:ATransformable/y/set' isStatic='false' isFinal='false' isOverride='false'  param_names='p_nY' param_types='Number' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='z' fullname='sandy.core.scenegraph:ATransformable/z/set' isStatic='false' isFinal='false' isOverride='false'  param_names='p_nZ' param_types='Number' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</method>
<field name='_nRoll' fullname='sandy.core.scenegraph:ATransformable/private:_nRoll' type='Number' isStatic='false' isConst='false' >
</field>
<field name='_nTilt' fullname='sandy.core.scenegraph:ATransformable/private:_nTilt' type='Number' isStatic='false' isConst='false' >
</field>
<field name='_nYaw' fullname='sandy.core.scenegraph:ATransformable/private:_nYaw' type='Number' isStatic='false' isConst='false' >
</field>
<field name='_oScale' fullname='sandy.core.scenegraph:ATransformable/protected:_oScale' type='sandy.core.data:Point3D' isStatic='false' isConst='false' >
</field>
<field name='_p' fullname='sandy.core.scenegraph:ATransformable/protected:_p' type='sandy.core.data:Point3D' isStatic='false' isConst='false' >
</field>
<field name='_vLookAt' fullname='sandy.core.scenegraph:ATransformable/private:_vLookAt' type='sandy.core.data:Point3D' isStatic='false' isConst='false' >
</field>
<field name='_vLookatDown' fullname='sandy.core.scenegraph:ATransformable/private:_vLookatDown' type='sandy.core.data:Point3D' isStatic='false' isConst='false' >
</field>
<field name='_vOut' fullname='sandy.core.scenegraph:ATransformable/protected:_vOut' type='sandy.core.data:Point3D' isStatic='false' isConst='false' >
</field>
<field name='_vRotation' fullname='sandy.core.scenegraph:ATransformable/private:_vRotation' type='sandy.core.data:Point3D' isStatic='false' isConst='false' >
</field>
<field name='_vSide' fullname='sandy.core.scenegraph:ATransformable/protected:_vSide' type='sandy.core.data:Point3D' isStatic='false' isConst='false' >
</field>
<field name='_vUp' fullname='sandy.core.scenegraph:ATransformable/protected:_vUp' type='sandy.core.data:Point3D' isStatic='false' isConst='false' >
</field>
<field name='disable' fullname='sandy.core.scenegraph:ATransformable/disable' type='Boolean' isStatic='false' isConst='false' defaultValue='false' >
<description><![CDATA[
   Disable the local transformations applied to this Node if set to false.
   They will be applied back once et back to true.
   ]]></description>
</field>
<field name='invModelMatrix' fullname='sandy.core.scenegraph:ATransformable/invModelMatrix' type='sandy.core.data:Matrix4' isStatic='false' isConst='false' defaultValue='' >
<description><![CDATA[
   <p>Inverse of the model matrix
   The matrix is inverted in comparison of the real model matrix.<br/>
   For example, this allows replacement of the objects in the correct camera frame before projection</p>
   ]]></description>
</field>
<field name='m_oMatrix' fullname='sandy.core.scenegraph:ATransformable/private:m_oMatrix' type='sandy.core.data:Matrix4' isStatic='false' isConst='false' >
</field>
<field name='m_oPreviousOffsetRotation' fullname='sandy.core.scenegraph:ATransformable/protected:m_oPreviousOffsetRotation' type='sandy.core.data:Point3D' isStatic='false' isConst='false' defaultValue='' >
</field>
<field name='m_tmpMt' fullname='sandy.core.scenegraph:ATransformable/protected:m_tmpMt' type='sandy.core.data:Matrix4' isStatic='false' isConst='false' >
</field>
<classRec name='TransformGroup' fullname='sandy.core.scenegraph:TransformGroup' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\core\scenegraph\TransformGroup.as' namespace='sandy.core.scenegraph' access='public' baseclass='sandy.core.scenegraph:ATransformable' isFinal='false' isDynamic='false' >
<description><![CDATA[
  The TransformGroup class is used to create transform group.
    <p>It represents a node in the object tree of the world.<br/>
  Transformations performed on this group are applied to all its children.</p>
  <p>The class is final, i.e. it can not be subclassed.
    ]]></description>
<author><![CDATA[ Thomas Pfeiffer - kiroukou
  ]]></author>
<version><![CDATA[ 3.1
  ]]></version>
<date><![CDATA[  26.07.2007
  ]]></date>
</classRec>
<method name='TransformGroup' fullname='sandy.core.scenegraph:TransformGroup/TransformGroup' isStatic='false' isFinal='false' isOverride='false'  param_names='p_sName' param_types='String' param_defaults='' result_type='*'>
<description><![CDATA[
   Creates a transform group.
      ]]></description>
<param><![CDATA[ p_sName A string identifier for this object
   ]]></param>
</method>
<method name='clone' fullname='sandy.core.scenegraph:TransformGroup/clone' isStatic='false' isFinal='false' isOverride='false'  param_names='p_sName' param_types='String' param_defaults='undefined' result_type='sandy.core.scenegraph:TransformGroup'>
</method>
<method name='cull' fullname='sandy.core.scenegraph:TransformGroup/cull' isStatic='false' isFinal='false' isOverride='true'  param_names='p_oFrustum;p_oViewMatrix;p_bChanged' param_types='sandy.view:Frustum;sandy.core.data:Matrix4;Boolean' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
   Tests this node against the camera frustum to get its visibility.
      <p>If this node and its children are not within the frustum,
   the node is set to cull and it would not be displayed.<p/>
   <p>The method also updates the bounding volumes to make the more accurate culling system possible.<br/>
   First the bounding sphere is updated, and if intersecting,
   the bounding box is updated to perform the more precise culling.</p>
   <p><b>[MANDATORY] The update method must be called first!</b></p>
      ]]></description>
<param><![CDATA[p_oScene The current scene
   ]]></param>
<param><![CDATA[p_oFrustum The frustum of the current camera
   ]]></param>
<param><![CDATA[p_oViewMatrix The view martix of the curren camera
   ]]></param>
<param><![CDATA[p_bChanged
   ]]></param>
</method>
<method name='toString' fullname='sandy.core.scenegraph:TransformGroup/toString' isStatic='false' isFinal='false' isOverride='true'  result_type='String'>
<description><![CDATA[
   Returns a string representation of the TransformGroup.
      ]]></description>
<return><![CDATA[The fully qualified name.
   ]]></return>
</method>
<classRec name='Group' fullname='sandy.core.scenegraph:Group' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\core\scenegraph\Group.as' namespace='sandy.core.scenegraph' access='public' baseclass='sandy.core.scenegraph:Node' isFinal='false' isDynamic='false' >
<description><![CDATA[
  The Group class is used for branch nodes in the Sandy object tree.
    <p>This class is fianl, and can not be sub classed</p>
  <p>This group binds together, but can not transform its children.<br/>
  To transform collections of objects, you should add them to a transform group.</p>
    ]]></description>
<author><![CDATA[ Thomas Pfeiffer - kiroukou
  ]]></author>
<see><![CDATA[sandy.core.scenegraph.TransformGroup
  ]]></see>
<version><![CDATA[ 3.1
  ]]></version>
<date><![CDATA[  28.03.2006
    ]]></date>
</classRec>
<method name='Group' fullname='sandy.core.scenegraph:Group/Group' isStatic='false' isFinal='false' isOverride='false'  param_names='p_sName' param_types='String' param_defaults='' result_type='*'>
<description><![CDATA[
   Creates a branch group.
      ]]></description>
<param><![CDATA[p_sName A string identifier for this object
   ]]></param>
</method>
<method name='clone' fullname='sandy.core.scenegraph:Group/clone' isStatic='false' isFinal='false' isOverride='false'  param_names='p_sName' param_types='String' param_defaults='undefined' result_type='sandy.core.scenegraph:Group'>
</method>
<method name='cull' fullname='sandy.core.scenegraph:Group/cull' isStatic='false' isFinal='false' isOverride='true'  param_names='p_oFrustum;p_oViewMatrix;p_bChanged' param_types='sandy.view:Frustum;sandy.core.data:Matrix4;Boolean' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
   Tests this node against the camera frustum to get its visibility.
      <p>If this node and its children are not within the frustum,
   the node is culled and will not be displayed.<p/>
   <p>This method also updates the bounding volumes to make the more accurate culling system possible.<br/>
   First the bounding sphere is updated, and if intersecting,
   the bounding box is updated to perform the more precise culling.</p>
   <p><b>[MANDATORY] The update method must be called first!</b></p>
      ]]></description>
<param><![CDATA[p_oScene The current scene
   ]]></param>
<param><![CDATA[p_oFrustum The frustum of the current camera
   ]]></param>
<param><![CDATA[p_oViewMatrix The view martix of the curren camera
   ]]></param>
<param><![CDATA[p_bChanged
   ]]></param>
</method>
<method name='toString' fullname='sandy.core.scenegraph:Group/toString' isStatic='false' isFinal='false' isOverride='true'  result_type='String'>
</method>
<classRec name='Camera3D' fullname='sandy.core.scenegraph:Camera3D' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\core\scenegraph\Camera3D.as' namespace='sandy.core.scenegraph' access='public' baseclass='sandy.core.scenegraph:ATransformable' isFinal='false' isDynamic='false' >
<description><![CDATA[
  The Camera3D class is used to create a camera for the Sandy world.
    <p>As of this version of Sandy, the camera is added to the object tree,
  which means it is transformed in the same manner as any other object.</p>
  
  ]]></description>
<author><![CDATA[ Thomas Pfeiffer - kiroukou
  ]]></author>
<version><![CDATA[ 3.1
  ]]></version>
<date><![CDATA[  26.07.2007
  ]]></date>
</classRec>
<method name='Camera3D' fullname='sandy.core.scenegraph:Camera3D/Camera3D' isStatic='false' isFinal='false' isOverride='false'  param_names='p_nWidth;p_nHeight;p_nFov;p_nNear;p_nFar' param_types='Number;Number;Number;Number;Number' param_defaults='550;400;45;50;10000' result_type='*'>
<description><![CDATA[
   Creates a camera for projecting visible objects in the world.
      <p>By default the camera shows a perspective projection. <br />
   The camera is at -300 in z axis and look at the world 0,0,0 point.</p>
   
   ]]></description>
<param><![CDATA[p_nWidth Width of the camera viewport in pixels
   ]]></param>
<param><![CDATA[p_nHeight Height of the camera viewport in pixels
   ]]></param>
<param><![CDATA[p_nFov The vertical angle of view in degrees - Default 45
   ]]></param>
<param><![CDATA[p_nNear The distance from the camera to the near clipping plane - Default 50
   ]]></param>
<param><![CDATA[p_nFar The distance from the camera to the far clipping plane - Default 10000
   ]]></param>
</method>
<method name='cull' fullname='sandy.core.scenegraph:Camera3D/cull' isStatic='false' isFinal='false' isOverride='true'  param_names='p_oFrustum;p_oViewMatrix;p_bChanged' param_types='sandy.view:Frustum;sandy.core.data:Matrix4;Boolean' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
   Nothing to do - the camera can't be culled
   ]]></description>
</method>
<method name='destroy' fullname='sandy.core.scenegraph:Camera3D/destroy' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[
   Delete the camera node and clear its displaylist.
    
   ]]></description>
</method>
<method name='projectArray' fullname='sandy.core.scenegraph:Camera3D/projectArray' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oList' param_types='Array' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   <p>Project the vertices list given in parameter.
   The vertices are projected to the screen, as a 2D position.
   A cache system is used here to prevent multiple projection of the same vertex.
   In case you want to redo a projection, prefer projectVertex method which doesn't use a cache system.
   </p>
   ]]></description>
</method>
<method name='projectVertex' fullname='sandy.core.scenegraph:Camera3D/projectVertex' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oVertex' param_types='sandy.core.data:Vertex' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   <p>Project the vertex passed as parameter.
   The vertices are projected to the screen, as a 2D position.
   </p>
   ]]></description>
</method>
<method name='setPerspectiveProjection' fullname='sandy.core.scenegraph:Camera3D/protected:setPerspectiveProjection' isStatic='false' isFinal='false' isOverride='false'  param_names='p_nFovY;p_nAspectRatio;p_nZNear;p_nZFar' param_types='Number;Number;Number;Number' param_defaults='undefined;undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
  Sets a projection matrix with perspective. 
    <p>This projection allows a natural visual presentation of objects, mimicking 3D perspective.</p>
    ]]></description>
<param><![CDATA[p_nFovY  The angle of view in degrees - Default 45.
  ]]></param>
<param><![CDATA[p_nAspectRatio The ratio between vertical and horizontal dimension - Default the viewport ratio (width/height)
  ]]></param>
<param><![CDATA[p_nZNear  The distance betweeen the camera and the near plane - Default 10.
  ]]></param>
<param><![CDATA[p_nZFar  The distance betweeen the camera position and the far plane. Default 10 000.
  ]]></param>
</method>
<method name='toString' fullname='sandy.core.scenegraph:Camera3D/toString' isStatic='false' isFinal='false' isOverride='true'  result_type='String'>
</method>
<method name='update' fullname='sandy.core.scenegraph:Camera3D/update' isStatic='false' isFinal='false' isOverride='true'  param_names='p_oModelMatrix;p_bChanged' param_types='sandy.core.data:Matrix4;Boolean' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
   Updates the state of the camera transformation.
      ]]></description>
<param><![CDATA[p_oScene   The current scene
   ]]></param>
<param><![CDATA[p_oModelMatrix The matrix which represents the parent model matrix. Basically it stores the rotation/translation/scale of all the nodes above the current one.
   ]]></param>
<param><![CDATA[p_bChanged A boolean value which specify if the state has changed since the previous rendering. If false, we save some matrix multiplication process.
   ]]></param>
</method>
<method name='updatePerspective' fullname='sandy.core.scenegraph:Camera3D/protected:updatePerspective' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
   Updates the perspective projection.
   ]]></description>
</method>
<method name='far' fullname='sandy.core.scenegraph:Camera3D/far/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='focalLength' fullname='sandy.core.scenegraph:Camera3D/focalLength/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='fov' fullname='sandy.core.scenegraph:Camera3D/fov/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='invProjectionMatrix' fullname='sandy.core.scenegraph:Camera3D/invProjectionMatrix/get' isStatic='false' isFinal='false' isOverride='false'  result_type='sandy.core.data:Matrix4'>
<description><![CDATA[
   Returns the inverse of the projection matrix of this camera.
      ]]></description>
<return><![CDATA[ The inverted projection matrix
   ]]></return>
</method>
<method name='near' fullname='sandy.core.scenegraph:Camera3D/near/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='projectionMatrix' fullname='sandy.core.scenegraph:Camera3D/projectionMatrix/get' isStatic='false' isFinal='false' isOverride='false'  result_type='sandy.core.data:Matrix4'>
<description><![CDATA[
  Returns the projection matrix of this camera. 
  
  ]]></description>
<return><![CDATA[ The projection matrix
  ]]></return>
</method>
<method name='far' fullname='sandy.core.scenegraph:Camera3D/far/set' isStatic='false' isFinal='false' isOverride='false'  param_names='pFar' param_types='Number' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   Far plane distance for culling/clipping.
   ]]></description>
</method>
<method name='focalLength' fullname='sandy.core.scenegraph:Camera3D/focalLength/set' isStatic='false' isFinal='false' isOverride='false'  param_names='f' param_types='Number' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   Focal length of camera.
      <p>This value is a function of fov angle and viewport dimensions.
   Writing this value changes fov angle only.</p>
   ]]></description>
</method>
<method name='fov' fullname='sandy.core.scenegraph:Camera3D/fov/set' isStatic='false' isFinal='false' isOverride='false'  param_names='p_nFov' param_types='Number' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   The angle of view of this camera in degrees.
   ]]></description>
</method>
<method name='near' fullname='sandy.core.scenegraph:Camera3D/near/set' isStatic='false' isFinal='false' isOverride='false'  param_names='pNear' param_types='Number' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   Near plane distance for culling/clipping.
   ]]></description>
</method>
<field name='_mp' fullname='sandy.core.scenegraph:Camera3D/private:_mp' type='sandy.core.data:Matrix4' isStatic='false' isConst='false' defaultValue='' >
</field>
<field name='_mpInv' fullname='sandy.core.scenegraph:Camera3D/private:_mpInv' type='sandy.core.data:Matrix4' isStatic='false' isConst='false' defaultValue='' >
</field>
<field name='_nFar' fullname='sandy.core.scenegraph:Camera3D/private:_nFar' type='Number' isStatic='false' isConst='false' >
</field>
<field name='_nFov' fullname='sandy.core.scenegraph:Camera3D/private:_nFov' type='Number' isStatic='false' isConst='false' >
</field>
<field name='_nNear' fullname='sandy.core.scenegraph:Camera3D/private:_nNear' type='Number' isStatic='false' isConst='false' >
</field>
<field name='_perspectiveChanged' fullname='sandy.core.scenegraph:Camera3D/private:_perspectiveChanged' type='Boolean' isStatic='false' isConst='false' defaultValue='false' >
</field>
<field name='frustrum' fullname='sandy.core.scenegraph:Camera3D/frustrum' type='sandy.view:Frustum' isStatic='false' isConst='false' defaultValue='' >
<description><![CDATA[
   The frustum of the camera.
   ]]></description>
</field>
<field name='mp11' fullname='sandy.core.scenegraph:Camera3D/private:mp11' type='Number' isStatic='false' isConst='false' >
</field>
<field name='viewport' fullname='sandy.core.scenegraph:Camera3D/viewport' type='sandy.view:ViewPort' isStatic='false' isConst='false' defaultValue='' >
<description><![CDATA[
   The camera viewport
   ]]></description>
</field>
<classRec name='SpringCamera3D' fullname='sandy.core.scenegraph:SpringCamera3D' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\core\scenegraph\SpringCamera3D.as' namespace='sandy.core.scenegraph' access='public' baseclass='sandy.core.scenegraph:Camera3D' isFinal='false' isDynamic='false' >
<description><![CDATA[
    ]]></description>
<author><![CDATA[b at turbulent dot carbulent.ca - http://agit8.tu
     ]]></author>
<date><![CDATA[2009-01-21
     ]]></date>
</classRec>
<method name='SpringCamera3D' fullname='sandy.core.scenegraph:SpringCamera3D/SpringCamera3D' isStatic='false' isFinal='false' isOverride='false'  param_names='p_nWidth;p_nHeight;fov;near;far' param_types='Number;Number;Number;Number;Number' param_defaults='500;500;60;10;5000' result_type='*'>
<description><![CDATA[
   Constructor.
      ]]></description>
<param><![CDATA[  p_nWidth Width of the camera viewport in pixels.
   ]]></param>
<param><![CDATA[  p_nHeight Height of the camera viewport in pixels.
   ]]></param>
<param><![CDATA[  fov      This value is the vertical Field Of View (FOV) in degrees.
   ]]></param>
<param><![CDATA[  near     Distance to the near clipping plane.
   ]]></param>
<param><![CDATA[  far      Distance to the far clipping plane.
   ]]></param>
</method>
<method name='toString' fullname='sandy.core.scenegraph:SpringCamera3D/toString' isStatic='false' isFinal='false' isOverride='true'  result_type='String'>
</method>
<method name='updateTransform' fullname='sandy.core.scenegraph:SpringCamera3D/updateTransform' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
</method>
<method name='target' fullname='sandy.core.scenegraph:SpringCamera3D/target/get' isStatic='false' isFinal='false' isOverride='false'  result_type='sandy.core.scenegraph:Shape3D'>
</method>
<method name='zrot' fullname='sandy.core.scenegraph:SpringCamera3D/zrot/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
</method>
<method name='target' fullname='sandy.core.scenegraph:SpringCamera3D/target/set' isStatic='false' isFinal='false' isOverride='false'  param_names='object' param_types='sandy.core.scenegraph:Shape3D' param_defaults='undefined' result_type='void'>
</method>
<method name='zrot' fullname='sandy.core.scenegraph:SpringCamera3D/zrot/set' isStatic='false' isFinal='false' isOverride='false'  param_names='n' param_types='Number' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   Rotation in degrees along the camera Z vector to apply to the camera after it turns towards the target .
   ]]></description>
</method>
<field name='_acceleration' fullname='sandy.core.scenegraph:SpringCamera3D/private:_acceleration' type='sandy.core.data:Point3D' isStatic='false' isConst='false' defaultValue='' >
</field>
<field name='_camTarget' fullname='sandy.core.scenegraph:SpringCamera3D/_camTarget' type='sandy.core.scenegraph:Shape3D' isStatic='false' isConst='false' >
<description><![CDATA[
   [optional] Target object3d that camera should follow. If target is null, camera behaves just like a normal Camera3D.
   ]]></description>
</field>
<field name='_desiredPosition' fullname='sandy.core.scenegraph:SpringCamera3D/private:_desiredPosition' type='sandy.core.data:Point3D' isStatic='false' isConst='false' defaultValue='' >
</field>
<field name='_dv' fullname='sandy.core.scenegraph:SpringCamera3D/private:_dv' type='sandy.core.data:Point3D' isStatic='false' isConst='false' defaultValue='' >
</field>
<field name='_force' fullname='sandy.core.scenegraph:SpringCamera3D/private:_force' type='sandy.core.data:Point3D' isStatic='false' isConst='false' defaultValue='' >
</field>
<field name='_lookAtPosition' fullname='sandy.core.scenegraph:SpringCamera3D/private:_lookAtPosition' type='sandy.core.data:Point3D' isStatic='false' isConst='false' defaultValue='' >
</field>
<field name='_stretch' fullname='sandy.core.scenegraph:SpringCamera3D/private:_stretch' type='sandy.core.data:Point3D' isStatic='false' isConst='false' defaultValue='' >
</field>
<field name='_targetTransform' fullname='sandy.core.scenegraph:SpringCamera3D/private:_targetTransform' type='sandy.core.data:Matrix4' isStatic='false' isConst='false' defaultValue='' >
</field>
<field name='_velocity' fullname='sandy.core.scenegraph:SpringCamera3D/private:_velocity' type='sandy.core.data:Point3D' isStatic='false' isConst='false' defaultValue='' >
</field>
<field name='_xLookAtObject' fullname='sandy.core.scenegraph:SpringCamera3D/private:_xLookAtObject' type='sandy.core.scenegraph:Shape3D' isStatic='false' isConst='false' defaultValue='' >
</field>
<field name='_xLookOffset' fullname='sandy.core.scenegraph:SpringCamera3D/private:_xLookOffset' type='sandy.core.data:Point3D' isStatic='false' isConst='false' defaultValue='' >
</field>
<field name='_xPosition' fullname='sandy.core.scenegraph:SpringCamera3D/private:_xPosition' type='sandy.core.data:Point3D' isStatic='false' isConst='false' defaultValue='' >
</field>
<field name='_xPositionOffset' fullname='sandy.core.scenegraph:SpringCamera3D/private:_xPositionOffset' type='sandy.core.data:Point3D' isStatic='false' isConst='false' defaultValue='' >
</field>
<field name='_zrot' fullname='sandy.core.scenegraph:SpringCamera3D/private:_zrot' type='Number' isStatic='false' isConst='false' defaultValue='0' >
</field>
<field name='damping' fullname='sandy.core.scenegraph:SpringCamera3D/damping' type='Number' isStatic='false' isConst='false' defaultValue='4' >
<description><![CDATA[
   Damping is the spring internal friction, or how much it resists the "boinggggg" effect. Too high and you'll lose it!
   A number between 1 and 20 is recommended.
   ]]></description>
</field>
<field name='lookOffset' fullname='sandy.core.scenegraph:SpringCamera3D/lookOffset' type='sandy.core.data:Point3D' isStatic='false' isConst='false' defaultValue='' >
<description><![CDATA[
   offset of facing in target object space, ie: where in the target object space should the camera look.
   ]]></description>
</field>
<field name='mass' fullname='sandy.core.scenegraph:SpringCamera3D/mass' type='Number' isStatic='false' isConst='false' defaultValue='40' >
<description><![CDATA[
   Mass of the camera, if over 120 and it'll be very heavy to move.
   ]]></description>
</field>
<field name='positionOffset' fullname='sandy.core.scenegraph:SpringCamera3D/positionOffset' type='sandy.core.data:Point3D' isStatic='false' isConst='false' defaultValue='' >
<description><![CDATA[
   Offset of spring center from target in target object space, ie: Where the camera should ideally be in the target object space.
   ]]></description>
</field>
<field name='stiffness' fullname='sandy.core.scenegraph:SpringCamera3D/stiffness' type='Number' isStatic='false' isConst='false' defaultValue='1' >
<description><![CDATA[
   Stiffness of the spring, how hard is it to extend. The higher it is, the more "fixed" the cam will be.
   A number between 1 and 20 is recommended.
   ]]></description>
</field>
<classRec name='Sound3D' fullname='sandy.core.scenegraph:Sound3D' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\core\scenegraph\Sound3D.as' namespace='sandy.core.scenegraph' access='public' baseclass='sandy.core.scenegraph:ATransformable' isFinal='false' isDynamic='false' >
<description><![CDATA[
  Transform audio volume and pan relative to the Camera3D 
  
  ]]></description>
<author><![CDATA[ Daniel Reitterer - Delta 9
  ]]></author>
<version><![CDATA[ 3.1
  ]]></version>
<date><![CDATA[  14.12.2007
  ]]></date>
</classRec>
<method name='Sound3D' fullname='sandy.core.scenegraph:Sound3D/Sound3D' isStatic='false' isFinal='false' isOverride='false'  param_names='p_sName;p_oSoundSource;p_nVolume;p_nMaxPan;p_nRadius;p_bStereo' param_types='String;Number;Number;Number;Boolean' param_defaults=';null;1;0;1;false' result_type='*'>
<description><![CDATA[
   Creates a 3D sound object wich can be placed in the 3d scene. Set stereo to true if the sound source is in stereo.
   If stereo is true, both channels are at the same position in 3d space, but the stereo panorama is kept and mirrored if required.
   To create a true stereo effect, take two Sound3D instances and two mono sound sources on different locations in 3d space.
   
   ]]></description>
<param><![CDATA[ p_sName    A string identifier for this object
   ]]></param>
<param><![CDATA[p_oSoundSource  The sound source, a String, UrlRequest, Sound or a SoundChannel object
   ]]></param>
<param><![CDATA[p_nVolume   Volume of the sound
   ]]></param>
<param><![CDATA[p_nMaxPan   Max pan of the sound, if zero panning is disabled
   ]]></param>
<param><![CDATA[p_nRadius   Radius of the sound in 3d units
   ]]></param>
<param><![CDATA[p_bStereo   If the sound contains two different channels
   ]]></param>
</method>
<method name='cPlay' fullname='sandy.core.scenegraph:Sound3D/private:cPlay' isStatic='false' isFinal='false' isOverride='false'  param_names='isUrl' param_types='Boolean' param_defaults='false' result_type='void'>
<description><![CDATA[
   Play the sound if the camera enters the culling sphere with the sound radius.
   This method should not be called if mode is "channel"
   
   ]]></description>
<param><![CDATA[isUrl true if thr urlReq should be loaded
   ]]></param>
</method>
<method name='cStop' fullname='sandy.core.scenegraph:Sound3D/private:cStop' isStatic='false' isFinal='false' isOverride='false'  param_names='isUrl' param_types='Boolean' param_defaults='false' result_type='void'>
</method>
<method name='completeHandler' fullname='sandy.core.scenegraph:Sound3D/private:completeHandler' isStatic='false' isFinal='false' isOverride='false'  param_names='e' param_types='flash.events:Event' param_defaults='undefined' result_type='void'>
</method>
<method name='cull' fullname='sandy.core.scenegraph:Sound3D/cull' isStatic='false' isFinal='false' isOverride='true'  param_names='p_oFrustum;p_oViewMatrix;p_bChanged' param_types='sandy.view:Frustum;sandy.core.data:Matrix4;Boolean' param_defaults='undefined;undefined;undefined' result_type='void'>
</method>
<method name='play' fullname='sandy.core.scenegraph:Sound3D/play' isStatic='false' isFinal='false' isOverride='false'  param_names='p_nStartTime;p_iLoops;p_nLoopStartTime;p_bResume' param_types='Number;int;Number;Boolean' param_defaults='-1;-1;-1;false' result_type='void'>
<description><![CDATA[
   Start Sound sources of type Sound or UrlRequest. 
   Sound sources of type SoundChannel don't support the play method
   ]]></description>
<param><![CDATA[p_nStartTime
   ]]></param>
<param><![CDATA[p_iLoops
   ]]></param>
</method>
<method name='soundCompleteHandler' fullname='sandy.core.scenegraph:Sound3D/private:soundCompleteHandler' isStatic='false' isFinal='false' isOverride='false'  param_names='e' param_types='flash.events:Event' param_defaults='undefined' result_type='void'>
</method>
<method name='stop' fullname='sandy.core.scenegraph:Sound3D/stop' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
   Stop the sound source and SoundChannel
   ]]></description>
</method>
<method name='toString' fullname='sandy.core.scenegraph:Sound3D/toString' isStatic='false' isFinal='false' isOverride='true'  result_type='String'>
</method>
<method name='updateChannelRef' fullname='sandy.core.scenegraph:Sound3D/private:updateChannelRef' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='updateSoundTransform' fullname='sandy.core.scenegraph:Sound3D/private:updateSoundTransform' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='currentLoop' fullname='sandy.core.scenegraph:Sound3D/currentLoop/get' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
</method>
<method name='isFlipped' fullname='sandy.core.scenegraph:Sound3D/isFlipped/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
   Returns true if the stereo panorama is mirrored, flipPan have to be true to enable stereo flipping
   ]]></description>
</method>
<method name='soundChannel' fullname='sandy.core.scenegraph:Sound3D/soundChannel/get' isStatic='false' isFinal='false' isOverride='false'  result_type='flash.media:SoundChannel'>
</method>
<method name='soundMode' fullname='sandy.core.scenegraph:Sound3D/soundMode/get' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
</method>
<method name='soundSource' fullname='sandy.core.scenegraph:Sound3D/soundSource/get' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
   Returns the sound source, the sound source may be a URLRequest, Sound or SoundChannel object
   ]]></description>
</method>
<method name='soundSource' fullname='sandy.core.scenegraph:Sound3D/soundSource/set' isStatic='false' isFinal='false' isOverride='false'  param_names='s' param_types='' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   Set the sound source, the sound source can be a String, URLRequest, Sound or SoundChannel object
   ]]></description>
</method>
<field name='CULL_PLAY' fullname='sandy.core.scenegraph:Sound3D/CULL_PLAY' type='String' isStatic='true' isConst='false' defaultValue='cullPlay' >
</field>
<field name='CULL_STOP' fullname='sandy.core.scenegraph:Sound3D/CULL_STOP' type='String' isStatic='true' isConst='false' defaultValue='cullStop' >
</field>
<field name='LOOP' fullname='sandy.core.scenegraph:Sound3D/LOOP' type='String' isStatic='true' isConst='false' defaultValue='loop' >
</field>
<field name='NOISE' fullname='sandy.core.scenegraph:Sound3D/NOISE' type='String' isStatic='true' isConst='true' defaultValue='noise' >
</field>
<field name='SPEECH' fullname='sandy.core.scenegraph:Sound3D/SPEECH' type='String' isStatic='true' isConst='true' defaultValue='speech' >
</field>
<field name='_isFlipped' fullname='sandy.core.scenegraph:Sound3D/private:_isFlipped' type='Boolean' isStatic='false' isConst='false' defaultValue='false' >
</field>
<field name='_isPlaying' fullname='sandy.core.scenegraph:Sound3D/private:_isPlaying' type='Boolean' isStatic='false' isConst='false' defaultValue='false' >
</field>
<field name='cLoop' fullname='sandy.core.scenegraph:Sound3D/private:cLoop' type='int' isStatic='false' isConst='false' defaultValue='0' >
</field>
<field name='cPlaying' fullname='sandy.core.scenegraph:Sound3D/private:cPlaying' type='Boolean' isStatic='false' isConst='false' defaultValue='false' >
</field>
<field name='channelRef' fullname='sandy.core.scenegraph:Sound3D/private:channelRef' type='flash.media:SoundChannel' isStatic='false' isConst='false' >
</field>
<field name='duration' fullname='sandy.core.scenegraph:Sound3D/private:duration' type='Number' isStatic='false' isConst='false' defaultValue='0' >
</field>
<field name='flipPan' fullname='sandy.core.scenegraph:Sound3D/flipPan' type='Boolean' isStatic='false' isConst='false' defaultValue='true' >
<description><![CDATA[
   If flipPan is true the left and right channels of the sound are mirrored if the camera is facing away from the sound
   ]]></description>
</field>
<field name='lastPosition' fullname='sandy.core.scenegraph:Sound3D/private:lastPosition' type='Number' isStatic='false' isConst='false' defaultValue='0' >
</field>
<field name='lastStopTime' fullname='sandy.core.scenegraph:Sound3D/private:lastStopTime' type='Number' isStatic='false' isConst='false' defaultValue='0' >
</field>
<field name='loopStartTime' fullname='sandy.core.scenegraph:Sound3D/loopStartTime' type='Number' isStatic='false' isConst='false' defaultValue='0' >
<description><![CDATA[
   Start time to play the audio from if the sound loops
   ]]></description>
</field>
<field name='loops' fullname='sandy.core.scenegraph:Sound3D/loops' type='int' isStatic='false' isConst='false' defaultValue='0xffffff' >
<description><![CDATA[
   Number of loops before the sound stops
   ]]></description>
</field>
<field name='m_oSoundTransform' fullname='sandy.core.scenegraph:Sound3D/private:m_oSoundTransform' type='flash.media:SoundTransform' isStatic='false' isConst='false' defaultValue='' >
</field>
<field name='maxPan' fullname='sandy.core.scenegraph:Sound3D/maxPan' type='Number' isStatic='false' isConst='false' defaultValue='1' >
<description><![CDATA[
   Maximal pan is a positive Number from 0-1 or higher
   ]]></description>
</field>
<field name='sMode' fullname='sandy.core.scenegraph:Sound3D/private:sMode' type='String' isStatic='false' isConst='false' defaultValue='' >
</field>
<field name='soundCulled' fullname='sandy.core.scenegraph:Sound3D/private:soundCulled' type='Boolean' isStatic='false' isConst='false' defaultValue='false' >
</field>
<field name='soundPan' fullname='sandy.core.scenegraph:Sound3D/soundPan' type='Boolean' isStatic='false' isConst='false' defaultValue='true' >
<description><![CDATA[
  If pan is true the panning of the sound is relative to the camera rotation
   ]]></description>
</field>
<field name='soundRadius' fullname='sandy.core.scenegraph:Sound3D/soundRadius' type='Number' isStatic='false' isConst='false' >
<description><![CDATA[
   The radius of the sound
   ]]></description>
</field>
<field name='soundRef' fullname='sandy.core.scenegraph:Sound3D/private:soundRef' type='flash.media:Sound' isStatic='false' isConst='false' >
</field>
<field name='soundVolume' fullname='sandy.core.scenegraph:Sound3D/soundVolume' type='Number' isStatic='false' isConst='false' >
<description><![CDATA[
   Max volume of the sound if camera position is at sound position
   ]]></description>
</field>
<field name='startTime' fullname='sandy.core.scenegraph:Sound3D/startTime' type='Number' isStatic='false' isConst='false' defaultValue='0' >
<description><![CDATA[
   The start time to play the audio from
   ]]></description>
</field>
<field name='stereo' fullname='sandy.core.scenegraph:Sound3D/stereo' type='Boolean' isStatic='false' isConst='false' defaultValue='false' >
<description><![CDATA[
   If the sound contains two channels, stereo have to be set to true in order to mix left and right channels correctly
   ]]></description>
</field>
<field name='type' fullname='sandy.core.scenegraph:Sound3D/type' type='String' isStatic='false' isConst='false' defaultValue='speech' >
<description><![CDATA[
   Type is either SPEECH or NOISE, SPEECH will start the sound at the last position if the camera enters the sphere of the sound
   ]]></description>
</field>
<field name='urlReq' fullname='sandy.core.scenegraph:Sound3D/private:urlReq' type='flash.net:URLRequest' isStatic='false' isConst='false' >
</field>
<interfaceRec name='IDisplayable' fullname='sandy.core.scenegraph:IDisplayable' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\core\scenegraph\IDisplayable.as' namespace='sandy.core.scenegraph' access='public' baseClasses='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
  The IDisplayable interface should be implemented by all visible objects.
  
  <This ensures that all necessary methods are implemented>
  
  ]]></description>
<author><![CDATA[ Thomas Pfeiffer - kiroukou
  ]]></author>
<version><![CDATA[ 3.1
  ]]></version>
<date><![CDATA[  26.07.2007
  ]]></date>
</interfaceRec>
<method name='clear' fullname='sandy.core.scenegraph:IDisplayable/sandy.core.scenegraph:IDisplayable:clear' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='display' fullname='sandy.core.scenegraph:IDisplayable/sandy.core.scenegraph:IDisplayable:display' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oContainer' param_types='flash.display:Sprite' param_defaults='null' result_type='void'>
</method>
<method name='changed' fullname='sandy.core.scenegraph:IDisplayable/sandy.core.scenegraph:IDisplayable:changed/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
</method>
<method name='container' fullname='sandy.core.scenegraph:IDisplayable/sandy.core.scenegraph:IDisplayable:container/get' isStatic='false' isFinal='false' isOverride='false'  result_type='flash.display:Sprite'>
</method>
<method name='depth' fullname='sandy.core.scenegraph:IDisplayable/sandy.core.scenegraph:IDisplayable:depth/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
</method>
<method name='material' fullname='sandy.core.scenegraph:IDisplayable/sandy.core.scenegraph:IDisplayable:material/get' isStatic='false' isFinal='false' isOverride='false'  result_type='sandy.materials:Material'>
</method>
<classRec name='Sprite2D' fullname='sandy.core.scenegraph:Sprite2D' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\core\scenegraph\Sprite2D.as' namespace='sandy.core.scenegraph' access='public' baseclass='sandy.core.scenegraph:ATransformable' interfaces='sandy.core.scenegraph:IDisplayable' isFinal='false' isDynamic='false' >
<description><![CDATA[
  The Sprite2D class is used to create a 2D sprite.
    <p>A Sprite2D object is used to display a static or dynamic texture in the Sandy world.<br/>
  The sprite always shows the same side to the camera. This is useful when you want to show more
  or less complex images, without heavy calculations of perspective distortion.</p>
  <p>The Sprite2D has a fixed bounding sphere radius, set by default to 30.<br />
  In case your sprite is bigger, you can adjust it to avoid any frustum culling issue</p>
  
  ]]></description>
<author><![CDATA[ Thomas Pfeiffer - kiroukou
  ]]></author>
<version><![CDATA[ 3.1
  ]]></version>
<date><![CDATA[  26.07.2007
  ]]></date>
</classRec>
<method name='Sprite2D' fullname='sandy.core.scenegraph:Sprite2D/Sprite2D' isStatic='false' isFinal='false' isOverride='false'  param_names='p_sName;p_oContent;p_nScale' param_types='String;flash.display:DisplayObject;Number' param_defaults=';null;1' result_type='*'>
<description><![CDATA[
   Creates a Sprite2D.
      ]]></description>
<param><![CDATA[p_sName A string identifier for this object
   ]]></param>
<param><![CDATA[p_oContent The container containing all the pre-rendered picture
   ]]></param>
<param><![CDATA[p_nScale  A number used to change the scale of the displayed object.
      In case that the object projected dimension
     isn't adapted to your needs. 
     Default value is 1.0 which means unchanged. 
      A value of 2.0 will double object size.
      A value of 0 will force original graphics size independent of distance.
   ]]></param>
</method>
<method name='_beginMaterial' fullname='sandy.core.scenegraph:Sprite2D/private:_beginMaterial' isStatic='false' isFinal='false' isOverride='false'  param_names='pEvt' param_types='sandy.events:SandyEvent' param_defaults='undefined' result_type='void'>
</method>
<method name='_finishMaterial' fullname='sandy.core.scenegraph:Sprite2D/private:_finishMaterial' isStatic='false' isFinal='false' isOverride='false'  param_names='pEvt' param_types='sandy.events:SandyEvent' param_defaults='undefined' result_type='void'>
</method>
<method name='_onInteraction' fullname='sandy.core.scenegraph:Sprite2D/protected:_onInteraction' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oEvt' param_types='flash.events:Event' param_defaults='undefined' result_type='void'>
</method>
<method name='clear' fullname='sandy.core.scenegraph:Sprite2D/clear' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
   Clears the graphics object of this object's container.
      <p>The the graphics that were drawn on the Graphics object is erased, 
   and the fill and line style settings are reset.</p>
   ]]></description>
</method>
<method name='cull' fullname='sandy.core.scenegraph:Sprite2D/cull' isStatic='false' isFinal='false' isOverride='true'  param_names='p_oFrustum;p_oViewMatrix;p_bChanged' param_types='sandy.view:Frustum;sandy.core.data:Matrix4;Boolean' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
   Tests this node against the camera frustum to get its visibility.
      <p>If this node and its children are not within the frustum, 
   the node is set to cull and it would not be displayed.<p/>
   <p>The method also updates the bounding volumes to make the more accurate culling system possible.<br/>
   First the bounding sphere is updated, and if intersecting, 
   the bounding box is updated to perform the more precise culling.</p>
   <p><b>[MANDATORY] The update method must be called first!</b></p>
      ]]></description>
<param><![CDATA[p_oScene The current scene
   ]]></param>
<param><![CDATA[p_oFrustum The frustum of the current camera
   ]]></param>
<param><![CDATA[p_oViewMatrix The view martix of the curren camera
   ]]></param>
<param><![CDATA[p_bChanged
   ]]></param>
</method>
<method name='destroy' fullname='sandy.core.scenegraph:Sprite2D/destroy' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[
   
   Delete this node and all its child nodes.
      <p>This node nad all its child nodes are deleted, including all data they are storing.<br/>
   The method makes recursive calls to the destroy method of the child nodes.
   ]]></description>
</method>
<method name='display' fullname='sandy.core.scenegraph:Sprite2D/display' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oContainer' param_types='flash.display:Sprite' param_defaults='null' result_type='void'>
<description><![CDATA[
   Displays this sprite.
      <p>display the object onto the scene.
   If the object has autocenter enabled, sprite center is set at screen position.
   Otherwise the sprite top left corner will be at that position.</p>
      ]]></description>
<param><![CDATA[p_oScene The current scene
   ]]></param>
<param><![CDATA[p_oContainer The container to draw on
   ]]></param>
</method>
<method name='remove' fullname='sandy.core.scenegraph:Sprite2D/remove' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[
   Provide the classical remove behaviour, plus remove the container to the display list.
   ]]></description>
</method>
<method name='setBoundingSphereRadius' fullname='sandy.core.scenegraph:Sprite2D/setBoundingSphereRadius' isStatic='false' isFinal='false' isOverride='false'  param_names='p_nRadius' param_types='Number' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   Sets the radius of bounding sphere for this sprite.
      ]]></description>
<param><![CDATA[p_nRadius The radius
   ]]></param>
</method>
<method name='toString' fullname='sandy.core.scenegraph:Sprite2D/toString' isStatic='false' isFinal='false' isOverride='true'  result_type='String'>
</method>
<method name='container' fullname='sandy.core.scenegraph:Sprite2D/container/get' isStatic='false' isFinal='false' isOverride='false'  result_type='flash.display:Sprite'>
<description><![CDATA[
   The container of this sprite ( canvas )
   ]]></description>
</method>
<method name='content' fullname='sandy.core.scenegraph:Sprite2D/content/get' isStatic='false' isFinal='false' isOverride='false'  result_type='flash.display:DisplayObject'>
<description><![CDATA[
   Gives access to your content reference.
   The content is the exact visual object you passed to the constructor.
   In comparison with the container which is the container of the content (in Sandy's architecture, the container must be a Sprite),
   but the content can be any kind of visual object AS3 offers (MovieClip, Bitmap, Sprite etc.)
   WARNNIG: Be careful when manipulating the content object to not break any link with the sandy container (content.parent).
   ]]></description>
</method>
<method name='depth' fullname='sandy.core.scenegraph:Sprite2D/depth/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
<description><![CDATA[
   The depth to draw this sprite at.
   <p>[<b>ToDo</b>: Explain ]</p>
   ]]></description>
</method>
<method name='enableEvents' fullname='sandy.core.scenegraph:Sprite2D/enableEvents/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
</method>
<method name='material' fullname='sandy.core.scenegraph:Sprite2D/material/get' isStatic='false' isFinal='false' isOverride='false'  result_type='sandy.materials:Material'>
<description><![CDATA[
   Material that the sprite will be dressed in. Use it to apply some attributes
   to sprite, such as light attributes.
   ]]></description>
</method>
<method name='scale' fullname='sandy.core.scenegraph:Sprite2D/scale/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
<description><![CDATA[
   The scale of this sprite.
      <p>Using scale, you can change the dimension of the sprite rapidly.</p>
   ]]></description>
</method>
<method name='content' fullname='sandy.core.scenegraph:Sprite2D/content/set' isStatic='false' isFinal='false' isOverride='false'  param_names='p_content' param_types='flash.display:DisplayObject' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   The DisplayObject that will used as content of this Sprite2D. 
   If this DisplayObject has already a screen position, it will be reseted to 0,0.
   If the DisplayObject has allready a parent, it will be unrelated from it automatically. (its transform matrix property is resetted to identity too).
   ]]></description>
<param><![CDATA[p_content The DisplayObject to attach to the Sprite2D#container. 
   ]]></param>
</method>
<method name='depth' fullname='sandy.core.scenegraph:Sprite2D/depth/set' isStatic='false' isFinal='false' isOverride='false'  param_names='p_nDepth' param_types='Number' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='enableEvents' fullname='sandy.core.scenegraph:Sprite2D/enableEvents/set' isStatic='false' isFinal='false' isOverride='true'  param_names='b' param_types='Boolean' param_defaults='undefined' result_type='void'>
</method>
<method name='material' fullname='sandy.core.scenegraph:Sprite2D/material/set' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oMaterial' param_types='sandy.materials:Material' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='scale' fullname='sandy.core.scenegraph:Sprite2D/scale/set' isStatic='false' isFinal='false' isOverride='false'  param_names='n' param_types='Number' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='scene' fullname='sandy.core.scenegraph:Sprite2D/scene/set' isStatic='false' isFinal='false' isOverride='true'  param_names='p_oScene' param_types='sandy.core:Scene3D' param_defaults='undefined' result_type='void'>
</method>
<field name='_nScale' fullname='sandy.core.scenegraph:Sprite2D/protected:_nScale' type='Number' isStatic='false' isConst='false' >
</field>
<field name='autoCenter' fullname='sandy.core.scenegraph:Sprite2D/autoCenter' type='Boolean' isStatic='false' isConst='false' defaultValue='true' >
<description><![CDATA[
   When enabled, the sprite will be displayed at its graphical center.
   Otherwise the sprite positioning is controlled by floorCenter property.
   ]]></description>
</field>
<field name='enableForcedDepth' fullname='sandy.core.scenegraph:Sprite2D/enableForcedDepth' type='Boolean' isStatic='false' isConst='false' defaultValue='false' >
<description><![CDATA[
   Should forced depth be enable for this object?.
      <p>If true it is possible to force this object to be drawn at a specific depth,<br/>
   if false the normal Z-sorting algorithm is applied.</p>
   <p>When correctly used, this feature allows you to avoid some Z-sorting problems.</p>
   ]]></description>
</field>
<field name='fixedAngle' fullname='sandy.core.scenegraph:Sprite2D/fixedAngle' type='Boolean' isStatic='false' isConst='false' defaultValue='false' >
<description><![CDATA[
   Set this to true if you want this sprite to rotate with camera.
   ]]></description>
</field>
<field name='floorCenter' fullname='sandy.core.scenegraph:Sprite2D/floorCenter' type='Boolean' isStatic='false' isConst='false' defaultValue='false' >
<description><![CDATA[
   When enabled, the sprite will be displayed at its bottom line.
   Otherwise it is positioned at its registration point (usually top left corner).
   This property has no effect when autoCenter is enabled.
   ]]></description>
</field>
<field name='forcedDepth' fullname='sandy.core.scenegraph:Sprite2D/forcedDepth' type='Number' isStatic='false' isConst='false' defaultValue='0' >
<description><![CDATA[
   The forced depth for this object.
      <p>To make this feature work, you must enable the ForcedDepth system too.<br/>
   The higher the depth is, the sooner the more far the object will be represented.</p>
   ]]></description>
</field>
<field name='m_bEv' fullname='sandy.core.scenegraph:Sprite2D/private:m_bEv' type='Boolean' isStatic='false' isConst='false' defaultValue='false' >
</field>
<field name='m_nDepth' fullname='sandy.core.scenegraph:Sprite2D/protected:m_nDepth' type='Number' isStatic='false' isConst='false' >
</field>
<field name='m_nH2' fullname='sandy.core.scenegraph:Sprite2D/private:m_nH2' type='Number' isStatic='false' isConst='false' defaultValue='0' >
</field>
<field name='m_nPerspScaleX' fullname='sandy.core.scenegraph:Sprite2D/protected:m_nPerspScaleX' type='Number' isStatic='false' isConst='false' defaultValue='0' >
</field>
<field name='m_nRotation' fullname='sandy.core.scenegraph:Sprite2D/protected:m_nRotation' type='Number' isStatic='false' isConst='false' defaultValue='0' >
</field>
<field name='m_nW2' fullname='sandy.core.scenegraph:Sprite2D/private:m_nW2' type='Number' isStatic='false' isConst='false' defaultValue='0' >
</field>
<field name='m_oContainer' fullname='sandy.core.scenegraph:Sprite2D/private:m_oContainer' type='flash.display:Sprite' isStatic='false' isConst='false' >
</field>
<field name='m_oContent' fullname='sandy.core.scenegraph:Sprite2D/protected:m_oContent' type='flash.display:DisplayObject' isStatic='false' isConst='false' >
</field>
<field name='m_oMaterial' fullname='sandy.core.scenegraph:Sprite2D/protected:m_oMaterial' type='sandy.materials:Material' isStatic='false' isConst='false' >
</field>
<field name='v' fullname='sandy.core.scenegraph:Sprite2D/v' type='sandy.core.data:Vertex' isStatic='false' isConst='false' >
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='vx' fullname='sandy.core.scenegraph:Sprite2D/vx' type='sandy.core.data:Vertex' isStatic='false' isConst='false' >
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='vy' fullname='sandy.core.scenegraph:Sprite2D/vy' type='sandy.core.data:Vertex' isStatic='false' isConst='false' >
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</field>
<classRec name='Shape3D' fullname='sandy.core.scenegraph:Shape3D' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\core\scenegraph\Shape3D.as' namespace='sandy.core.scenegraph' access='public' baseclass='sandy.core.scenegraph:ATransformable' interfaces='sandy.core.scenegraph:IDisplayable' isFinal='false' isDynamic='false' >
<description><![CDATA[
  The Shape3D class is the base class of all true 3D shapes.
    <p>It represents a node in the object tree of the world.<br/>
  A Shape3D is a leaf node and can not have any child nodes.</p>
  <p>It must be the child of a branch group or a transform group, 
  but transformations can be applied to the Shape directly.</p>
  
  ]]></description>
<author><![CDATA[ Thomas Pfeiffer - kiroukou
  ]]></author>
<version><![CDATA[ 3.1
  ]]></version>
<date><![CDATA[  26.07.2007
  ]]></date>
</classRec>
<method name='Shape3D' fullname='sandy.core.scenegraph:Shape3D/Shape3D' isStatic='false' isFinal='false' isOverride='false'  param_names='p_sName;p_oGeometry;p_oAppearance;p_bUseSingleContainer' param_types='String;sandy.core.scenegraph:Geometry3D;sandy.materials:Appearance;Boolean' param_defaults=';null;null;true' result_type='*'>
<description><![CDATA[
   Creates a 3D object
      <p>This creates a new 3D geometry object. That object will handle the rendering of a static Geometry3D object into a real 3D object and finally to the 2D camera representation.</p>
      ]]></description>
<param><![CDATA[p_sName  A string identifier for this object
   ]]></param>
<param><![CDATA[p_oGeometry  The geometry of this object
   ]]></param>
<param><![CDATA[p_oAppearance  The appearance of this object. If no apperance is given, the DEFAULT_APPEARANCE will be applied.
   ]]></param>
<param><![CDATA[p_bUseSingleContainer Whether tis object should use a single container to draw on
   ]]></param>
</method>
<method name='__destroyPolygons' fullname='sandy.core.scenegraph:Shape3D/private:__destroyPolygons' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='__generatePolygons' fullname='sandy.core.scenegraph:Shape3D/private:__generatePolygons' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oGeometry' param_types='sandy.core.scenegraph:Geometry3D' param_defaults='undefined' result_type='void'>
</method>
<method name='_onInteraction' fullname='sandy.core.scenegraph:Shape3D/protected:_onInteraction' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oEvt' param_types='flash.events:Event' param_defaults='undefined' result_type='void'>
</method>
<method name='clear' fullname='sandy.core.scenegraph:Shape3D/clear' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
  Clears the graphics object of this object's container.
    <p>The the graphics that were drawn on the Graphics object is erased, 
  and the fill and line style settings are reset.</p>
  ]]></description>
</method>
<method name='clone' fullname='sandy.core.scenegraph:Shape3D/clone' isStatic='false' isFinal='false' isOverride='false'  param_names='p_sName;p_bKeepTransform' param_types='String;Boolean' param_defaults=';false' result_type='sandy.core.scenegraph:Shape3D'>
<description><![CDATA[
   This method returns a clone of this Shape3D.
   The current appearance will be applied, and the geometry is cloned (not referenced to curent one).
   
   ]]></description>
<param><![CDATA[p_sName The name of the new shape you are going to create
   ]]></param>
<param><![CDATA[p_bKeepTransform Boolean value which, if set to true, applies the current local transformations to the cloned shape. Default value is false.
      ]]></param>
<return><![CDATA[ The clone
   ]]></return>
</method>
<method name='cull' fullname='sandy.core.scenegraph:Shape3D/cull' isStatic='false' isFinal='false' isOverride='true'  param_names='p_oFrustum;p_oViewMatrix;p_bChanged' param_types='sandy.view:Frustum;sandy.core.data:Matrix4;Boolean' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
   Tests this node against the camera frustum to get its visibility.
      <p>If this node and its children are not within the frustum, 
   the node is set to cull and it would not be displayed.<p/>
   <p>The method also updates the bounding volumes to make the more accurate culling system possible.<br/>
   First the bounding sphere is updated, and if intersecting, 
   the bounding box is updated to perform the more precise culling.</p>
   <p><b>[MANDATORY] The update method must be called first!</b></p>
      ]]></description>
<param><![CDATA[p_oScene The current scene
   ]]></param>
<param><![CDATA[p_oFrustum The frustum of the current camera
   ]]></param>
<param><![CDATA[p_oViewMatrix The view martix of the curren camera
   ]]></param>
<param><![CDATA[p_bChanged
   ]]></param>
</method>
<method name='destroy' fullname='sandy.core.scenegraph:Shape3D/destroy' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[
   Destroy this object and all its faces
   container object is removed, and graphics cleared.  All polygons have their
   ]]></description>
</method>
<method name='display' fullname='sandy.core.scenegraph:Shape3D/display' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oContainer' param_types='flash.display:Sprite' param_defaults='null' result_type='void'>
<description><![CDATA[
   Performs a z-sorting and renders the objects visible polygons.
      <p>The method is called only if the object renders on a single container<br/> 
   - ( useSingleContainer = true ).</p>
      ]]></description>
<param><![CDATA[p_oScene The current scene
   ]]></param>
<param><![CDATA[p_oContainer The container to draw on
   ]]></param>
</method>
<method name='displayBSPTree' fullname='sandy.core.scenegraph:Shape3D/private:displayBSPTree' isStatic='false' isFinal='false' isOverride='false'  param_names='tree;camPt' param_types='sandy.core.data:BSPNode;sandy.core.data:Point3D' param_defaults='undefined;undefined' result_type='void'>
</method>
<method name='setConvexFlag' fullname='sandy.core.scenegraph:Shape3D/setConvexFlag' isStatic='false' isFinal='false' isOverride='false'  param_names='convex' param_types='Boolean' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   Sets SORT_NONE or SORT_AVGZ sorting mode. Deprecated.
   ]]></description>
<internal><![CDATA[this is now here for backward compatibility only.
   ]]></internal>
</method>
<method name='swapCulling' fullname='sandy.core.scenegraph:Shape3D/swapCulling' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
   Changes the backface culling side.
      <p>When you want to display a cube and you are the cube, you see its external faces.<br/>
   The internal faces are not drawn due to back face culling</p>
      <p>In case you are inside the cube, by default Sandy's engine still doesn't draw the internal faces
   (because you should not be in there).</p> 
      <p>If you need to be only inside the cube, you can call this method to change which side is culled.<br/>
   The faces will be visible only from the interior of the cube.</p>
      <p>If you want to be both on the inside and the outside, you want to make the faces visible from on both sides.<br/>
   In that case you just have to set enableBackFaceCulling to false.</p>
   ]]></description>
</method>
<method name='toString' fullname='sandy.core.scenegraph:Shape3D/toString' isStatic='false' isFinal='false' isOverride='true'  result_type='String'>
<description><![CDATA[
   Returns a string representation of this object.
      ]]></description>
<return><![CDATA[The fully qualified name of this object and its geometry.
   ]]></return>
</method>
<method name='updateBoundingVolumes' fullname='sandy.core.scenegraph:Shape3D/updateBoundingVolumes' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[
   Updates the bounding volumes of this object.
   ]]></description>
</method>
<method name='appearance' fullname='sandy.core.scenegraph:Shape3D/appearance/get' isStatic='false' isFinal='false' isOverride='false'  result_type='sandy.materials:Appearance'>
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='container' fullname='sandy.core.scenegraph:Shape3D/container/get' isStatic='false' isFinal='false' isOverride='false'  result_type='flash.display:Sprite'>
<description><![CDATA[
   The contianer for this object.
   This container property exist if the useSingleContainer is set to true.
   It is a direct access to the Shape3D container to, for example, apply nice effects such as filters etc.
   ]]></description>
</method>
<method name='depth' fullname='sandy.core.scenegraph:Shape3D/depth/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
<description><![CDATA[
   The depth of this object.
   In case the useSingleContainer mode is enabled (default mode), this value returns the means depth of the Shape in the camera frame.
   This value is mainly used as a z-sorting value.
   ]]></description>
</method>
<method name='enableBackFaceCulling' fullname='sandy.core.scenegraph:Shape3D/enableBackFaceCulling/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='enableClipping' fullname='sandy.core.scenegraph:Shape3D/enableClipping/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
</method>
<method name='enableInteractivity' fullname='sandy.core.scenegraph:Shape3D/enableInteractivity/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
</method>
<method name='geometry' fullname='sandy.core.scenegraph:Shape3D/geometry/get' isStatic='false' isFinal='false' isOverride='false'  result_type='sandy.core.scenegraph:Geometry3D'>
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='geometryCenter' fullname='sandy.core.scenegraph:Shape3D/geometryCenter/get' isStatic='false' isFinal='false' isOverride='false'  result_type='sandy.core.data:Point3D'>
<description><![CDATA[
   This property call allows you to get the geometryCenter offset Point3D of the Shape.
   Modifying this Point3D will impact the way the shape is rendered, mainly its rotation center.
   
   ]]></description>
<return><![CDATA[a Point3D which corresponds to the 2 directions offset.
   ]]></return>
</method>
<method name='material' fullname='sandy.core.scenegraph:Shape3D/material/get' isStatic='false' isFinal='false' isOverride='false'  result_type='sandy.materials:Material'>
<description><![CDATA[
   Returns the material currently used by the renderer
   ]]></description>
<return><![CDATA[Material the material used to render
   ]]></return>
</method>
<method name='sortingMode' fullname='sandy.core.scenegraph:Shape3D/sortingMode/get' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
   Faces sorting method.
   With <code>useSingleContainer</code> set to <code>false</code> only <code>SORT_AVGZ</code> is possible.
   ]]></description>
</method>
<method name='useSingleContainer' fullname='sandy.core.scenegraph:Shape3D/useSingleContainer/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='appearance' fullname='sandy.core.scenegraph:Shape3D/appearance/set' isStatic='false' isFinal='false' isOverride='true'  param_names='p_oApp' param_types='sandy.materials:Appearance' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   Set the appearance of this object.
   NOTE: Please mind that Sandy3D allows to set an appearance at a polygon level.
   ]]></description>
<param><![CDATA[p_oApp The appearance object which stores the front material and -if set- the back material which represents that shape.
   ]]></param>
</method>
<method name='depth' fullname='sandy.core.scenegraph:Shape3D/depth/set' isStatic='false' isFinal='false' isOverride='false'  param_names='p_nDepth' param_types='Number' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='enableBackFaceCulling' fullname='sandy.core.scenegraph:Shape3D/enableBackFaceCulling/set' isStatic='false' isFinal='false' isOverride='true'  param_names='b' param_types='Boolean' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   Should back face culling be enabled for this object?.
      <p>If set to false all faces of this object are drawn.<br/>
   A true value enables the back face culling algorithm - Default true</p>
   ]]></description>
</method>
<method name='enableClipping' fullname='sandy.core.scenegraph:Shape3D/enableClipping/set' isStatic='false' isFinal='false' isOverride='true'  param_names='p_bClippingValue' param_types='Boolean' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   <p>
   Enable the Frustum clipping on the visible polygons.
   Enable this when you need a perfect intersection between the camera and some object shapes.
   In case you need to make the camera look inside and outide a box, or other immerssive things.</p>
   
   <p>Important: Enable the clipping makes process a bit slower, especially with big scenes.</p>
      <p>Specify if this object polygons should be clipped against the camera frustum planes.</p>
   ]]></description>
</method>
<method name='enableEvents' fullname='sandy.core.scenegraph:Shape3D/enableEvents/set' isStatic='false' isFinal='false' isOverride='true'  param_names='b' param_types='Boolean' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   Enables the event system for mouse events.
      <p>When set to true, the onPress, onRollOver and onRollOut events are broadcast.<br/>
   The event system is enabled or disabled for all faces of this object.<br/>
   As an alternative, you have the possibility to enable events only for specific faces.</p>
      <p>Once this feature is enabled, the animation is more CPU intensive.</p>
   
   <p>Example
   <code>
    var l_oShape:Shape3D = new Sphere("sphere");
    l_oShape.enableEvents = true;
    l_oShape.addEventListener( MouseEvent.CLICK, onClick );
   
    function onClick( p_eEvent:Shape3DEvent ):void
          {
            var l_oPoly:Polygon = ( p_eEvent.polygon );  
            var l_oPointAtClick:Point3D =  p_eEvent.point;
            // -- get the normalized uv of the point under mouse position
           var l_oIntersectionUV:UVCoord = p_eEvent.uv;
            // -- get the correct material
            var l_oMaterial:BitmapMaterial = (l_oPoly.visible ? l_oPoly.appearance.frontMaterial : l_oPoly.appearance.backMaterial) as BitmapMaterial;
          }
         </code>
   ]]></description>
</method>
<method name='enableInteractivity' fullname='sandy.core.scenegraph:Shape3D/enableInteractivity/set' isStatic='false' isFinal='false' isOverride='true'  param_names='p_bState' param_types='Boolean' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   Enable the interactivity on this shape and its polygon.
   Be careful, this mode have some requirements :
     - to have useSingleContainer set to false. It is done automatically if enabled
   
   The original settings are back to their  original state when the mode is disabled
   ]]></description>
</method>
<method name='geometry' fullname='sandy.core.scenegraph:Shape3D/geometry/set' isStatic='false' isFinal='false' isOverride='false'  param_names='p_geometry' param_types='sandy.core.scenegraph:Geometry3D' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   The geometry of this object.
   ]]></description>
</method>
<method name='geometryCenter' fullname='sandy.core.scenegraph:Shape3D/geometryCenter/set' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oGeomCenter' param_types='sandy.core.data:Point3D' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   Change the geometryCenter of the Shape3D.
   To change the geometryCenter point of a shape, simply set this geometryCenter property.
   The geometryCenter property requires a Point3D. This Point3D is an position offset relative to the original geometry one.
   For example, a Sphere primitive creates automatically a geometry which center is the 0,0,0 position. If you rotate this sphere as this,
   it will rotate around its center.
   Now if you set the geometryCenter property, this rotation center will change.
   
   The updateBoundingVolumes method which does update the bounding volumes to enable a correct frustum culling is automatically called.
   
   ]]></description>
<example><![CDATA[To change the geometryCenter center at runtime
   <listing version="3.1">
      var l_oSphere:Sphere = new Sphere("mySphere", 50, 3 );
      // Change the rotation reference to -50 offset in Y direction from the orinal one
      // and that corresponds to the bottom of the sphere
      l_oSphere.geometryCenter = new Point3D( 0, -50, 0 ); 
      l_oSphere.rotateZ = 45;
   </listing>
   ]]></example>
</method>
<method name='scene' fullname='sandy.core.scenegraph:Shape3D/scene/set' isStatic='false' isFinal='false' isOverride='true'  param_names='p_oScene' param_types='sandy.core:Scene3D' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   Reference to the scene is it linked to.
   Initialized at null.
   ]]></description>
</method>
<method name='sortingMode' fullname='sandy.core.scenegraph:Shape3D/sortingMode/set' isStatic='false' isFinal='false' isOverride='false'  param_names='mode' param_types='int' param_defaults='undefined' result_type='void'>
</method>
<method name='useSingleContainer' fullname='sandy.core.scenegraph:Shape3D/useSingleContainer/set' isStatic='false' isFinal='false' isOverride='true'  param_names='p_bUseSingleContainer' param_types='Boolean' param_defaults='undefined' result_type='void'>
<description><![CDATA[
      setter that allow user to change the way to render this object.
      set to true, the shape will be rendered into a single Sprite object, which is accessible through the container property.
      set to false, the container property does not target anything, but all the polygons will be rendered into their own dedidated container.
            <p>If true, this object renders itself on a single container ( Sprite ),<br/>
      if false, each polygon is rendered on its own container.</p>
      ]]></description>
</method>
<field name='SORT_AVGZ' fullname='sandy.core.scenegraph:Shape3D/SORT_AVGZ' type='int' isStatic='true' isConst='true' defaultValue='1' >
<description><![CDATA[
   Average distance sorting.
   Default sorting mode.
   Carefully designed models will display just fine, but ordering problems are common.
   This is also the only possible sorting mode with <code>useSingleContainer</code> set to <code>false</code>.
   ]]></description>
</field>
<field name='SORT_CUSTOM_BSP' fullname='sandy.core.scenegraph:Shape3D/SORT_CUSTOM_BSP' type='int' isStatic='true' isConst='true' defaultValue='3' >
<description><![CDATA[
   In this mode mesh is sorted using BSP tree, but no tree is built for you (you need to set <code>bsp</code> property yourself).
   Experimental.
   ]]></description>
</field>
<field name='SORT_LAZY_BSP' fullname='sandy.core.scenegraph:Shape3D/SORT_LAZY_BSP' type='int' isStatic='true' isConst='true' defaultValue='2' >
<description><![CDATA[
   In this mode mesh is sorted using BSP tree, but no faces are split for you (means sorting problems are still possible).
   Experimental.
   ]]></description>
</field>
<field name='SORT_NONE' fullname='sandy.core.scenegraph:Shape3D/SORT_NONE' type='int' isStatic='true' isConst='true' defaultValue='0' >
<description><![CDATA[
   No sorting.
   Only convex shapes are guaranteed to display correctly in this mode.
   ]]></description>
</field>
<field name='aPolygons' fullname='sandy.core.scenegraph:Shape3D/aPolygons' type='Array' isStatic='false' isConst='false' defaultValue='' >
<description><![CDATA[
   The array of polygons building this object.
   ]]></description>
</field>
<field name='aVisiblePolygons' fullname='sandy.core.scenegraph:Shape3D/aVisiblePolygons' type='Array' isStatic='false' isConst='false' defaultValue='' >
<description><![CDATA[
   Array containing the visible polygons of that shape.
   Contente is available after the SCENE_RENDER_DISPLAYLIST event of the current scene has been dispatched
   ]]></description>
</field>
<field name='animated' fullname='sandy.core.scenegraph:Shape3D/animated' type='Boolean' isStatic='false' isConst='false' defaultValue='false' >
<description><![CDATA[
   Animated flag. 
   <p>If the geometry vertices are dynamically modified by some animation engine or mathematic function, some polygon may disapear with no reason.
   The normal Point3D is used to compute the polygon visibility, and if you don't update the normal Point3D after the vertices modifications, there's an error.
   To fix that problem, Sandy3D offers that new property appeared in 3.0.3 release, which once set to true, automatically update the normal Point3Ds for you.
   As a performance warning, don't set this value to true if your model geometry isn't animated.</p>
   ]]></description>
</field>
<field name='bsp' fullname='sandy.core.scenegraph:Shape3D/bsp' type='sandy.core.data:BSPNode' isStatic='false' isConst='false' >
<description><![CDATA[
   Root node of BSP tree.
   ]]></description>
</field>
<field name='enableForcedDepth' fullname='sandy.core.scenegraph:Shape3D/enableForcedDepth' type='Boolean' isStatic='false' isConst='false' defaultValue='false' >
<description><![CDATA[
   Should forced depth be enable for this object?.
      <p>If true it is possible to force this object to be drawn at a specific depth,<br/>
   if false the normal Z-sorting algorithm is applied.</p>
   <p>When correctly used, this feature allows you to avoid some Z-sorting problems.</p>
   ]]></description>
</field>
<field name='enableNearClipping' fullname='sandy.core.scenegraph:Shape3D/enableNearClipping' type='Boolean' isStatic='false' isConst='false' defaultValue='false' >
<description><![CDATA[
   <p>
   Enable the Frustum near plane clipping on the visible polygons.
   Enable this when you need a perfect intersection between the front camera plane.
   This is mainly used when you need the camera to move on a long plane.</p>
   
   <p>Important: Enable the clipping makes process a bit slower, especially with big scenes.</p>
   ]]></description>
</field>
<field name='forcedDepth' fullname='sandy.core.scenegraph:Shape3D/forcedDepth' type='Number' isStatic='false' isConst='false' defaultValue='0' >
<description><![CDATA[
   The forced depth for this object.
      <p>To make this feature work, you must enable the ForcedDepth system too.<br/>
   The higher the depth is, the sooner the more far the object will be represented.</p>
   ]]></description>
</field>
<field name='m_bBackFaceCulling' fullname='sandy.core.scenegraph:Shape3D/private:m_bBackFaceCulling' type='Boolean' isStatic='false' isConst='false' defaultValue='true' >
</field>
<field name='m_bClipping' fullname='sandy.core.scenegraph:Shape3D/private:m_bClipping' type='Boolean' isStatic='false' isConst='false' >
</field>
<field name='m_bEv' fullname='sandy.core.scenegraph:Shape3D/private:m_bEv' type='Boolean' isStatic='false' isConst='false' defaultValue='false' >
</field>
<field name='m_bForcedSingleContainer' fullname='sandy.core.scenegraph:Shape3D/private:m_bForcedSingleContainer' type='Boolean' isStatic='false' isConst='false' defaultValue='false' >
</field>
<field name='m_bMouseInteractivity' fullname='sandy.core.scenegraph:Shape3D/private:m_bMouseInteractivity' type='Boolean' isStatic='false' isConst='false' defaultValue='false' >
</field>
<field name='m_bUseSingleContainer' fullname='sandy.core.scenegraph:Shape3D/protected:m_bUseSingleContainer' type='Boolean' isStatic='false' isConst='false' defaultValue='true' >
</field>
<field name='m_bWasOver' fullname='sandy.core.scenegraph:Shape3D/m_bWasOver' type='Boolean' isStatic='false' isConst='false' defaultValue='false' >
</field>
<field name='m_nDepth' fullname='sandy.core.scenegraph:Shape3D/protected:m_nDepth' type='Number' isStatic='false' isConst='false' defaultValue='0' >
</field>
<field name='m_nSortingMode' fullname='sandy.core.scenegraph:Shape3D/private:m_nSortingMode' type='int' isStatic='false' isConst='false' defaultValue='1' >
</field>
<field name='m_oAppearance' fullname='sandy.core.scenegraph:Shape3D/private:m_oAppearance' type='sandy.materials:Appearance' isStatic='false' isConst='false' >
</field>
<field name='m_oContainer' fullname='sandy.core.scenegraph:Shape3D/protected:m_oContainer' type='flash.display:Sprite' isStatic='false' isConst='false' >
</field>
<field name='m_oGeomCenter' fullname='sandy.core.scenegraph:Shape3D/protected:m_oGeomCenter' type='sandy.core.data:Point3D' isStatic='false' isConst='false' defaultValue='' >
</field>
<field name='m_oGeometry' fullname='sandy.core.scenegraph:Shape3D/private:m_oGeometry' type='sandy.core.scenegraph:Geometry3D' isStatic='false' isConst='false' >
<description><![CDATA[ Geometry of this object ]]></description>
</field>
<field name='m_oLastContainer' fullname='sandy.core.scenegraph:Shape3D/m_oLastContainer' type='flash.display:Sprite' isStatic='false' isConst='false' >
</field>
<field name='m_oLastEvent' fullname='sandy.core.scenegraph:Shape3D/m_oLastEvent' type='sandy.events:Shape3DEvent' isStatic='false' isConst='false' >
</field>
<classRec name='StarField' fullname='sandy.core.scenegraph:StarField' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\core\scenegraph\StarField.as' namespace='sandy.core.scenegraph' access='public' baseclass='sandy.core.scenegraph:ATransformable' interfaces='sandy.core.scenegraph:IDisplayable;sandy.core.scenegraph:Renderable' isFinal='false' isDynamic='false' >
<description><![CDATA[
  The StarField class renders dense star field at reasonable FPS.
    ]]></description>
<author><![CDATA[ makc
  ]]></author>
<version><![CDATA[ 3.1
  ]]></version>
<date><![CDATA[  03.03.2008
  ]]></date>
<metadata>
	<Event owner='sandy.core.scenegraph:StarField' name='afterRender' type='sandy.events.StarFieldRenderEvent' >
<description><![CDATA[
 Dispatched when after BitmapData object is unlocked.
  ]]></description>
<eventType><![CDATA[sandy.events.StarFieldRenderEvent.AFTER_RENDER
 ]]></eventType>
	</Event>
</metadata>
<metadata>
	<Event owner='sandy.core.scenegraph:StarField' name='beforeRender' type='sandy.events.StarFieldRenderEvent' >
<description><![CDATA[
 Dispatched when after BitmapData object is locked and normally about to be cleared.
  ]]></description>
<eventType><![CDATA[sandy.events.StarFieldRenderEvent.BEFORE_RENDER
 ]]></eventType>
	</Event>
</metadata>
</classRec>
<method name='StarField' fullname='sandy.core.scenegraph:StarField/StarField' isStatic='false' isFinal='false' isOverride='false'  param_names='p_sName' param_types='String' param_defaults='' result_type='*'>
<description><![CDATA[
   Creates a StarField.
      ]]></description>
<param><![CDATA[p_sName A string identifier for this object
   ]]></param>
</method>
<method name='clear' fullname='sandy.core.scenegraph:StarField/clear' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
   Clearing is done in render() method.
   ]]></description>
</method>
<method name='cull' fullname='sandy.core.scenegraph:StarField/cull' isStatic='false' isFinal='false' isOverride='true'  param_names='p_oFrustum;p_oViewMatrix;p_bChanged' param_types='sandy.view:Frustum;sandy.core.data:Matrix4;Boolean' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
   This tests for stars visibility.
      ]]></description>
<param><![CDATA[p_oScene The current scene
   ]]></param>
<param><![CDATA[p_oFrustum The frustum of the current camera
   ]]></param>
<param><![CDATA[p_oViewMatrix The view martix of the curren camera
   ]]></param>
<param><![CDATA[p_bChanged
   ]]></param>
</method>
<method name='destroy' fullname='sandy.core.scenegraph:StarField/destroy' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[
   
   Delete this node and all its child nodes.
      <p>This node nad all its child nodes are deleted, including all data they are storing.<br/>
   The method makes recursive calls to the destroy method of the child nodes.
   ]]></description>
</method>
<method name='display' fullname='sandy.core.scenegraph:StarField/display' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oContainer' param_types='flash.display:Sprite' param_defaults='null' result_type='void'>
<description><![CDATA[
   Displays the starfield.
      ]]></description>
<param><![CDATA[p_oScene The current scene
   ]]></param>
<param><![CDATA[p_oContainer The container to draw on
   ]]></param>
</method>
<method name='makeEvents' fullname='sandy.core.scenegraph:StarField/private:makeEvents' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='remove' fullname='sandy.core.scenegraph:StarField/remove' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[
   Provide the classical remove behaviour, plus remove the container to the display list.
   ]]></description>
</method>
<method name='render' fullname='sandy.core.scenegraph:StarField/render' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oCamera' param_types='sandy.core.scenegraph:Camera3D' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   Renders the starfield
      ]]></description>
<param><![CDATA[p_oScene The current scene
   ]]></param>
<param><![CDATA[p_oCamera The current camera
   ]]></param>
</method>
<method name='resetEvents' fullname='sandy.core.scenegraph:StarField/private:resetEvents' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='container' fullname='sandy.core.scenegraph:StarField/container/get' isStatic='false' isFinal='false' isOverride='false'  result_type='flash.display:Sprite'>
<description><![CDATA[
   The container of this object
   ]]></description>
</method>
<method name='depth' fullname='sandy.core.scenegraph:StarField/depth/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
<description><![CDATA[
   The depth to draw the starfield at. If depthIndex is set to valid value,
   depth returns distance to that star, otherwise value set by user (default: 1e10).
   ]]></description>
</method>
<method name='material' fullname='sandy.core.scenegraph:StarField/material/get' isStatic='false' isFinal='false' isOverride='false'  result_type='sandy.materials:Material'>
</method>
<method name='depth' fullname='sandy.core.scenegraph:StarField/depth/set' isStatic='false' isFinal='false' isOverride='false'  param_names='p_nDepth' param_types='Number' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</method>
<field name='_vx' fullname='sandy.core.scenegraph:StarField/private:_vx' type='sandy.core.data:Vertex' isStatic='false' isConst='false' >
</field>
<field name='depthIndex' fullname='sandy.core.scenegraph:StarField/depthIndex' type='int' isStatic='false' isConst='false' defaultValue='-1' >
<description><![CDATA[
   An index in stars array; if set to valid value, depth returns distance to that star.
   ]]></description>
</field>
<field name='fadeFrom' fullname='sandy.core.scenegraph:StarField/fadeFrom' type='Number' isStatic='false' isConst='false' defaultValue='0' >
<description><![CDATA[
   Distance from screen where stars start to fade out
   ]]></description>
</field>
<field name='fadeTo' fullname='sandy.core.scenegraph:StarField/fadeTo' type='Number' isStatic='false' isConst='false' defaultValue='1000' >
<description><![CDATA[
   Distance from fadeFrom to the point where stars fade out completely
   ]]></description>
</field>
<field name='m_nDepth' fullname='sandy.core.scenegraph:StarField/private:m_nDepth' type='Number' isStatic='false' isConst='false' defaultValue='1e10' >
</field>
<field name='m_oBitmap' fullname='sandy.core.scenegraph:StarField/private:m_oBitmap' type='flash.display:Bitmap' isStatic='false' isConst='false' >
</field>
<field name='m_oBitmapData' fullname='sandy.core.scenegraph:StarField/private:m_oBitmapData' type='flash.display:BitmapData' isStatic='false' isConst='false' >
</field>
<field name='m_oColorTransform' fullname='sandy.core.scenegraph:StarField/private:m_oColorTransform' type='flash.geom:ColorTransform' isStatic='false' isConst='false' defaultValue='' >
</field>
<field name='m_oContainer' fullname='sandy.core.scenegraph:StarField/private:m_oContainer' type='flash.display:Sprite' isStatic='false' isConst='false' >
</field>
<field name='m_oEventAfter' fullname='sandy.core.scenegraph:StarField/private:m_oEventAfter' type='sandy.events:StarFieldRenderEvent' isStatic='false' isConst='false' >
</field>
<field name='m_oEventBefore' fullname='sandy.core.scenegraph:StarField/private:m_oEventBefore' type='sandy.events:StarFieldRenderEvent' isStatic='false' isConst='false' >
</field>
<field name='m_oMatrix' fullname='sandy.core.scenegraph:StarField/private:m_oMatrix' type='flash.geom:Matrix' isStatic='false' isConst='false' defaultValue='' >
</field>
<field name='m_sBlendMode' fullname='sandy.core.scenegraph:StarField/private:m_sBlendMode' type='String' isStatic='false' isConst='false' defaultValue='' >
</field>
<field name='starColors' fullname='sandy.core.scenegraph:StarField/starColors' type='Array' isStatic='false' isConst='false' defaultValue='unknown' >
<description><![CDATA[
   Array of star colors (if not specified, white is used).
   ]]></description>
</field>
<field name='starSprites' fullname='sandy.core.scenegraph:StarField/starSprites' type='Array' isStatic='false' isConst='false' defaultValue='unknown' >
<description><![CDATA[
   Array of star sprites (any IBitmapDrawable-s; if not specified, StarField uses setPixel to draw a star).
      <p>Star sprites are affected by corresponding starColors value; for DisplayObject-s, StarField will use
   their blendMode to draw them.</p>
   ]]></description>
</field>
<field name='stars' fullname='sandy.core.scenegraph:StarField/stars' type='Array' isStatic='false' isConst='false' defaultValue='unknown' >
<description><![CDATA[
   Array of Vertex - star coordinates data.
   ]]></description>
</field>
<classRec name='Sprite3D' fullname='sandy.core.scenegraph:Sprite3D' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\core\scenegraph\Sprite3D.as' namespace='sandy.core.scenegraph' access='public' baseclass='sandy.core.scenegraph:Sprite2D' isFinal='false' isDynamic='false' >
<description><![CDATA[
  The Sprite3D class is used to create a 3D sprite.
    <p>A Sprite3D can be seen as a special Sprite2D.<br/>
  It has an appearance that is a movie clip containing 360 frames (as maximum!) with texture.</p>
    <p>Depending on the camera position, a different frame of the clip is shown, givin a 3D effect.<p/>
    ]]></description>
<author><![CDATA[ Thomas Pfeiffer - kiroukou
  ]]></author>
<version><![CDATA[ 3.1
  ]]></version>
<date><![CDATA[  20.05.2006
  ]]></date>
</classRec>
<method name='Sprite3D' fullname='sandy.core.scenegraph:Sprite3D/Sprite3D' isStatic='false' isFinal='false' isOverride='false'  param_names='p_sName;p_oContent;p_nScale;p_nOffset' param_types='String;flash.display:MovieClip;Number;Number' param_defaults=';null;1;0' result_type='*'>
<description><![CDATA[
    Creates a Sprite3D
      ]]></description>
<param><![CDATA[p_sName  A string identifier for this object
   ]]></param>
<param><![CDATA[p_oContent The Movieclip containing the pre-rendered textures
   ]]></param>
<param><![CDATA[p_nScale  A number used to change the scale of the displayed object.
      In case that the object projected dimension
     isn't adapted to your needs.
     Default value is 1.0 which means unchanged.
      A value of 2.0 will double object size.
      A value of 0 will force original graphics size independent of distance.
      ]]></param>
<param><![CDATA[p_nOffset  A number between [0-360] to give angle offset into the clip.
   ]]></param>
</method>
<method name='__frameFromAngle' fullname='sandy.core.scenegraph:Sprite3D/private:__frameFromAngle' isStatic='false' isFinal='false' isOverride='false'  param_names='a' param_types='Number' param_defaults='undefined' result_type='uint'>
</method>
<method name='display' fullname='sandy.core.scenegraph:Sprite3D/display' isStatic='false' isFinal='false' isOverride='true'  param_names='p_oContainer' param_types='flash.display:Sprite' param_defaults='null' result_type='void'>
</method>
<method name='content' fullname='sandy.core.scenegraph:Sprite3D/content/set' isStatic='false' isFinal='false' isOverride='true'  param_names='p_content' param_types='flash.display:DisplayObject' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   The MovieClip that will used as content of this Sprite2D. 
   If this MovieClip has already a scree position, it will be reseted to 0,0.
   
   ]]></description>
<param><![CDATA[p_content The MovieClip to attach to the Sprite3D#container. 
   ]]></param>
</method>
<field name='m_nAutoOffset' fullname='sandy.core.scenegraph:Sprite3D/private:m_nAutoOffset' type='Number' isStatic='false' isConst='false' >
</field>
<field name='offset' fullname='sandy.core.scenegraph:Sprite3D/offset' type='uint' isStatic='false' isConst='false' defaultValue='0' >
</field>
<classRec name='BBox' fullname='sandy.bounds:BBox' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\bounds\BBox.as' namespace='sandy.bounds' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
  The BBox class is used to quickly and easily clip an object in a 3D scene.
  <p>It creates a bounding box that contains the whole object.</p>
  
  ]]></description>
<author><![CDATA[ Thomas Pfeiffer - kiroukou
  ]]></author>
<example><![CDATA[ This example is taken from the Shape3D class. It is used in
      the <code>updateBoundingVolumes()</code> method:
      <listing version="3.1">
       _oBBox = BBox.create( m_oGeometry.aVertex );
    </listing>
    ]]></example>
<version><![CDATA[ 3.1
  ]]></version>
<date><![CDATA[  22.03.2006
  ]]></date>
</classRec>
<method name='BBox' fullname='sandy.bounds:BBox/BBox' isStatic='false' isFinal='false' isOverride='false'  param_names='p_min;p_max' param_types='sandy.core.data:Point3D;sandy.core.data:Point3D' param_defaults='null;null' result_type='*'>
<description><![CDATA[
   Creates a new BBox instance.
   
   ]]></description>
<param><![CDATA[p_min  A Point3D representing the lowest point of the cube volume.
   ]]></param>
<param><![CDATA[p_max  A Point3D representing the highest point of the cube volume.
   ]]></param>
</method>
<method name='addInternalPoint' fullname='sandy.bounds:BBox/addInternalPoint' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oPoint' param_types='sandy.core.data:Point3D' param_defaults='undefined' result_type='void'>
</method>
<method name='addInternalPointXYZ' fullname='sandy.bounds:BBox/addInternalPointXYZ' isStatic='false' isFinal='false' isOverride='false'  param_names='x;y;z' param_types='Number;Number;Number' param_defaults='undefined;undefined;undefined' result_type='void'>
</method>
<method name='clone' fullname='sandy.bounds:BBox/clone' isStatic='false' isFinal='false' isOverride='false'  result_type='sandy.bounds:BBox'>
<description><![CDATA[
   Returns a new BBox object that is a clone of the original instance. 
   
   ]]></description>
<return><![CDATA[A new BBox object that is identical to the original. 
   ]]></return>
</method>
<method name='create' fullname='sandy.bounds:BBox/create' isStatic='true' isFinal='false' isOverride='false'  param_names='p_aVertices' param_types='Array' param_defaults='undefined' result_type='sandy.bounds:BBox'>
<description><![CDATA[
   Creates a bounding box that encloses a 3D from an Array of the object's vertices.
   
   ]]></description>
<param><![CDATA[p_aVertices  The vertices of the 3D object the bounding box will contain.
      ]]></param>
<return><![CDATA[The BBox instance.
   ]]></return>
</method>
<method name='getCenter' fullname='sandy.bounds:BBox/getCenter' isStatic='false' isFinal='false' isOverride='false'  result_type='sandy.core.data:Point3D'>
<description><![CDATA[
   Returns the center of the bounding box volume.
   
   ]]></description>
<return><![CDATA[A Point3D representing the center of the bounding box.
   ]]></return>
</method>
<method name='getEdges' fullname='sandy.bounds:BBox/getEdges' isStatic='false' isFinal='false' isOverride='false'  param_names='edges' param_types='Array' param_defaults='undefined' result_type='void'>
</method>
<method name='getSize' fullname='sandy.bounds:BBox/getSize' isStatic='false' isFinal='false' isOverride='false'  result_type='sandy.core.data:Point3D'>
<description><![CDATA[
   Returns the size of the bounding box.
   
   ]]></description>
<return><![CDATA[A Point3D object representing the size of the volume in three dimensions.
   ]]></return>
</method>
<method name='intersectsBox' fullname='sandy.bounds:BBox/intersectsBox' isStatic='false' isFinal='false' isOverride='false'  param_names='box' param_types='sandy.bounds:BBox' param_defaults='undefined' result_type='Boolean'>
</method>
<method name='isPointInsideXYZ' fullname='sandy.bounds:BBox/isPointInsideXYZ' isStatic='false' isFinal='false' isOverride='false'  param_names='x;y;z' param_types='Number;Number;Number' param_defaults='undefined;undefined;undefined' result_type='Boolean'>
</method>
<method name='isPointTotalInside' fullname='sandy.bounds:BBox/isPointTotalInside' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oPoint' param_types='sandy.core.data:Point3D' param_defaults='undefined' result_type='Boolean'>
</method>
<method name='merge' fullname='sandy.bounds:BBox/merge' isStatic='false' isFinal='false' isOverride='false'  param_names='box' param_types='sandy.bounds:BBox' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   Merge the current BoundingBox with the one given in argument
   ]]></description>
<param><![CDATA[pBounds The BBox object to merge the current BBox with
   ]]></param>
</method>
<method name='reset' fullname='sandy.bounds:BBox/reset' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
   Reset the current bounding box to an empoty box with 0,0,0 as max and min values
   ]]></description>
</method>
<method name='toString' fullname='sandy.bounds:BBox/toString' isStatic='false' isFinal='false' isOverride='false'  param_names='decPlaces' param_types='Number' param_defaults='0' result_type='String'>
<description><![CDATA[
   Returns a string representation of this object.
      ]]></description>
<return><![CDATA[The fully qualified name of this object.
   ]]></return>
</method>
<method name='transform' fullname='sandy.bounds:BBox/transform' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oMatrix' param_types='sandy.core.data:Matrix4' param_defaults='undefined' result_type='sandy.bounds:BBox'>
<description><![CDATA[
      Applies a transformation to the bounding box.
      
      ]]></description>
<param><![CDATA[p_oMatrix  The transformation matrix.
      ]]></param>
<return><![CDATA[the transformed Bounding box
      ]]></return>
</method>
<field name='maxEdge' fullname='sandy.bounds:BBox/maxEdge' type='sandy.core.data:Point3D' isStatic='false' isConst='false' >
<description><![CDATA[
   A Point3D representing the highest point of the cube volume.
   ]]></description>
</field>
<field name='minEdge' fullname='sandy.bounds:BBox/minEdge' type='sandy.core.data:Point3D' isStatic='false' isConst='false' >
<description><![CDATA[
   A Point3D representing the lowest point of the cube volume.
   ]]></description>
</field>
<field name='uptodate' fullname='sandy.bounds:BBox/uptodate' type='Boolean' isStatic='false' isConst='false' defaultValue='false' >
<description><![CDATA[
   Specifies if this object's boundaries are up to date with the object it is enclosing.
   If <code>false</code>, this object's <code>transform()</code> method must be called to get its updated boundaries in the current frame.
   ]]></description>
</field>
<classRec name='BSphere' fullname='sandy.bounds:BSphere' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\bounds\BSphere.as' namespace='sandy.bounds' access='public' baseclass='Object' isFinal='true' isDynamic='false' >
<description><![CDATA[
  The BSphere class is used to quickly and easily clip an object in a 3D scene.
  <p>It creates a bounding sphere that contains the whole object</p>
  
  ]]></description>
<author><![CDATA[ Thomas Pfeiffer - kiroukou
  ]]></author>
<example><![CDATA[ This example is taken from the Shape3D class. It is used in
      the <code>updateBoundingVolumes()</code> method:
      <listing version="3.1">
       _oBSphere = BSphere.create( m_oGeometry.aVertex );
    </listing>
    ]]></example>
<version><![CDATA[ 3.1
  ]]></version>
<date><![CDATA[  22.03.2006
  ]]></date>
</classRec>
<method name='BSphere' fullname='sandy.bounds:BSphere/BSphere' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
   Creates a new BSphere instance.</p>
   ]]></description>
</method>
<method name='compute' fullname='sandy.bounds:BSphere/compute' isStatic='false' isFinal='false' isOverride='false'  param_names='p_aVertices' param_types='Array' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   Computes of the bounding sphere's center and radius.
   
   ]]></description>
<param><![CDATA[p_aVertices  The vertices of the 3D object the bounding sphere will contain.
   ]]></param>
</method>
<method name='computeRadius' fullname='sandy.bounds:BSphere/private:computeRadius' isStatic='false' isFinal='false' isOverride='false'  param_names='p_aPoints' param_types='Array' param_defaults='undefined' result_type='Number'>
<description><![CDATA[
   Computes the bounding sphere's radius.
   
   ]]></description>
<param><![CDATA[p_aPoints  An Array containing the bounding sphere's points.
      ]]></param>
<return><![CDATA[The bounding sphere's radius.
   ]]></return>
</method>
<method name='create' fullname='sandy.bounds:BSphere/create' isStatic='true' isFinal='false' isOverride='false'  param_names='p_aVertices' param_types='Array' param_defaults='undefined' result_type='sandy.bounds:BSphere'>
<description><![CDATA[
   Creates a bounding sphere that encloses a 3D from an Array of the object's vertices.
   
   ]]></description>
<param><![CDATA[p_aVertices  The vertices of the 3D object the bounding sphere will contain.
   ]]></param>
<return><![CDATA[     The BSphere instance.
   ]]></return>
</method>
<method name='distance' fullname='sandy.bounds:BSphere/distance' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oPoint' param_types='sandy.core.data:Point3D' param_defaults='undefined' result_type='Number'>
<description><![CDATA[
   Returns the distance of a Point3D from the surface of the bounding sphere.
   The number returned will be positive if the Point3D is outside the sphere,
   negative if inside, or <code>0</code> if on the surface of the sphere.
   
   ]]></description>
<return><![CDATA[The distance from the bounding sphere to the Point3D.
   ]]></return>
</method>
<method name='pointsOutofSphere' fullname='sandy.bounds:BSphere/private:pointsOutofSphere' isStatic='false' isFinal='false' isOverride='false'  param_names='p_aPoints' param_types='Array' param_defaults='undefined' result_type='Array'>
<description><![CDATA[
   Return the positions of the array of Position p that are outside the BoundingSphere.
   
   ]]></description>
<param><![CDATA[ An array containing the points to test
    ]]></param>
<return><![CDATA[ An array of points containing those that are outside. The array has a length 
       of 0 if all the points are inside or on the surface.
   ]]></return>
</method>
<method name='reset' fullname='sandy.bounds:BSphere/reset' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
   Reset the current bounding box to an empoty box with 0,0,0 as max and min values
   ]]></description>
</method>
<method name='resetFromBox' fullname='sandy.bounds:BSphere/resetFromBox' isStatic='false' isFinal='false' isOverride='false'  param_names='box' param_types='sandy.bounds:BBox' param_defaults='undefined' result_type='void'>
</method>
<method name='toString' fullname='sandy.bounds:BSphere/toString' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[
   Returns a string representation of this object.
      ]]></description>
<return><![CDATA[The fully qualified name of this object.
   ]]></return>
</method>
<method name='transform' fullname='sandy.bounds:BSphere/transform' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oMatrix' param_types='sandy.core.data:Matrix4' param_defaults='undefined' result_type='void'>
<description><![CDATA[
      Applies a transformation to the bounding sphere.
      
      ]]></description>
<param><![CDATA[p_oMatrix  The transformation matrix.
      ]]></param>
</method>
<field name='center' fullname='sandy.bounds:BSphere/center' type='sandy.core.data:Point3D' isStatic='false' isConst='false' defaultValue='' >
<description><![CDATA[
   A Point3D representing the center of the bounding sphere.
   ]]></description>
</field>
<field name='position' fullname='sandy.bounds:BSphere/position' type='sandy.core.data:Point3D' isStatic='false' isConst='false' defaultValue='' >
</field>
<field name='radius' fullname='sandy.bounds:BSphere/radius' type='Number' isStatic='false' isConst='false' defaultValue='1' >
<description><![CDATA[
   The radius of the bounding sphere.
   ]]></description>
</field>
<field name='uptodate' fullname='sandy.bounds:BSphere/uptodate' type='Boolean' isStatic='false' isConst='false' defaultValue='false' >
<description><![CDATA[
   Specifies if this object's boundaries are up to date with the object it is enclosing.
   If <code>false</code>, this object's <code>transform()</code> method must be called to get its updated boundaries in the current frame.
   ]]></description>
</field>
<classRec name='Light3D' fullname='sandy.core.light:Light3D' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\core\light\Light3D.as' namespace='sandy.core.light' access='public' baseclass='flash.events:EventDispatcher' isFinal='false' isDynamic='false' >
<description><![CDATA[
  The Light3D class is used for creating the light of the world.
    <p>The light in Sandy is a light source at infinity, emitting parallel colored light.
  The direction, color, and intensity of the light can be changes.</p>
    ]]></description>
<author><![CDATA[Thomas Pfeiffer - kiroukou
  ]]></author>
<version><![CDATA[ 3.1
  ]]></version>
<date><![CDATA[ 26.07.2007
  ]]></date>
<metadata>
	<Event owner='sandy.core.light:Light3D' name='lightColorChanged' type='sandy.events.SandyEvent' >
<description><![CDATA[
 Dispatched when the light color is changed.
  ]]></description>
<eventType><![CDATA[sandy.events.SandyEvent.LIGHT_COLOR_CHANGED
 ]]></eventType>
	</Event>
</metadata>
<metadata>
	<Event owner='sandy.core.light:Light3D' name='lightUpdated' type='sandy.events.SandyEvent' >
<description><![CDATA[
 Dispatched when the light is updated.
  ]]></description>
<eventType><![CDATA[sandy.events.SandyEvent.LIGHT_UPDATED
 ]]></eventType>
	</Event>
</metadata>
</classRec>
<method name='Light3D' fullname='sandy.core.light:Light3D/Light3D' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oD;p_nPow' param_types='sandy.core.data:Point3D;Number' param_defaults='undefined;undefined' result_type='*'>
<description><![CDATA[
   Creates a new light source.
      ]]></description>
<param><![CDATA[p_oD  The direction of the emitted light.
   ]]></param>
<param><![CDATA[p_nPow The intensity of the emitted light.
         ]]></param>
<see><![CDATA[sandy.core.data.Point3D
   ]]></see>
</method>
<method name='calculate' fullname='sandy.core.light:Light3D/calculate' isStatic='false' isFinal='false' isOverride='false'  param_names='normal' param_types='sandy.core.data:Point3D' param_defaults='undefined' result_type='Number'>
<description><![CDATA[
   Calculates the strength of this light based on the supplied normal.
      ]]></description>
<return><![CDATA[Number The strength between 0 and 1
         ]]></return>
<see><![CDATA[sandy.core.data.Point3D
   ]]></see>
</method>
<method name='destroy' fullname='sandy.core.light:Light3D/destroy' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
   Not in use...
   ]]></description>
</method>
<method name='getDirectionPoint3D' fullname='sandy.core.light:Light3D/getDirectionPoint3D' isStatic='false' isFinal='false' isOverride='false'  result_type='sandy.core.data:Point3D'>
<description><![CDATA[
   Returns the direction of the light.
      ]]></description>
<return><![CDATA[ The light direction
         ]]></return>
<see><![CDATA[sandy.core.data.Point3D
   ]]></see>
</method>
<method name='getNormalizedPower' fullname='sandy.core.light:Light3D/getNormalizedPower' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
<description><![CDATA[
   Returns the power of the light normalized to the range 0 -> 1
      ]]></description>
<return><![CDATA[Number a number between 0 and 1
   ]]></return>
</method>
<method name='getPower' fullname='sandy.core.light:Light3D/getPower' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
<description><![CDATA[
   Returns the intensity of the light.
      ]]></description>
<return><![CDATA[The intensity as a number between 0 - MAX_POWER.
   ]]></return>
</method>
<method name='setDirection' fullname='sandy.core.light:Light3D/setDirection' isStatic='false' isFinal='false' isOverride='false'  param_names='x;y;z' param_types='Number;Number;Number' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
   Uneeded? setDirectionPoint3D() does the same thing...
      ]]></description>
<param><![CDATA[x The x coordinate
   ]]></param>
<param><![CDATA[y The y coordinate
   ]]></param>
<param><![CDATA[z The z coordinate
   ]]></param>
</method>
<method name='setDirectionPoint3D' fullname='sandy.core.light:Light3D/setDirectionPoint3D' isStatic='false' isFinal='false' isOverride='false'  param_names='pDir' param_types='sandy.core.data:Point3D' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   Sets the direction of the Light3D.
      ]]></description>
<param><![CDATA[x A Point3D object representing the direction of the light.
         ]]></param>
<see><![CDATA[sandy.core.data.Point3D
   ]]></see>
</method>
<method name='setPower' fullname='sandy.core.light:Light3D/setPower' isStatic='false' isFinal='false' isOverride='false'  param_names='p_nPow' param_types='Number' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   The the power of the light. A number between 0 and MAX_POWER is necessary.
   The highter the power of the light is, the less the shadows are visibles.
      ]]></description>
<param><![CDATA[n Number a Number between 0 and MAX_POWER. This number is the light intensity.
   ]]></param>
</method>
<method name='color' fullname='sandy.core.light:Light3D/color/get' isStatic='false' isFinal='false' isOverride='false'  result_type='uint'>
<description><![CDATA[
   The color of the light.
   ]]></description>
</method>
<method name='color' fullname='sandy.core.light:Light3D/color/set' isStatic='false' isFinal='false' isOverride='false'  param_names='p_nColor' param_types='uint' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</method>
<field name='MAX_POWER' fullname='sandy.core.light:Light3D/MAX_POWER' type='Number' isStatic='true' isConst='true' defaultValue='150' >
<description><![CDATA[
  Maximum value accepted for the power of the light.
  Be aware that even if this constant is changed, the actual lighting calculations are normalized
  (<code>0</code> - <code>MAX_POWER</code> becomes <code>0</code> -> <code>1</code>).
  ]]></description>
</field>
<field name='_color' fullname='sandy.core.light:Light3D/private:_color' type='uint' isStatic='false' isConst='false' >
</field>
<field name='_dir' fullname='sandy.core.light:Light3D/private:_dir' type='sandy.core.data:Point3D' isStatic='false' isConst='false' >
</field>
<field name='_nPower' fullname='sandy.core.light:Light3D/private:_nPower' type='Number' isStatic='false' isConst='false' >
</field>
<field name='_power' fullname='sandy.core.light:Light3D/private:_power' type='Number' isStatic='false' isConst='false' >
</field>
<field name='changed' fullname='sandy.core.light:Light3D/changed' type='Boolean' isStatic='false' isConst='false' >
<description><![CDATA[
   Public property which stores the modification of that light instance in case it changed.
   It is useful for the cache system
   ]]></description>
</field>
<classRec name='TextLink' fullname='sandy.core.interaction:TextLink' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\core\interaction\TextLink.as' namespace='sandy.core.interaction' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
</classRec>
<method name='TextLink' fullname='sandy.core.interaction:TextLink/TextLink' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
</method>
<method name='_init' fullname='sandy.core.interaction:TextLink/protected:_init' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='getBounds' fullname='sandy.core.interaction:TextLink/getBounds' isStatic='false' isFinal='false' isOverride='false'  result_type='flash.geom:Rectangle'>
</method>
<method name='getTextLinks' fullname='sandy.core.interaction:TextLink/getTextLinks' isStatic='true' isFinal='false' isOverride='false'  param_names='t;force' param_types='flash.text:TextField;Boolean' param_defaults='undefined;false' result_type='Array'>
<description><![CDATA[
   Return an array of textlinks
   ]]></description>
<param><![CDATA[t
   ]]></param>
<return><![CDATA[   ]]></return>
</method>
<method name='closeIndex' fullname='sandy.core.interaction:TextLink/closeIndex/get' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
</method>
<method name='href' fullname='sandy.core.interaction:TextLink/href/get' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
</method>
<method name='openIndex' fullname='sandy.core.interaction:TextLink/openIndex/get' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
</method>
<method name='owner' fullname='sandy.core.interaction:TextLink/owner/get' isStatic='false' isFinal='false' isOverride='false'  result_type='flash.text:TextField'>
</method>
<method name='target' fullname='sandy.core.interaction:TextLink/target/get' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
</method>
<method name='closeIndex' fullname='sandy.core.interaction:TextLink/closeIndex/set' isStatic='false' isFinal='false' isOverride='false'  param_names='i' param_types='int' param_defaults='undefined' result_type='void'>
</method>
<method name='href' fullname='sandy.core.interaction:TextLink/href/set' isStatic='false' isFinal='false' isOverride='false'  param_names='s' param_types='String' param_defaults='undefined' result_type='void'>
</method>
<method name='openIndex' fullname='sandy.core.interaction:TextLink/openIndex/set' isStatic='false' isFinal='false' isOverride='false'  param_names='i' param_types='int' param_defaults='undefined' result_type='void'>
</method>
<method name='owner' fullname='sandy.core.interaction:TextLink/owner/set' isStatic='false' isFinal='false' isOverride='false'  param_names='tf' param_types='flash.text:TextField' param_defaults='undefined' result_type='void'>
</method>
<method name='target' fullname='sandy.core.interaction:TextLink/target/set' isStatic='false' isFinal='false' isOverride='false'  param_names='s' param_types='String' param_defaults='undefined' result_type='void'>
</method>
<field name='__iCloseIndex' fullname='sandy.core.interaction:TextLink/private:__iCloseIndex' type='int' isStatic='false' isConst='false' >
</field>
<field name='__iOpenIndex' fullname='sandy.core.interaction:TextLink/private:__iOpenIndex' type='int' isStatic='false' isConst='false' >
</field>
<field name='__rBounds' fullname='sandy.core.interaction:TextLink/private:__rBounds' type='flash.geom:Rectangle' isStatic='false' isConst='false' >
</field>
<field name='__sHRef' fullname='sandy.core.interaction:TextLink/private:__sHRef' type='String' isStatic='false' isConst='false' >
</field>
<field name='__sTarget' fullname='sandy.core.interaction:TextLink/private:__sTarget' type='String' isStatic='false' isConst='false' >
</field>
<field name='__tfOwner' fullname='sandy.core.interaction:TextLink/private:__tfOwner' type='flash.text:TextField' isStatic='false' isConst='false' >
</field>
<field name='height' fullname='sandy.core.interaction:TextLink/height' type='Number' isStatic='false' isConst='false' >
</field>
<field name='textLinks' fullname='sandy.core.interaction:TextLink/textLinks' type='flash.utils:Dictionary' isStatic='true' isConst='false' >
</field>
<field name='width' fullname='sandy.core.interaction:TextLink/width' type='Number' isStatic='false' isConst='false' >
</field>
<field name='x' fullname='sandy.core.interaction:TextLink/x' type='Number' isStatic='false' isConst='false' >
</field>
<field name='y' fullname='sandy.core.interaction:TextLink/y' type='Number' isStatic='false' isConst='false' >
</field>
<classRec name='VirtualMouse' fullname='sandy.core.interaction:VirtualMouse' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\core\interaction\VirtualMouse.as' namespace='sandy.core.interaction' access='public' baseclass='flash.events:EventDispatcher' isFinal='false' isDynamic='false' >
<description><![CDATA[
  VirtualMouse interacting with MovieMaterial
  Based on the VirtualMouse by senocular
    ]]></description>
<author><![CDATA[ Xavier MARTIN - zeflasher - http://dev.webbymx.net
  ]]></author>
<author><![CDATA[ Thomas PFEIFFER - kiroukou
  ]]></author>
<version><![CDATA[ 3.1
  ]]></version>
<date><![CDATA[  24.10.2007
  ]]></date>
</classRec>
<method name='VirtualMouse' fullname='sandy.core.interaction:VirtualMouse/VirtualMouse' isStatic='false' isFinal='false' isOverride='false'  param_names='access' param_types='VirtualMouse.as$58:PrivateConstructorAccess' param_defaults='undefined' result_type='*'>
</method>
<method name='_checkLinks' fullname='sandy.core.interaction:VirtualMouse/private:_checkLinks' isStatic='false' isFinal='false' isOverride='false'  param_names='tf' param_types='flash.text:TextField' param_defaults='undefined' result_type='void'>
</method>
<method name='getInstance' fullname='sandy.core.interaction:VirtualMouse/getInstance' isStatic='true' isFinal='false' isOverride='false'  result_type='sandy.core.interaction:VirtualMouse'>
</method>
<method name='interactWithTexture' fullname='sandy.core.interaction:VirtualMouse/interactWithTexture' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oPoly;p_uvTexture;p_event' param_types='sandy.core.data:Polygon;sandy.core.data:UVCoord;flash.events:MouseEvent' param_defaults='undefined;undefined;undefined' result_type='void'>
</method>
<field name='_lastEvent' fullname='sandy.core.interaction:VirtualMouse/private:_lastEvent' type='flash.events:Event' isStatic='false' isConst='false' >
</field>
<field name='_oI' fullname='sandy.core.interaction:VirtualMouse/private:_oI' type='sandy.core.interaction:VirtualMouse' isStatic='true' isConst='false' >
</field>
<field name='lastDownTarget' fullname='sandy.core.interaction:VirtualMouse/private:lastDownTarget' type='flash.display:InteractiveObject' isStatic='false' isConst='false' >
</field>
<field name='lastLocation' fullname='sandy.core.interaction:VirtualMouse/private:lastLocation' type='flash.geom:Point' isStatic='false' isConst='false' >
</field>
<field name='lastWithinStage' fullname='sandy.core.interaction:VirtualMouse/private:lastWithinStage' type='Boolean' isStatic='false' isConst='false' defaultValue='true' >
</field>
<field name='location' fullname='sandy.core.interaction:VirtualMouse/private:location' type='flash.geom:Point' isStatic='false' isConst='false' >
</field>
<field name='m_ioOldTarget' fullname='sandy.core.interaction:VirtualMouse/private:m_ioOldTarget' type='flash.display:Sprite' isStatic='false' isConst='false' >
</field>
<field name='m_ioTarget' fullname='sandy.core.interaction:VirtualMouse/private:m_ioTarget' type='flash.display:Sprite' isStatic='false' isConst='false' >
</field>
<field name='m_oCurrentTargets' fullname='sandy.core.interaction:VirtualMouse/private:m_oCurrentTargets' type='Array' isStatic='false' isConst='false' defaultValue='unknown' >
</field>
<field name='m_oPreviousTargets' fullname='sandy.core.interaction:VirtualMouse/private:m_oPreviousTargets' type='Array' isStatic='false' isConst='false' defaultValue='unknown' >
</field>
<classRec name='CameraMode7' fullname='sandy.core.scenegraph.mode7:CameraMode7' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\core\scenegraph\mode7\CameraMode7.as' namespace='sandy.core.scenegraph.mode7' access='public' baseclass='sandy.core.scenegraph:Camera3D' isFinal='false' isDynamic='false' >
<description><![CDATA[
  CameraMode7 behaves like Camera3D, but with some constraints:
  - rotations are available only by the rotateY and tilt methods (other are desactivated)
  - the lookAt method is overrided to respect the available rotations
  ]]></description>
<author><![CDATA[Cedric Jules
  ]]></author>
</classRec>
<method name='CameraMode7' fullname='sandy.core.scenegraph.mode7:CameraMode7/CameraMode7' isStatic='false' isFinal='false' isOverride='false'  param_names='p_nWidth;p_nHeight;p_nFov;p_nNear;p_nFar' param_types='Number;Number;Number;Number;Number' param_defaults='undefined;undefined;45;50;10000' result_type='*'>
</method>
<method name='lookAt' fullname='sandy.core.scenegraph.mode7:CameraMode7/lookAt' isStatic='false' isFinal='false' isOverride='true'  param_names='p_nX;p_nY;p_nZ' param_types='Number;Number;Number' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
   
   Makes this object "look at" the specified position in the parent frame.
      <p>Useful for following a moving object or a static object while this object is moving.<br/>
   Normally used when this object is a camera</p>
      ]]></description>
<param><![CDATA[p_nX Number The x position to look at
   ]]></param>
<param><![CDATA[p_nY Number The y position to look at
   ]]></param>
<param><![CDATA[p_nZ Number The z position to look at
   ]]></param>
</method>
<method name='rotateAxis' fullname='sandy.core.scenegraph.mode7:CameraMode7/rotateAxis' isStatic='false' isFinal='false' isOverride='true'  param_names='p_nX;p_nY;p_nZ;p_nAngle' param_types='Number;Number;Number;Number' param_defaults='undefined;undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='horizon' fullname='sandy.core.scenegraph.mode7:CameraMode7/horizon/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
</method>
<method name='horizon' fullname='sandy.core.scenegraph.mode7:CameraMode7/horizon/set' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='Number' param_defaults='undefined' result_type='void'>
</method>
<method name='pan' fullname='sandy.core.scenegraph.mode7:CameraMode7/pan/set' isStatic='false' isFinal='false' isOverride='true'  param_names='p_nAngle' param_types='Number' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='roll' fullname='sandy.core.scenegraph.mode7:CameraMode7/roll/set' isStatic='false' isFinal='false' isOverride='true'  param_names='p_nAngle' param_types='Number' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='rotateX' fullname='sandy.core.scenegraph.mode7:CameraMode7/rotateX/set' isStatic='false' isFinal='false' isOverride='true'  param_names='p_nAngle' param_types='Number' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='rotateZ' fullname='sandy.core.scenegraph.mode7:CameraMode7/rotateZ/set' isStatic='false' isFinal='false' isOverride='true'  param_names='p_nAngle' param_types='Number' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</method>
<field name='PI' fullname='sandy.core.scenegraph.mode7:CameraMode7/private:PI' type='Number' isStatic='false' isConst='true' defaultValue='3.141592653589793' >
</field>
<field name='PIon180' fullname='sandy.core.scenegraph.mode7:CameraMode7/private:PIon180' type='Number' isStatic='false' isConst='true' defaultValue='0.017453292519943295' >
</field>
<field name='_horizon' fullname='sandy.core.scenegraph.mode7:CameraMode7/private:_horizon' type='Number' isStatic='false' isConst='false' >
</field>
<field name='_tiltAngle' fullname='sandy.core.scenegraph.mode7:CameraMode7/private:_tiltAngle' type='Number' isStatic='false' isConst='false' >
</field>
<field name='_xTarget' fullname='sandy.core.scenegraph.mode7:CameraMode7/private:_xTarget' type='Number' isStatic='false' isConst='false' >
</field>
<field name='_yAngle' fullname='sandy.core.scenegraph.mode7:CameraMode7/private:_yAngle' type='Number' isStatic='false' isConst='false' >
</field>
<field name='_yTarget' fullname='sandy.core.scenegraph.mode7:CameraMode7/private:_yTarget' type='Number' isStatic='false' isConst='false' >
</field>
<field name='_zTarget' fullname='sandy.core.scenegraph.mode7:CameraMode7/private:_zTarget' type='Number' isStatic='false' isConst='false' >
</field>
<field name='_zTargetBis' fullname='sandy.core.scenegraph.mode7:CameraMode7/private:_zTargetBis' type='Number' isStatic='false' isConst='false' >
</field>
<field name='aTan2' fullname='sandy.core.scenegraph.mode7:CameraMode7/private:aTan2' type='Function' isStatic='false' isConst='true' defaultValue='' >
</field>
<field name='cos' fullname='sandy.core.scenegraph.mode7:CameraMode7/private:cos' type='Function' isStatic='false' isConst='true' defaultValue='' >
</field>
<field name='sin' fullname='sandy.core.scenegraph.mode7:CameraMode7/private:sin' type='Function' isStatic='false' isConst='true' defaultValue='' >
</field>
<classRec name='Mode7' fullname='sandy.core.scenegraph.mode7:Mode7' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\core\scenegraph\mode7\Mode7.as' namespace='sandy.core.scenegraph.mode7' access='public' baseclass='sandy.core.scenegraph:Node' interfaces='sandy.core.scenegraph:Renderable;sandy.core.scenegraph:IDisplayable' isFinal='false' isDynamic='false' >
<description><![CDATA[
  This class is very useful to render infinite floor with good rendering quality and perspective correction.
  This kind of rendering is used in some games like earlier version of MarioKart or other Racing games.
  It replace successfully a big plane with perspective correction enabled on it.
  ]]></description>
<author><![CDATA[Cedric Jules
  ]]></author>
<author><![CDATA[Makc
  ]]></author>
</classRec>
<method name='Mode7' fullname='sandy.core.scenegraph.mode7:Mode7/Mode7' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
</method>
<method name='clear' fullname='sandy.core.scenegraph.mode7:Mode7/clear' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
   Clears the container information
   ]]></description>
</method>
<method name='cull' fullname='sandy.core.scenegraph.mode7:Mode7/cull' isStatic='false' isFinal='false' isOverride='true'  param_names='p_oFrustum;p_oViewMatrix;p_bChanged' param_types='sandy.view:Frustum;sandy.core.data:Matrix4;Boolean' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
   ]]></description>
<inherited><![CDATA[   ]]></inherited>
</method>
<method name='display' fullname='sandy.core.scenegraph.mode7:Mode7/display' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oContainer' param_types='flash.display:Sprite' param_defaults='null' result_type='void'>
<description><![CDATA[
   ]]></description>
<inherited><![CDATA[   ]]></inherited>
</method>
<method name='getHorizon' fullname='sandy.core.scenegraph.mode7:Mode7/getHorizon' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
<description><![CDATA[
   Returns the horizon value
   ]]></description>
</method>
<method name='render' fullname='sandy.core.scenegraph.mode7:Mode7/render' isStatic='false' isFinal='false' isOverride='false'  param_names='p_oCamera' param_types='sandy.core.scenegraph:Camera3D' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   ]]></description>
<inherited><![CDATA[   ]]></inherited>
</method>
<method name='setBitmap' fullname='sandy.core.scenegraph.mode7:Mode7/setBitmap' isStatic='false' isFinal='false' isOverride='false'  param_names='bmp;scale;repeatMap;smooth' param_types='flash.display:BitmapData;Number;Boolean;Boolean' param_defaults='undefined;1;true;false' result_type='void'>
<description><![CDATA[
   Set the bitmap to apply as floor.
   ]]></description>
<param><![CDATA[bmp The bitmapdata objet which contains floor texture information
   ]]></param>
</method>
<method name='setHorizon' fullname='sandy.core.scenegraph.mode7:Mode7/setHorizon' isStatic='false' isFinal='false' isOverride='false'  param_names='traceHorizon;colorHorizon;horizonWidth' param_types='Boolean;int;Number' param_defaults='true;0x000000;1' result_type='void'>
<description><![CDATA[
   Set the horizontal line display.
   you can use this to debug and/or to calibrate your visual elements
   ]]></description>
</method>
<method name='setNearFar' fullname='sandy.core.scenegraph.mode7:Mode7/setNearFar' isStatic='false' isFinal='false' isOverride='false'  param_names='fromCamera;near;far' param_types='Boolean;Number;Number' param_defaults='undefined;1;1000' result_type='void'>
</method>
<method name='container' fullname='sandy.core.scenegraph.mode7:Mode7/container/get' isStatic='false' isFinal='false' isOverride='false'  result_type='flash.display:Sprite'>
<description><![CDATA[
   Returns the container of that graphical element
   ]]></description>
</method>
<method name='depth' fullname='sandy.core.scenegraph.mode7:Mode7/depth/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
</method>
<method name='material' fullname='sandy.core.scenegraph.mode7:Mode7/material/get' isStatic='false' isFinal='false' isOverride='false'  result_type='sandy.materials:Material'>
</method>
<method name='repeatMap' fullname='sandy.core.scenegraph.mode7:Mode7/repeatMap/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
</method>
<method name='smooth' fullname='sandy.core.scenegraph.mode7:Mode7/smooth/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
</method>
<method name='depth' fullname='sandy.core.scenegraph.mode7:Mode7/depth/set' isStatic='false' isFinal='false' isOverride='false'  param_names='d' param_types='Number' param_defaults='undefined' result_type='void'>
</method>
<method name='repeatMap' fullname='sandy.core.scenegraph.mode7:Mode7/repeatMap/set' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='Boolean' param_defaults='undefined' result_type='void'>
</method>
<method name='smooth' fullname='sandy.core.scenegraph.mode7:Mode7/smooth/set' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='Boolean' param_defaults='undefined' result_type='void'>
</method>
<field name='PI' fullname='sandy.core.scenegraph.mode7:Mode7/private:PI' type='Number' isStatic='false' isConst='true' defaultValue='3.141592653589793' >
</field>
<field name='PIon180' fullname='sandy.core.scenegraph.mode7:Mode7/private:PIon180' type='Number' isStatic='false' isConst='true' defaultValue='0.017453292519943295' >
</field>
<field name='_altitude' fullname='sandy.core.scenegraph.mode7:Mode7/private:_altitude' type='Number' isStatic='false' isConst='false' >
</field>
<field name='_camTiltRadian' fullname='sandy.core.scenegraph.mode7:Mode7/private:_camTiltRadian' type='Number' isStatic='false' isConst='false' >
</field>
<field name='_camera' fullname='sandy.core.scenegraph.mode7:Mode7/private:_camera' type='sandy.core.scenegraph.mode7:CameraMode7' isStatic='false' isConst='false' >
</field>
<field name='_centerMapMatrix' fullname='sandy.core.scenegraph.mode7:Mode7/private:_centerMapMatrix' type='flash.geom:Matrix' isStatic='false' isConst='false' >
</field>
<field name='_colorHorizon' fullname='sandy.core.scenegraph.mode7:Mode7/private:_colorHorizon' type='int' isStatic='false' isConst='false' >
</field>
<field name='_container' fullname='sandy.core.scenegraph.mode7:Mode7/private:_container' type='flash.display:Sprite' isStatic='false' isConst='false' defaultValue='' >
</field>
<field name='_depth' fullname='sandy.core.scenegraph.mode7:Mode7/private:_depth' type='Number' isStatic='false' isConst='false' defaultValue='unknown' >
</field>
<field name='_failColor' fullname='sandy.core.scenegraph.mode7:Mode7/private:_failColor' type='uint' isStatic='false' isConst='false' >
</field>
<field name='_far' fullname='sandy.core.scenegraph.mode7:Mode7/private:_far' type='Number' isStatic='false' isConst='false' >
</field>
<field name='_fov' fullname='sandy.core.scenegraph.mode7:Mode7/private:_fov' type='Number' isStatic='false' isConst='false' >
</field>
<field name='_height' fullname='sandy.core.scenegraph.mode7:Mode7/private:_height' type='Number' isStatic='false' isConst='false' >
</field>
<field name='_horizon' fullname='sandy.core.scenegraph.mode7:Mode7/private:_horizon' type='Number' isStatic='false' isConst='false' >
</field>
<field name='_length' fullname='sandy.core.scenegraph.mode7:Mode7/private:_length' type='Number' isStatic='false' isConst='false' >
</field>
<field name='_lineMatrix' fullname='sandy.core.scenegraph.mode7:Mode7/private:_lineMatrix' type='flash.geom:Matrix' isStatic='false' isConst='false' >
</field>
<field name='_mapMatrix' fullname='sandy.core.scenegraph.mode7:Mode7/private:_mapMatrix' type='flash.geom:Matrix' isStatic='false' isConst='false' >
</field>
<field name='_mapOriginal' fullname='sandy.core.scenegraph.mode7:Mode7/private:_mapOriginal' type='flash.display:BitmapData' isStatic='false' isConst='false' >
</field>
<field name='_near' fullname='sandy.core.scenegraph.mode7:Mode7/private:_near' type='Number' isStatic='false' isConst='false' >
</field>
<field name='_numLines' fullname='sandy.core.scenegraph.mode7:Mode7/private:_numLines' type='int' isStatic='false' isConst='false' >
</field>
<field name='_prevOK' fullname='sandy.core.scenegraph.mode7:Mode7/private:_prevOK' type='Boolean' isStatic='false' isConst='false' >
</field>
<field name='_ratioWidthHeight' fullname='sandy.core.scenegraph.mode7:Mode7/private:_ratioWidthHeight' type='Number' isStatic='false' isConst='false' >
</field>
<field name='_repeatMap' fullname='sandy.core.scenegraph.mode7:Mode7/private:_repeatMap' type='Boolean' isStatic='false' isConst='false' >
</field>
<field name='_scaleMap' fullname='sandy.core.scenegraph.mode7:Mode7/private:_scaleMap' type='Number' isStatic='false' isConst='false' >
</field>
<field name='_smooth' fullname='sandy.core.scenegraph.mode7:Mode7/private:_smooth' type='Boolean' isStatic='false' isConst='false' >
</field>
<field name='_t' fullname='sandy.core.scenegraph.mode7:Mode7/private:_t' type='Number' isStatic='false' isConst='false' >
</field>
<field name='_traceHorizon' fullname='sandy.core.scenegraph.mode7:Mode7/private:_traceHorizon' type='Boolean' isStatic='false' isConst='false' >
</field>
<field name='_useCameraNearFar' fullname='sandy.core.scenegraph.mode7:Mode7/private:_useCameraNearFar' type='Boolean' isStatic='false' isConst='false' >
</field>
<field name='_width' fullname='sandy.core.scenegraph.mode7:Mode7/private:_width' type='Number' isStatic='false' isConst='false' >
</field>
<field name='_widthHorizon' fullname='sandy.core.scenegraph.mode7:Mode7/private:_widthHorizon' type='Number' isStatic='false' isConst='false' >
</field>
<field name='_xAmplitude' fullname='sandy.core.scenegraph.mode7:Mode7/private:_xAmplitude' type='Number' isStatic='false' isConst='false' >
</field>
<field name='_xAmplitudeAvg' fullname='sandy.core.scenegraph.mode7:Mode7/private:_xAmplitudeAvg' type='Number' isStatic='false' isConst='false' >
</field>
<field name='_xAmplitudePrev' fullname='sandy.core.scenegraph.mode7:Mode7/private:_xAmplitudePrev' type='Number' isStatic='false' isConst='false' >
</field>
<field name='_yCurrent' fullname='sandy.core.scenegraph.mode7:Mode7/private:_yCurrent' type='Number' isStatic='false' isConst='false' >
</field>
<field name='_yLength' fullname='sandy.core.scenegraph.mode7:Mode7/private:_yLength' type='Number' isStatic='false' isConst='false' >
</field>
<field name='_yMax' fullname='sandy.core.scenegraph.mode7:Mode7/private:_yMax' type='Number' isStatic='false' isConst='false' >
</field>
<field name='_yMaxTilted' fullname='sandy.core.scenegraph.mode7:Mode7/private:_yMaxTilted' type='Number' isStatic='false' isConst='false' >
</field>
<field name='_yMin' fullname='sandy.core.scenegraph.mode7:Mode7/private:_yMin' type='Number' isStatic='false' isConst='false' >
</field>
<field name='_yMinTilted' fullname='sandy.core.scenegraph.mode7:Mode7/private:_yMinTilted' type='Number' isStatic='false' isConst='false' >
</field>
<field name='_yStep' fullname='sandy.core.scenegraph.mode7:Mode7/private:_yStep' type='Number' isStatic='false' isConst='false' >
</field>
<field name='_zAmplitude' fullname='sandy.core.scenegraph.mode7:Mode7/private:_zAmplitude' type='Number' isStatic='false' isConst='false' >
</field>
<field name='_zCurrent' fullname='sandy.core.scenegraph.mode7:Mode7/private:_zCurrent' type='Number' isStatic='false' isConst='false' >
</field>
<field name='_zLength' fullname='sandy.core.scenegraph.mode7:Mode7/private:_zLength' type='Number' isStatic='false' isConst='false' >
</field>
<field name='_zMax' fullname='sandy.core.scenegraph.mode7:Mode7/private:_zMax' type='Number' isStatic='false' isConst='false' >
</field>
<field name='_zMaxTilted' fullname='sandy.core.scenegraph.mode7:Mode7/private:_zMaxTilted' type='Number' isStatic='false' isConst='false' >
</field>
<field name='_zMin' fullname='sandy.core.scenegraph.mode7:Mode7/private:_zMin' type='Number' isStatic='false' isConst='false' >
</field>
<field name='_zMinTilted' fullname='sandy.core.scenegraph.mode7:Mode7/private:_zMinTilted' type='Number' isStatic='false' isConst='false' >
</field>
<field name='_zProj' fullname='sandy.core.scenegraph.mode7:Mode7/private:_zProj' type='Number' isStatic='false' isConst='false' >
</field>
<field name='_zProjPrev' fullname='sandy.core.scenegraph.mode7:Mode7/private:_zProjPrev' type='Number' isStatic='false' isConst='false' >
</field>
<field name='_zStep' fullname='sandy.core.scenegraph.mode7:Mode7/private:_zStep' type='Number' isStatic='false' isConst='false' >
</field>
<field name='cos' fullname='sandy.core.scenegraph.mode7:Mode7/private:cos' type='Function' isStatic='false' isConst='true' defaultValue='' >
</field>
<field name='precision' fullname='sandy.core.scenegraph.mode7:Mode7/precision' type='Number' isStatic='false' isConst='false' defaultValue='1' >
</field>
<field name='sin' fullname='sandy.core.scenegraph.mode7:Mode7/private:sin' type='Function' isStatic='false' isConst='true' defaultValue='' >
</field>
<field name='tan' fullname='sandy.core.scenegraph.mode7:Mode7/private:tan' type='Function' isStatic='false' isConst='true' defaultValue='' >
</field>
<classRec name='Extrusion' fullname='sandy.extrusion:Extrusion' sourcefile='D:\PROJECTS\SANDY\SandyDoc3.1.2\sandy\extrusion\Extrusion.as' namespace='sandy.extrusion' access='public' baseclass='sandy.core.scenegraph:Shape3D' isFinal='false' isDynamic='false' >
<description><![CDATA[
  Very basic extrusion class.
  ]]></description>
<author><![CDATA[makc
  ]]></author>
</classRec>
<method name='Extrusion' fullname='sandy.extrusion:Extrusion/Extrusion' isStatic='false' isFinal='false' isOverride='false'  param_names='name;profile;sections;closeFront;closeBack' param_types='String;sandy.extrusion.data:Polygon2D;Array;Boolean;Boolean' param_defaults='undefined;undefined;null;true;true' result_type='*'>
<description><![CDATA[
   Extrudes 2D polygon.
   ]]></description>
<param><![CDATA[name Shape name.
   ]]></param>
<param><![CDATA[profile Polygon to extrude.
   ]]></param>
<param><![CDATA[sections Array of transformation matrices.
   ]]></param>
<param><![CDATA[closeFront Flag to close extrusion front end.
   ]]></param>
<param><![CDATA[closeBack Flag to close extrusion back end.
   ]]></param>
<see><![CDATA[Matrix4
   ]]></see>
<see><![CDATA[Polygon2D
   ]]></see>
</method>
<method name='backFace' fullname='sandy.extrusion:Extrusion/backFace/get' isStatic='false' isFinal='false' isOverride='false'  result_type='sandy.core.data:PrimitiveFace'>
<description><![CDATA[
   Collection of polygons on the back surface of extruded shape.
   Texture is mapped to fit profile bounding box on this face.
   ]]></description>
</method>
<method name='frontFace' fullname='sandy.extrusion:Extrusion/frontFace/get' isStatic='false' isFinal='false' isOverride='false'  result_type='sandy.core.data:PrimitiveFace'>
<description><![CDATA[
   Collection of polygons on the front surface of extruded shape.
   Texture is mapped to fit profile bounding box on this face.
   ]]></description>
</method>
<method name='sideFace' fullname='sandy.extrusion:Extrusion/sideFace/get' isStatic='false' isFinal='false' isOverride='false'  result_type='sandy.core.data:PrimitiveFace'>
<description><![CDATA[
   Collection of polygons on the side surface of extruded shape.
   Texture U coordinate is mapped from 0 to 1 along the profile, and
   V coordinate is mapped from 0 at the front edge to 1 at the back edge.
   ]]></description>
</method>
<field name='_backFace' fullname='sandy.extrusion:Extrusion/private:_backFace' type='sandy.core.data:PrimitiveFace' isStatic='false' isConst='false' >
</field>
<field name='_frontFace' fullname='sandy.extrusion:Extrusion/private:_frontFace' type='sandy.core.data:PrimitiveFace' isStatic='false' isConst='false' >
</field>
<field name='_sideFace' fullname='sandy.extrusion:Extrusion/private:_sideFace' type='sandy.core.data:PrimitiveFace' isStatic='false' isConst='false' >
</field>
</asdoc>
